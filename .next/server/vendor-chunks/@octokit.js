"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@octokit";
exports.ids = ["vendor-chunks/@octokit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@octokit/app/dist-node/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@octokit/app/dist-node/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   App: () => (/* binding */ App),\n/* harmony export */   createNodeMiddleware: () => (/* binding */ createNodeMiddleware)\n/* harmony export */ });\n/* harmony import */ var _octokit_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @octokit/core */ \"(ssr)/./node_modules/@octokit/core/dist-src/index.js\");\n/* harmony import */ var _octokit_auth_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/auth-app */ \"(ssr)/./node_modules/@octokit/auth-app/dist-node/index.js\");\n/* harmony import */ var _octokit_oauth_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @octokit/oauth-app */ \"(ssr)/./node_modules/@octokit/oauth-app/dist-node/index.js\");\n/* harmony import */ var _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/auth-unauthenticated */ \"(ssr)/./node_modules/@octokit/auth-unauthenticated/dist-node/index.js\");\n/* harmony import */ var _octokit_webhooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @octokit/webhooks */ \"(ssr)/./node_modules/@octokit/webhooks/dist-bundle/index.js\");\n/* harmony import */ var _octokit_plugin_paginate_rest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @octokit/plugin-paginate-rest */ \"(ssr)/./node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js\");\n// pkg/dist-src/index.js\n\n\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"15.1.0\";\n\n// pkg/dist-src/webhooks.js\n\n\n\nfunction webhooks(appOctokit, options) {\n  return new _octokit_webhooks__WEBPACK_IMPORTED_MODULE_0__.Webhooks({\n    secret: options.secret,\n    transform: async (event) => {\n      if (!(\"installation\" in event.payload) || typeof event.payload.installation !== \"object\") {\n        const octokit2 = new appOctokit.constructor({\n          authStrategy: _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_1__.createUnauthenticatedAuth,\n          auth: {\n            reason: `\"installation\" key missing in webhook event payload`\n          }\n        });\n        return {\n          ...event,\n          octokit: octokit2\n        };\n      }\n      const installationId = event.payload.installation.id;\n      const octokit = await appOctokit.auth({\n        type: \"installation\",\n        installationId,\n        factory(auth) {\n          return new auth.octokit.constructor({\n            ...auth.octokitOptions,\n            authStrategy: _octokit_auth_app__WEBPACK_IMPORTED_MODULE_2__.createAppAuth,\n            ...{\n              auth: {\n                ...auth,\n                installationId\n              }\n            }\n          });\n        }\n      });\n      octokit.hook.before(\"request\", (options2) => {\n        options2.headers[\"x-github-delivery\"] = event.id;\n      });\n      return {\n        ...event,\n        octokit\n      };\n    }\n  });\n}\n\n// pkg/dist-src/each-installation.js\n\n\n// pkg/dist-src/get-installation-octokit.js\n\nasync function getInstallationOctokit(app, installationId) {\n  return app.octokit.auth({\n    type: \"installation\",\n    installationId,\n    factory(auth) {\n      const options = {\n        ...auth.octokitOptions,\n        authStrategy: _octokit_auth_app__WEBPACK_IMPORTED_MODULE_2__.createAppAuth,\n        ...{ auth: { ...auth, installationId } }\n      };\n      return new auth.octokit.constructor(options);\n    }\n  });\n}\n\n// pkg/dist-src/each-installation.js\nfunction eachInstallationFactory(app) {\n  return Object.assign(eachInstallation.bind(null, app), {\n    iterator: eachInstallationIterator.bind(null, app)\n  });\n}\nasync function eachInstallation(app, callback) {\n  const i = eachInstallationIterator(app)[Symbol.asyncIterator]();\n  let result = await i.next();\n  while (!result.done) {\n    await callback(result.value);\n    result = await i.next();\n  }\n}\nfunction eachInstallationIterator(app) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      const iterator = _octokit_plugin_paginate_rest__WEBPACK_IMPORTED_MODULE_3__.composePaginateRest.iterator(\n        app.octokit,\n        \"GET /app/installations\"\n      );\n      for await (const { data: installations } of iterator) {\n        for (const installation of installations) {\n          const installationOctokit = await getInstallationOctokit(\n            app,\n            installation.id\n          );\n          yield { octokit: installationOctokit, installation };\n        }\n      }\n    }\n  };\n}\n\n// pkg/dist-src/each-repository.js\n\nfunction eachRepositoryFactory(app) {\n  return Object.assign(eachRepository.bind(null, app), {\n    iterator: eachRepositoryIterator.bind(null, app)\n  });\n}\nasync function eachRepository(app, queryOrCallback, callback) {\n  const i = eachRepositoryIterator(\n    app,\n    callback ? queryOrCallback : void 0\n  )[Symbol.asyncIterator]();\n  let result = await i.next();\n  while (!result.done) {\n    if (callback) {\n      await callback(result.value);\n    } else {\n      await queryOrCallback(result.value);\n    }\n    result = await i.next();\n  }\n}\nfunction singleInstallationIterator(app, installationId) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      yield {\n        octokit: await app.getInstallationOctokit(installationId)\n      };\n    }\n  };\n}\nfunction eachRepositoryIterator(app, query) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      const iterator = query ? singleInstallationIterator(app, query.installationId) : app.eachInstallation.iterator();\n      for await (const { octokit } of iterator) {\n        const repositoriesIterator = _octokit_plugin_paginate_rest__WEBPACK_IMPORTED_MODULE_3__.composePaginateRest.iterator(\n          octokit,\n          \"GET /installation/repositories\"\n        );\n        for await (const { data: repositories } of repositoriesIterator) {\n          for (const repository of repositories) {\n            yield { octokit, repository };\n          }\n        }\n      }\n    }\n  };\n}\n\n// pkg/dist-src/get-installation-url.js\nfunction getInstallationUrlFactory(app) {\n  let installationUrlBasePromise;\n  return async function getInstallationUrl(options = {}) {\n    if (!installationUrlBasePromise) {\n      installationUrlBasePromise = getInstallationUrlBase(app);\n    }\n    const installationUrlBase = await installationUrlBasePromise;\n    const installationUrl = new URL(installationUrlBase);\n    if (options.target_id !== void 0) {\n      installationUrl.pathname += \"/permissions\";\n      installationUrl.searchParams.append(\n        \"target_id\",\n        options.target_id.toFixed()\n      );\n    }\n    if (options.state !== void 0) {\n      installationUrl.searchParams.append(\"state\", options.state);\n    }\n    return installationUrl.href;\n  };\n}\nasync function getInstallationUrlBase(app) {\n  const { data: appInfo } = await app.octokit.request(\"GET /app\");\n  if (!appInfo) {\n    throw new Error(\"[@octokit/app] unable to fetch metadata for app\");\n  }\n  return `${appInfo.html_url}/installations/new`;\n}\n\n// pkg/dist-src/middleware/node/index.js\n\n\nfunction noop() {\n}\nfunction createNodeMiddleware(app, options = {}) {\n  const log = Object.assign(\n    {\n      debug: noop,\n      info: noop,\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    },\n    options.log\n  );\n  const optionsWithDefaults = {\n    pathPrefix: \"/api/github\",\n    ...options,\n    log\n  };\n  const webhooksMiddleware = (0,_octokit_webhooks__WEBPACK_IMPORTED_MODULE_0__.createNodeMiddleware)(app.webhooks, {\n    path: optionsWithDefaults.pathPrefix + \"/webhooks\",\n    log\n  });\n  const oauthMiddleware = (0,_octokit_oauth_app__WEBPACK_IMPORTED_MODULE_4__.createNodeMiddleware)(app.oauth, {\n    pathPrefix: optionsWithDefaults.pathPrefix + \"/oauth\"\n  });\n  return middleware.bind(\n    null,\n    optionsWithDefaults.pathPrefix,\n    webhooksMiddleware,\n    oauthMiddleware\n  );\n}\nasync function middleware(pathPrefix, webhooksMiddleware, oauthMiddleware, request, response, next) {\n  const { pathname } = new URL(request.url, \"http://localhost\");\n  if (pathname.startsWith(`${pathPrefix}/`)) {\n    if (pathname === `${pathPrefix}/webhooks`) {\n      webhooksMiddleware(request, response);\n    } else if (pathname.startsWith(`${pathPrefix}/oauth/`)) {\n      oauthMiddleware(request, response);\n    } else {\n      (0,_octokit_oauth_app__WEBPACK_IMPORTED_MODULE_4__.sendNodeResponse)((0,_octokit_oauth_app__WEBPACK_IMPORTED_MODULE_4__.unknownRouteResponse)(request), response);\n    }\n    return true;\n  } else {\n    next?.();\n    return false;\n  }\n}\n\n// pkg/dist-src/index.js\nvar App = class {\n  static VERSION = VERSION;\n  static defaults(defaults) {\n    const AppWithDefaults = class extends this {\n      constructor(...args) {\n        super({\n          ...defaults,\n          ...args[0]\n        });\n      }\n    };\n    return AppWithDefaults;\n  }\n  octokit;\n  // @ts-ignore calling app.webhooks will throw a helpful error when options.webhooks is not set\n  webhooks;\n  // @ts-ignore calling app.oauth will throw a helpful error when options.oauth is not set\n  oauth;\n  getInstallationOctokit;\n  eachInstallation;\n  eachRepository;\n  getInstallationUrl;\n  log;\n  constructor(options) {\n    const Octokit = options.Octokit || _octokit_core__WEBPACK_IMPORTED_MODULE_5__.Octokit;\n    const authOptions = Object.assign(\n      {\n        appId: options.appId,\n        privateKey: options.privateKey\n      },\n      options.oauth ? {\n        clientId: options.oauth.clientId,\n        clientSecret: options.oauth.clientSecret\n      } : {}\n    );\n    this.octokit = new Octokit({\n      authStrategy: _octokit_auth_app__WEBPACK_IMPORTED_MODULE_2__.createAppAuth,\n      auth: authOptions,\n      log: options.log\n    });\n    this.log = Object.assign(\n      {\n        debug: () => {\n        },\n        info: () => {\n        },\n        warn: console.warn.bind(console),\n        error: console.error.bind(console)\n      },\n      options.log\n    );\n    if (options.webhooks) {\n      this.webhooks = webhooks(this.octokit, options.webhooks);\n    } else {\n      Object.defineProperty(this, \"webhooks\", {\n        get() {\n          throw new Error(\"[@octokit/app] webhooks option not set\");\n        }\n      });\n    }\n    if (options.oauth) {\n      this.oauth = new _octokit_oauth_app__WEBPACK_IMPORTED_MODULE_4__.OAuthApp({\n        ...options.oauth,\n        clientType: \"github-app\",\n        Octokit\n      });\n    } else {\n      Object.defineProperty(this, \"oauth\", {\n        get() {\n          throw new Error(\n            \"[@octokit/app] oauth.clientId / oauth.clientSecret options are not set\"\n          );\n        }\n      });\n    }\n    this.getInstallationOctokit = getInstallationOctokit.bind(\n      null,\n      this\n    );\n    this.eachInstallation = eachInstallationFactory(\n      this\n    );\n    this.eachRepository = eachRepositoryFactory(\n      this\n    );\n    this.getInstallationUrl = getInstallationUrlFactory(this);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/app/dist-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-app/dist-node/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@octokit/auth-app/dist-node/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAppAuth: () => (/* binding */ createAppAuth),\n/* harmony export */   createOAuthUserAuth: () => (/* reexport safe */ _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_3__.createOAuthUserAuth)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_auth_oauth_app__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @octokit/auth-oauth-app */ \"(ssr)/./node_modules/@octokit/auth-oauth-app/dist-bundle/index.js\");\n/* harmony import */ var universal_github_app_jwt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! universal-github-app-jwt */ \"(ssr)/./node_modules/universal-github-app-jwt/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/@octokit/auth-app/node_modules/lru-cache/dist/esm/index.js\");\n/* harmony import */ var _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @octokit/auth-oauth-user */ \"(ssr)/./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js\");\n// pkg/dist-src/index.js\n\n\n\n\n// pkg/dist-src/get-app-authentication.js\n\nasync function getAppAuthentication({\n  appId,\n  privateKey,\n  timeDifference\n}) {\n  try {\n    const appAuthentication = await (0,universal_github_app_jwt__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n      id: appId,\n      privateKey,\n      now: timeDifference && Math.floor(Date.now() / 1e3) + timeDifference\n    });\n    return {\n      type: \"app\",\n      token: appAuthentication.token,\n      appId: appAuthentication.appId,\n      expiresAt: new Date(appAuthentication.expiration * 1e3).toISOString()\n    };\n  } catch (error) {\n    if (privateKey === \"-----BEGIN RSA PRIVATE KEY-----\") {\n      throw new Error(\n        \"The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\\n'\"\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n\n// pkg/dist-src/cache.js\n\nfunction getCache() {\n  return new lru_cache__WEBPACK_IMPORTED_MODULE_2__.LRUCache({\n    // cache max. 15000 tokens, that will use less than 10mb memory\n    max: 15e3,\n    // Cache for 1 minute less than GitHub expiry\n    ttl: 1e3 * 60 * 59\n  });\n}\nasync function get(cache, options) {\n  const cacheKey = optionsToCacheKey(options);\n  const result = await cache.get(cacheKey);\n  if (!result) {\n    return;\n  }\n  const [\n    token,\n    createdAt,\n    expiresAt,\n    repositorySelection,\n    permissionsString,\n    singleFileName\n  ] = result.split(\"|\");\n  const permissions = options.permissions || permissionsString.split(/,/).reduce((permissions2, string) => {\n    if (/!$/.test(string)) {\n      permissions2[string.slice(0, -1)] = \"write\";\n    } else {\n      permissions2[string] = \"read\";\n    }\n    return permissions2;\n  }, {});\n  return {\n    token,\n    createdAt,\n    expiresAt,\n    permissions,\n    repositoryIds: options.repositoryIds,\n    repositoryNames: options.repositoryNames,\n    singleFileName,\n    repositorySelection\n  };\n}\nasync function set(cache, options, data) {\n  const key = optionsToCacheKey(options);\n  const permissionsString = options.permissions ? \"\" : Object.keys(data.permissions).map(\n    (name) => `${name}${data.permissions[name] === \"write\" ? \"!\" : \"\"}`\n  ).join(\",\");\n  const value = [\n    data.token,\n    data.createdAt,\n    data.expiresAt,\n    data.repositorySelection,\n    permissionsString,\n    data.singleFileName\n  ].join(\"|\");\n  await cache.set(key, value);\n}\nfunction optionsToCacheKey({\n  installationId,\n  permissions = {},\n  repositoryIds = [],\n  repositoryNames = []\n}) {\n  const permissionsString = Object.keys(permissions).sort().map((name) => permissions[name] === \"read\" ? name : `${name}!`).join(\",\");\n  const repositoryIdsString = repositoryIds.sort().join(\",\");\n  const repositoryNamesString = repositoryNames.join(\",\");\n  return [\n    installationId,\n    repositoryIdsString,\n    repositoryNamesString,\n    permissionsString\n  ].filter(Boolean).join(\"|\");\n}\n\n// pkg/dist-src/to-token-authentication.js\nfunction toTokenAuthentication({\n  installationId,\n  token,\n  createdAt,\n  expiresAt,\n  repositorySelection,\n  permissions,\n  repositoryIds,\n  repositoryNames,\n  singleFileName\n}) {\n  return Object.assign(\n    {\n      type: \"token\",\n      tokenType: \"installation\",\n      token,\n      installationId,\n      permissions,\n      createdAt,\n      expiresAt,\n      repositorySelection\n    },\n    repositoryIds ? { repositoryIds } : null,\n    repositoryNames ? { repositoryNames } : null,\n    singleFileName ? { singleFileName } : null\n  );\n}\n\n// pkg/dist-src/get-installation-authentication.js\nasync function getInstallationAuthentication(state, options, customRequest) {\n  const installationId = Number(options.installationId || state.installationId);\n  if (!installationId) {\n    throw new Error(\n      \"[@octokit/auth-app] installationId option is required for installation authentication.\"\n    );\n  }\n  if (options.factory) {\n    const { type, factory, oauthApp, ...factoryAuthOptions } = {\n      ...state,\n      ...options\n    };\n    return factory(factoryAuthOptions);\n  }\n  const optionsWithInstallationTokenFromState = Object.assign(\n    { installationId },\n    options\n  );\n  if (!options.refresh) {\n    const result = await get(\n      state.cache,\n      optionsWithInstallationTokenFromState\n    );\n    if (result) {\n      const {\n        token: token2,\n        createdAt: createdAt2,\n        expiresAt: expiresAt2,\n        permissions: permissions2,\n        repositoryIds: repositoryIds2,\n        repositoryNames: repositoryNames2,\n        singleFileName: singleFileName2,\n        repositorySelection: repositorySelection2\n      } = result;\n      return toTokenAuthentication({\n        installationId,\n        token: token2,\n        createdAt: createdAt2,\n        expiresAt: expiresAt2,\n        permissions: permissions2,\n        repositorySelection: repositorySelection2,\n        repositoryIds: repositoryIds2,\n        repositoryNames: repositoryNames2,\n        singleFileName: singleFileName2\n      });\n    }\n  }\n  const appAuthentication = await getAppAuthentication(state);\n  const request = customRequest || state.request;\n  const {\n    data: {\n      token,\n      expires_at: expiresAt,\n      repositories,\n      permissions: permissionsOptional,\n      repository_selection: repositorySelectionOptional,\n      single_file: singleFileName\n    }\n  } = await request(\"POST /app/installations/{installation_id}/access_tokens\", {\n    installation_id: installationId,\n    repository_ids: options.repositoryIds,\n    repositories: options.repositoryNames,\n    permissions: options.permissions,\n    mediaType: {\n      previews: [\"machine-man\"]\n    },\n    headers: {\n      authorization: `bearer ${appAuthentication.token}`\n    }\n  });\n  const permissions = permissionsOptional || {};\n  const repositorySelection = repositorySelectionOptional || \"all\";\n  const repositoryIds = repositories ? repositories.map((r) => r.id) : void 0;\n  const repositoryNames = repositories ? repositories.map((repo) => repo.name) : void 0;\n  const createdAt = (/* @__PURE__ */ new Date()).toISOString();\n  await set(state.cache, optionsWithInstallationTokenFromState, {\n    token,\n    createdAt,\n    expiresAt,\n    repositorySelection,\n    permissions,\n    repositoryIds,\n    repositoryNames,\n    singleFileName\n  });\n  return toTokenAuthentication({\n    installationId,\n    token,\n    createdAt,\n    expiresAt,\n    repositorySelection,\n    permissions,\n    repositoryIds,\n    repositoryNames,\n    singleFileName\n  });\n}\n\n// pkg/dist-src/auth.js\nasync function auth(state, authOptions) {\n  switch (authOptions.type) {\n    case \"app\":\n      return getAppAuthentication(state);\n    case \"oauth-app\":\n      return state.oauthApp({ type: \"oauth-app\" });\n    case \"installation\":\n      authOptions;\n      return getInstallationAuthentication(state, {\n        ...authOptions,\n        type: \"installation\"\n      });\n    case \"oauth-user\":\n      return state.oauthApp(authOptions);\n    default:\n      throw new Error(`Invalid auth type: ${authOptions.type}`);\n  }\n}\n\n// pkg/dist-src/hook.js\n\n\n\n// pkg/dist-src/requires-app-auth.js\nvar PATHS = [\n  \"/app\",\n  \"/app/hook/config\",\n  \"/app/hook/deliveries\",\n  \"/app/hook/deliveries/{delivery_id}\",\n  \"/app/hook/deliveries/{delivery_id}/attempts\",\n  \"/app/installations\",\n  \"/app/installations/{installation_id}\",\n  \"/app/installations/{installation_id}/access_tokens\",\n  \"/app/installations/{installation_id}/suspended\",\n  \"/app/installation-requests\",\n  \"/marketplace_listing/accounts/{account_id}\",\n  \"/marketplace_listing/plan\",\n  \"/marketplace_listing/plans\",\n  \"/marketplace_listing/plans/{plan_id}/accounts\",\n  \"/marketplace_listing/stubbed/accounts/{account_id}\",\n  \"/marketplace_listing/stubbed/plan\",\n  \"/marketplace_listing/stubbed/plans\",\n  \"/marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n  \"/orgs/{org}/installation\",\n  \"/repos/{owner}/{repo}/installation\",\n  \"/users/{username}/installation\"\n];\nfunction routeMatcher(paths) {\n  const regexes = paths.map(\n    (p) => p.split(\"/\").map((c) => c.startsWith(\"{\") ? \"(?:.+?)\" : c).join(\"/\")\n  );\n  const regex = `^(?:${regexes.map((r) => `(?:${r})`).join(\"|\")})$`;\n  return new RegExp(regex, \"i\");\n}\nvar REGEX = routeMatcher(PATHS);\nfunction requiresAppAuth(url) {\n  return !!url && REGEX.test(url.split(\"?\")[0]);\n}\n\n// pkg/dist-src/hook.js\nvar FIVE_SECONDS_IN_MS = 5 * 1e3;\nfunction isNotTimeSkewError(error) {\n  return !(error.message.match(\n    /'Expiration time' claim \\('exp'\\) must be a numeric value representing the future time at which the assertion expires/\n  ) || error.message.match(\n    /'Issued at' claim \\('iat'\\) must be an Integer representing the time that the assertion was issued/\n  ));\n}\nasync function hook(state, request, route, parameters) {\n  const endpoint = request.endpoint.merge(route, parameters);\n  const url = endpoint.url;\n  if (/\\/login\\/oauth\\/access_token$/.test(url)) {\n    return request(endpoint);\n  }\n  if (requiresAppAuth(url.replace(request.endpoint.DEFAULTS.baseUrl, \"\"))) {\n    const { token: token2 } = await getAppAuthentication(state);\n    endpoint.headers.authorization = `bearer ${token2}`;\n    let response;\n    try {\n      response = await request(endpoint);\n    } catch (error) {\n      if (isNotTimeSkewError(error)) {\n        throw error;\n      }\n      if (typeof error.response.headers.date === \"undefined\") {\n        throw error;\n      }\n      const diff = Math.floor(\n        (Date.parse(error.response.headers.date) - Date.parse((/* @__PURE__ */ new Date()).toString())) / 1e3\n      );\n      state.log.warn(error.message);\n      state.log.warn(\n        `[@octokit/auth-app] GitHub API time and system time are different by ${diff} seconds. Retrying request with the difference accounted for.`\n      );\n      const { token: token3 } = await getAppAuthentication({\n        ...state,\n        timeDifference: diff\n      });\n      endpoint.headers.authorization = `bearer ${token3}`;\n      return request(endpoint);\n    }\n    return response;\n  }\n  if ((0,_octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_3__.requiresBasicAuth)(url)) {\n    const authentication = await state.oauthApp({ type: \"oauth-app\" });\n    endpoint.headers.authorization = authentication.headers.authorization;\n    return request(endpoint);\n  }\n  const { token, createdAt } = await getInstallationAuthentication(\n    state,\n    // @ts-expect-error TBD\n    {},\n    request\n  );\n  endpoint.headers.authorization = `token ${token}`;\n  return sendRequestWithRetries(\n    state,\n    request,\n    endpoint,\n    createdAt\n  );\n}\nasync function sendRequestWithRetries(state, request, options, createdAt, retries = 0) {\n  const timeSinceTokenCreationInMs = +/* @__PURE__ */ new Date() - +new Date(createdAt);\n  try {\n    return await request(options);\n  } catch (error) {\n    if (error.status !== 401) {\n      throw error;\n    }\n    if (timeSinceTokenCreationInMs >= FIVE_SECONDS_IN_MS) {\n      if (retries > 0) {\n        error.message = `After ${retries} retries within ${timeSinceTokenCreationInMs / 1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`;\n      }\n      throw error;\n    }\n    ++retries;\n    const awaitTime = retries * 1e3;\n    state.log.warn(\n      `[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${retries}, wait: ${awaitTime / 1e3}s)`\n    );\n    await new Promise((resolve) => setTimeout(resolve, awaitTime));\n    return sendRequestWithRetries(state, request, options, createdAt, retries);\n  }\n}\n\n// pkg/dist-src/version.js\nvar VERSION = \"7.1.0\";\n\n// pkg/dist-src/index.js\n\nfunction createAppAuth(options) {\n  if (!options.appId) {\n    throw new Error(\"[@octokit/auth-app] appId option is required\");\n  }\n  if (!options.privateKey) {\n    throw new Error(\"[@octokit/auth-app] privateKey option is required\");\n  }\n  if (\"installationId\" in options && !options.installationId) {\n    throw new Error(\n      \"[@octokit/auth-app] installationId is set to a falsy value\"\n    );\n  }\n  const log = Object.assign(\n    {\n      warn: console.warn.bind(console)\n    },\n    options.log\n  );\n  const request = options.request || _octokit_request__WEBPACK_IMPORTED_MODULE_4__.request.defaults({\n    headers: {\n      \"user-agent\": `octokit-auth-app.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n    }\n  });\n  const state = Object.assign(\n    {\n      request,\n      cache: getCache()\n    },\n    options,\n    options.installationId ? { installationId: Number(options.installationId) } : {},\n    {\n      log,\n      oauthApp: (0,_octokit_auth_oauth_app__WEBPACK_IMPORTED_MODULE_5__.createOAuthAppAuth)({\n        clientType: \"github-app\",\n        clientId: options.clientId || \"\",\n        clientSecret: options.clientSecret || \"\",\n        request\n      })\n    }\n  );\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-app/dist-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-app/node_modules/lru-cache/dist/esm/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@octokit/auth-app/node_modules/lru-cache/dist/esm/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LRUCache: () => (/* binding */ LRUCache)\n/* harmony export */ });\n/**\n * @module LRUCache\n */\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nclass LRUCache {\n    // options that cannot be changed without disaster\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    #memoMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    get memoMethod() {\n        return this.#memoMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (memoMethod !== undefined &&\n            typeof memoMethod !== 'function') {\n            throw new TypeError('memoMethod must be a function if defined');\n        }\n        this.#memoMethod = memoMethod;\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the number of ms left in the item's TTL. If item is not in cache,\n     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.#delete(this.#keyList[index], 'expire');\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                /* c8 ignore next */\n                if (!ttl || !start)\n                    return;\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (!ttl || !start) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            const s = starts[index];\n            const t = ttls[index];\n            return !!t && !!s && (cachedNow || getNow()) - s > t;\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * A String value that is used in the creation of the default string\n     * description of an object. Called by the built-in method\n     * `Object.prototype.toString`.\n     */\n    [Symbol.toStringTag] = 'LRUCache';\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from most\n     * recently used to least recently used.\n     *\n     * `fn` is called as `fn(value, key, cache)`.\n     *\n     * If `thisp` is provided, function will be called in the `this`-context of\n     * the provided object, or the cache if no `thisp` object is provided.\n     *\n     * Does not update age or recenty of use, or iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.#delete(this.#keyList[i], 'expire');\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Get the extended info about a given entry, to get its value, size, and\n     * TTL info simultaneously. Returns `undefined` if the key is not present.\n     *\n     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n     * serialization, the `start` value is always the current timestamp, and the\n     * `ttl` is a calculated remaining time to live (negative if expired).\n     *\n     * Always returns stale values, if their info is found in the cache, so be\n     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n     * if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n        const value = this.#isBackgroundFetch(v)\n            ? v.__staleWhileFetching\n            : v;\n        if (value === undefined)\n            return undefined;\n        const entry = { value };\n        if (this.#ttls && this.#starts) {\n            const ttl = this.#ttls[i];\n            const start = this.#starts[i];\n            if (ttl && start) {\n                const remain = ttl - (perf.now() - start);\n                entry.ttl = remain;\n                entry.start = Date.now();\n            }\n        }\n        if (this.#sizes) {\n            entry.size = this.#sizes[i];\n        }\n        return entry;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to {@link LRLUCache#load}.\n     *\n     * The `start` fields are calculated relative to a portable `Date.now()`\n     * timestamp, even if `performance.now()` is available.\n     *\n     * Stale entries are always included in the `dump`, even if\n     * {@link LRUCache.OptionsBase.allowStale} is false.\n     *\n     * Note: this returns an actual array, not a generator, so it can be more\n     * easily passed around.\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     *\n     * The shape of the resulting cache may be different if the same options are\n     * not used in both caches.\n     *\n     * The `start` fields are assumed to be calculated relative to a portable\n     * `Date.now()` timestamp, even if `performance.now()` is available.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     *\n     * Fields on the {@link LRUCache.SetOptions} options param will override\n     * their corresponding values in the constructor options for the scope\n     * of this single `set()` operation.\n     *\n     * If `start` is provided, then that will set the effective start\n     * time for the TTL calculation. Note that this must be a previous\n     * value of `performance.now()` if supported, or a previous value of\n     * `Date.now()` if not.\n     *\n     * Options object may also include `size`, which will prevent\n     * calling the `sizeCalculation` function and just use the specified\n     * number if it is a positive integer, and `noDisposeOnSet` which\n     * will prevent calling a `dispose` function in the case of\n     * overwrites.\n     *\n     * If the `size` (or return value of `sizeCalculation`) for a given\n     * entry is greater than `maxEntrySize`, then the item will not be\n     * added to the cache.\n     *\n     * Will update the recency of the entry.\n     *\n     * If the value is `undefined`, then this is an alias for\n     * `cache.delete(key)`. `undefined` is never stored in the cache.\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.#delete(k, 'set');\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                    const { __staleWhileFetching: s } = oldVal;\n                    if (s !== undefined && !noDisposeOnSet) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(s, k, 'set');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([s, k, 'set']);\n                        }\n                    }\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Check if a key is in the cache, without updating the recency of\n     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n     * to `true` in either the options or the constructor.\n     *\n     * Will return `false` if the item is stale, even though it is technically in\n     * the cache. The difference can be determined (if it matters) by using a\n     * `status` argument, and inspecting the `has` field.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n        }\n        const v = this.#valList[index];\n        // either stale and allowed, or forcing a refresh of non-stale value\n        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.#delete(k, 'fetch');\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.#delete(k, 'fetch');\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    async forceFetch(k, fetchOptions = {}) {\n        const v = await this.fetch(k, fetchOptions);\n        if (v === undefined)\n            throw new Error('fetch() returned undefined');\n        return v;\n    }\n    memo(k, memoOptions = {}) {\n        const memoMethod = this.#memoMethod;\n        if (!memoMethod) {\n            throw new Error('no memoMethod provided to constructor');\n        }\n        const { context, forceRefresh, ...options } = memoOptions;\n        const v = this.get(k, options);\n        if (!forceRefresh && v !== undefined)\n            return v;\n        const vv = memoMethod(k, v, {\n            options,\n            context,\n        });\n        this.set(k, vv, options);\n        return vv;\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.#delete(k, 'expire');\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     *\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        return this.#delete(k, 'delete');\n    }\n    #delete(k, reason) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.#clear(reason);\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, reason);\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, reason]);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        const pi = this.#prev[index];\n                        this.#next[pi] = this.#next[index];\n                        const ni = this.#next[index];\n                        this.#prev[ni] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        return this.#clear('delete');\n    }\n    #clear(reason) {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, reason);\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, reason]);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-app/node_modules/lru-cache/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-oauth-app/dist-bundle/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@octokit/auth-oauth-app/dist-bundle/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOAuthAppAuth: () => (/* binding */ createOAuthAppAuth),\n/* harmony export */   createOAuthUserAuth: () => (/* reexport safe */ _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_1__.createOAuthUserAuth)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/auth-oauth-user */ \"(ssr)/./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js\");\n// pkg/dist-src/index.js\n\n\n\n// pkg/dist-src/auth.js\n\nasync function auth(state, authOptions) {\n  if (authOptions.type === \"oauth-app\") {\n    return {\n      type: \"oauth-app\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      headers: {\n        authorization: `basic ${btoa(\n          `${state.clientId}:${state.clientSecret}`\n        )}`\n      }\n    };\n  }\n  if (\"factory\" in authOptions) {\n    const { type, ...options } = {\n      ...authOptions,\n      ...state\n    };\n    return authOptions.factory(options);\n  }\n  const common = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.request,\n    ...authOptions\n  };\n  const userAuth = state.clientType === \"oauth-app\" ? await (0,_octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_1__.createOAuthUserAuth)({\n    ...common,\n    clientType: state.clientType\n  }) : await (0,_octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_1__.createOAuthUserAuth)({\n    ...common,\n    clientType: state.clientType\n  });\n  return userAuth();\n}\n\n// pkg/dist-src/hook.js\n\nasync function hook(state, request2, route, parameters) {\n  let endpoint = request2.endpoint.merge(\n    route,\n    parameters\n  );\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request2(endpoint);\n  }\n  if (state.clientType === \"github-app\" && !(0,_octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_1__.requiresBasicAuth)(endpoint.url)) {\n    throw new Error(\n      `[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`\n    );\n  }\n  const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n  endpoint.headers.authorization = `basic ${credentials}`;\n  try {\n    return await request2(endpoint);\n  } catch (error) {\n    if (error.status !== 401)\n      throw error;\n    error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n    throw error;\n  }\n}\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/index.js\n\nfunction createOAuthAppAuth(options) {\n  const state = Object.assign(\n    {\n      request: _octokit_request__WEBPACK_IMPORTED_MODULE_2__.request.defaults({\n        headers: {\n          \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n        }\n      }),\n      clientType: \"oauth-app\"\n    },\n    options\n  );\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC1vYXV0aC1hcHAvZGlzdC1idW5kbGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNUOztBQUUzQztBQUMrRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLGFBQWEsZUFBZSxHQUFHLG1CQUFtQjtBQUNsRCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDZFQUFtQjtBQUMvRTtBQUNBO0FBQ0EsR0FBRyxVQUFVLDZFQUFtQjtBQUNoQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QywyRUFBaUI7QUFDN0Q7QUFDQSxpSkFBaUosVUFBVSxTQUFTLGlCQUFpQixFQUFFLGFBQWE7QUFDcE07QUFDQTtBQUNBLDhCQUE4QixlQUFlLEdBQUcsbUJBQW1CO0FBQ25FLDRDQUE0QyxZQUFZO0FBQ3hEO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGtEQUFrRCxpQkFBaUIsRUFBRSxhQUFhO0FBQ2xGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ3VGO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU87QUFDdEI7QUFDQSxxREFBcUQsU0FBUyxFQUFFLGtFQUFZLEdBQUc7QUFDL0U7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFJRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9hdXRoLW9hdXRoLWFwcC9kaXN0LWJ1bmRsZS9pbmRleC5qcz85MmZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2F1dGguanNcbmltcG9ydCB7IGNyZWF0ZU9BdXRoVXNlckF1dGggfSBmcm9tIFwiQG9jdG9raXQvYXV0aC1vYXV0aC11c2VyXCI7XG5hc3luYyBmdW5jdGlvbiBhdXRoKHN0YXRlLCBhdXRoT3B0aW9ucykge1xuICBpZiAoYXV0aE9wdGlvbnMudHlwZSA9PT0gXCJvYXV0aC1hcHBcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm9hdXRoLWFwcFwiLFxuICAgICAgY2xpZW50SWQ6IHN0YXRlLmNsaWVudElkLFxuICAgICAgY2xpZW50U2VjcmV0OiBzdGF0ZS5jbGllbnRTZWNyZXQsXG4gICAgICBjbGllbnRUeXBlOiBzdGF0ZS5jbGllbnRUeXBlLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiBgYmFzaWMgJHtidG9hKFxuICAgICAgICAgIGAke3N0YXRlLmNsaWVudElkfToke3N0YXRlLmNsaWVudFNlY3JldH1gXG4gICAgICAgICl9YFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgaWYgKFwiZmFjdG9yeVwiIGluIGF1dGhPcHRpb25zKSB7XG4gICAgY29uc3QgeyB0eXBlLCAuLi5vcHRpb25zIH0gPSB7XG4gICAgICAuLi5hdXRoT3B0aW9ucyxcbiAgICAgIC4uLnN0YXRlXG4gICAgfTtcbiAgICByZXR1cm4gYXV0aE9wdGlvbnMuZmFjdG9yeShvcHRpb25zKTtcbiAgfVxuICBjb25zdCBjb21tb24gPSB7XG4gICAgY2xpZW50SWQ6IHN0YXRlLmNsaWVudElkLFxuICAgIGNsaWVudFNlY3JldDogc3RhdGUuY2xpZW50U2VjcmV0LFxuICAgIHJlcXVlc3Q6IHN0YXRlLnJlcXVlc3QsXG4gICAgLi4uYXV0aE9wdGlvbnNcbiAgfTtcbiAgY29uc3QgdXNlckF1dGggPSBzdGF0ZS5jbGllbnRUeXBlID09PSBcIm9hdXRoLWFwcFwiID8gYXdhaXQgY3JlYXRlT0F1dGhVc2VyQXV0aCh7XG4gICAgLi4uY29tbW9uLFxuICAgIGNsaWVudFR5cGU6IHN0YXRlLmNsaWVudFR5cGVcbiAgfSkgOiBhd2FpdCBjcmVhdGVPQXV0aFVzZXJBdXRoKHtcbiAgICAuLi5jb21tb24sXG4gICAgY2xpZW50VHlwZTogc3RhdGUuY2xpZW50VHlwZVxuICB9KTtcbiAgcmV0dXJuIHVzZXJBdXRoKCk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9ob29rLmpzXG5pbXBvcnQgeyByZXF1aXJlc0Jhc2ljQXV0aCB9IGZyb20gXCJAb2N0b2tpdC9hdXRoLW9hdXRoLXVzZXJcIjtcbmFzeW5jIGZ1bmN0aW9uIGhvb2soc3RhdGUsIHJlcXVlc3QyLCByb3V0ZSwgcGFyYW1ldGVycykge1xuICBsZXQgZW5kcG9pbnQgPSByZXF1ZXN0Mi5lbmRwb2ludC5tZXJnZShcbiAgICByb3V0ZSxcbiAgICBwYXJhbWV0ZXJzXG4gICk7XG4gIGlmICgvXFwvbG9naW5cXC8ob2F1dGhcXC9hY2Nlc3NfdG9rZW58ZGV2aWNlXFwvY29kZSkkLy50ZXN0KGVuZHBvaW50LnVybCkpIHtcbiAgICByZXR1cm4gcmVxdWVzdDIoZW5kcG9pbnQpO1xuICB9XG4gIGlmIChzdGF0ZS5jbGllbnRUeXBlID09PSBcImdpdGh1Yi1hcHBcIiAmJiAhcmVxdWlyZXNCYXNpY0F1dGgoZW5kcG9pbnQudXJsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBbQG9jdG9raXQvYXV0aC1vYXV0aC1hcHBdIEdpdEh1YiBBcHBzIGNhbm5vdCB1c2UgdGhlaXIgY2xpZW50IElEL3NlY3JldCBmb3IgYmFzaWMgYXV0aGVudGljYXRpb24gZm9yIGVuZHBvaW50cyBvdGhlciB0aGFuIFwiL2FwcGxpY2F0aW9ucy97Y2xpZW50X2lkfS8qKlwiLiBcIiR7ZW5kcG9pbnQubWV0aG9kfSAke2VuZHBvaW50LnVybH1cIiBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IGNyZWRlbnRpYWxzID0gYnRvYShgJHtzdGF0ZS5jbGllbnRJZH06JHtzdGF0ZS5jbGllbnRTZWNyZXR9YCk7XG4gIGVuZHBvaW50LmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IGBiYXNpYyAke2NyZWRlbnRpYWxzfWA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHJlcXVlc3QyKGVuZHBvaW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzICE9PSA0MDEpXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICBlcnJvci5tZXNzYWdlID0gYFtAb2N0b2tpdC9hdXRoLW9hdXRoLWFwcF0gXCIke2VuZHBvaW50Lm1ldGhvZH0gJHtlbmRwb2ludC51cmx9XCIgZG9lcyBub3Qgc3VwcG9ydCBjbGllbnRJZC9jbGllbnRTZWNyZXQgYmFzaWMgYXV0aGVudGljYXRpb24uYDtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBwa2cvZGlzdC1zcmMvdmVyc2lvbi5qc1xudmFyIFZFUlNJT04gPSBcIjAuMC4wLWRldmVsb3BtZW50XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xuaW1wb3J0IHsgY3JlYXRlT0F1dGhVc2VyQXV0aCBhcyBjcmVhdGVPQXV0aFVzZXJBdXRoMiB9IGZyb20gXCJAb2N0b2tpdC9hdXRoLW9hdXRoLXVzZXJcIjtcbmZ1bmN0aW9uIGNyZWF0ZU9BdXRoQXBwQXV0aChvcHRpb25zKSB7XG4gIGNvbnN0IHN0YXRlID0gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LmRlZmF1bHRzKHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwidXNlci1hZ2VudFwiOiBgb2N0b2tpdC1hdXRoLW9hdXRoLWFwcC5qcy8ke1ZFUlNJT059ICR7Z2V0VXNlckFnZW50KCl9YFxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGNsaWVudFR5cGU6IFwib2F1dGgtYXBwXCJcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYXV0aC5iaW5kKG51bGwsIHN0YXRlKSwge1xuICAgIGhvb2s6IGhvb2suYmluZChudWxsLCBzdGF0ZSlcbiAgfSk7XG59XG5leHBvcnQge1xuICBjcmVhdGVPQXV0aEFwcEF1dGgsXG4gIGNyZWF0ZU9BdXRoVXNlckF1dGgyIGFzIGNyZWF0ZU9BdXRoVXNlckF1dGhcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-oauth-app/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-oauth-device/dist-bundle/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@octokit/auth-oauth-device/dist-bundle/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOAuthDeviceAuth: () => (/* binding */ createOAuthDeviceAuth)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/oauth-methods */ \"(ssr)/./node_modules/@octokit/oauth-methods/dist-bundle/index.js\");\n// pkg/dist-src/index.js\n\n\n\n// pkg/dist-src/get-oauth-access-token.js\n\nasync function getOAuthAccessToken(state, options) {\n  const cachedAuthentication = getCachedAuthentication(state, options.auth);\n  if (cachedAuthentication)\n    return cachedAuthentication;\n  const { data: verification } = await (0,_octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.createDeviceCode)({\n    clientType: state.clientType,\n    clientId: state.clientId,\n    request: options.request || state.request,\n    // @ts-expect-error the extra code to make TS happy is not worth it\n    scopes: options.auth.scopes || state.scopes\n  });\n  await state.onVerification(verification);\n  const authentication = await waitForAccessToken(\n    options.request || state.request,\n    state.clientId,\n    state.clientType,\n    verification\n  );\n  state.authentication = authentication;\n  return authentication;\n}\nfunction getCachedAuthentication(state, auth2) {\n  if (auth2.refresh === true)\n    return false;\n  if (!state.authentication)\n    return false;\n  if (state.clientType === \"github-app\") {\n    return state.authentication;\n  }\n  const authentication = state.authentication;\n  const newScope = (\"scopes\" in auth2 && auth2.scopes || state.scopes).join(\n    \" \"\n  );\n  const currentScope = authentication.scopes.join(\" \");\n  return newScope === currentScope ? authentication : false;\n}\nasync function wait(seconds) {\n  await new Promise((resolve) => setTimeout(resolve, seconds * 1e3));\n}\nasync function waitForAccessToken(request, clientId, clientType, verification) {\n  try {\n    const options = {\n      clientId,\n      request,\n      code: verification.device_code\n    };\n    const { authentication } = clientType === \"oauth-app\" ? await (0,_octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.exchangeDeviceCode)({\n      ...options,\n      clientType: \"oauth-app\"\n    }) : await (0,_octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.exchangeDeviceCode)({\n      ...options,\n      clientType: \"github-app\"\n    });\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      ...authentication\n    };\n  } catch (error) {\n    if (!error.response)\n      throw error;\n    const errorType = error.response.data.error;\n    if (errorType === \"authorization_pending\") {\n      await wait(verification.interval);\n      return waitForAccessToken(request, clientId, clientType, verification);\n    }\n    if (errorType === \"slow_down\") {\n      await wait(verification.interval + 5);\n      return waitForAccessToken(request, clientId, clientType, verification);\n    }\n    throw error;\n  }\n}\n\n// pkg/dist-src/auth.js\nasync function auth(state, authOptions) {\n  return getOAuthAccessToken(state, {\n    auth: authOptions\n  });\n}\n\n// pkg/dist-src/hook.js\nasync function hook(state, request, route, parameters) {\n  let endpoint = request.endpoint.merge(\n    route,\n    parameters\n  );\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n  const { token } = await getOAuthAccessToken(state, {\n    request,\n    auth: { type: \"oauth\" }\n  });\n  endpoint.headers.authorization = `token ${token}`;\n  return request(endpoint);\n}\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/index.js\nfunction createOAuthDeviceAuth(options) {\n  const requestWithDefaults = options.request || _octokit_request__WEBPACK_IMPORTED_MODULE_2__.request.defaults({\n    headers: {\n      \"user-agent\": `octokit-auth-oauth-device.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n    }\n  });\n  const { request = requestWithDefaults, ...otherOptions } = options;\n  const state = options.clientType === \"github-app\" ? {\n    ...otherOptions,\n    clientType: \"github-app\",\n    request\n  } : {\n    ...otherOptions,\n    clientType: \"oauth-app\",\n    request,\n    scopes: options.scopes || []\n  };\n  if (!options.clientId) {\n    throw new Error(\n      '[@octokit/auth-oauth-device] \"clientId\" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)'\n    );\n  }\n  if (!options.onVerification) {\n    throw new Error(\n      '[@octokit/auth-oauth-device] \"onVerification\" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)'\n    );\n  }\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC1vYXV0aC1kZXZpY2UvZGlzdC1idW5kbGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ29EO0FBQ1M7O0FBRTdEO0FBQzhFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxxQkFBcUIsUUFBUSx3RUFBZ0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQkFBaUIscUNBQXFDLDBFQUFrQjtBQUNwRjtBQUNBO0FBQ0EsS0FBSyxVQUFVLDBFQUFrQjtBQUNqQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFFBQVE7QUFDbEI7QUFDQSxZQUFZO0FBQ1osR0FBRztBQUNILDRDQUE0QyxNQUFNO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaURBQWlELHFEQUFjO0FBQy9EO0FBQ0Esb0RBQW9ELFNBQVMsRUFBRSxrRUFBWSxHQUFHO0FBQzlFO0FBQ0EsR0FBRztBQUNILFVBQVUsaURBQWlEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9hdXRoLW9hdXRoLWRldmljZS9kaXN0LWJ1bmRsZS9pbmRleC5qcz82YjM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIG9jdG9raXRSZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2dldC1vYXV0aC1hY2Nlc3MtdG9rZW4uanNcbmltcG9ydCB7IGNyZWF0ZURldmljZUNvZGUsIGV4Y2hhbmdlRGV2aWNlQ29kZSB9IGZyb20gXCJAb2N0b2tpdC9vYXV0aC1tZXRob2RzXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPQXV0aEFjY2Vzc1Rva2VuKHN0YXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNhY2hlZEF1dGhlbnRpY2F0aW9uID0gZ2V0Q2FjaGVkQXV0aGVudGljYXRpb24oc3RhdGUsIG9wdGlvbnMuYXV0aCk7XG4gIGlmIChjYWNoZWRBdXRoZW50aWNhdGlvbilcbiAgICByZXR1cm4gY2FjaGVkQXV0aGVudGljYXRpb247XG4gIGNvbnN0IHsgZGF0YTogdmVyaWZpY2F0aW9uIH0gPSBhd2FpdCBjcmVhdGVEZXZpY2VDb2RlKHtcbiAgICBjbGllbnRUeXBlOiBzdGF0ZS5jbGllbnRUeXBlLFxuICAgIGNsaWVudElkOiBzdGF0ZS5jbGllbnRJZCxcbiAgICByZXF1ZXN0OiBvcHRpb25zLnJlcXVlc3QgfHwgc3RhdGUucmVxdWVzdCxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoZSBleHRyYSBjb2RlIHRvIG1ha2UgVFMgaGFwcHkgaXMgbm90IHdvcnRoIGl0XG4gICAgc2NvcGVzOiBvcHRpb25zLmF1dGguc2NvcGVzIHx8IHN0YXRlLnNjb3Blc1xuICB9KTtcbiAgYXdhaXQgc3RhdGUub25WZXJpZmljYXRpb24odmVyaWZpY2F0aW9uKTtcbiAgY29uc3QgYXV0aGVudGljYXRpb24gPSBhd2FpdCB3YWl0Rm9yQWNjZXNzVG9rZW4oXG4gICAgb3B0aW9ucy5yZXF1ZXN0IHx8IHN0YXRlLnJlcXVlc3QsXG4gICAgc3RhdGUuY2xpZW50SWQsXG4gICAgc3RhdGUuY2xpZW50VHlwZSxcbiAgICB2ZXJpZmljYXRpb25cbiAgKTtcbiAgc3RhdGUuYXV0aGVudGljYXRpb24gPSBhdXRoZW50aWNhdGlvbjtcbiAgcmV0dXJuIGF1dGhlbnRpY2F0aW9uO1xufVxuZnVuY3Rpb24gZ2V0Q2FjaGVkQXV0aGVudGljYXRpb24oc3RhdGUsIGF1dGgyKSB7XG4gIGlmIChhdXRoMi5yZWZyZXNoID09PSB0cnVlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5hdXRoZW50aWNhdGlvbilcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChzdGF0ZS5jbGllbnRUeXBlID09PSBcImdpdGh1Yi1hcHBcIikge1xuICAgIHJldHVybiBzdGF0ZS5hdXRoZW50aWNhdGlvbjtcbiAgfVxuICBjb25zdCBhdXRoZW50aWNhdGlvbiA9IHN0YXRlLmF1dGhlbnRpY2F0aW9uO1xuICBjb25zdCBuZXdTY29wZSA9IChcInNjb3Blc1wiIGluIGF1dGgyICYmIGF1dGgyLnNjb3BlcyB8fCBzdGF0ZS5zY29wZXMpLmpvaW4oXG4gICAgXCIgXCJcbiAgKTtcbiAgY29uc3QgY3VycmVudFNjb3BlID0gYXV0aGVudGljYXRpb24uc2NvcGVzLmpvaW4oXCIgXCIpO1xuICByZXR1cm4gbmV3U2NvcGUgPT09IGN1cnJlbnRTY29wZSA/IGF1dGhlbnRpY2F0aW9uIDogZmFsc2U7XG59XG5hc3luYyBmdW5jdGlvbiB3YWl0KHNlY29uZHMpIHtcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyAqIDFlMykpO1xufVxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvckFjY2Vzc1Rva2VuKHJlcXVlc3QsIGNsaWVudElkLCBjbGllbnRUeXBlLCB2ZXJpZmljYXRpb24pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgY2xpZW50SWQsXG4gICAgICByZXF1ZXN0LFxuICAgICAgY29kZTogdmVyaWZpY2F0aW9uLmRldmljZV9jb2RlXG4gICAgfTtcbiAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uIH0gPSBjbGllbnRUeXBlID09PSBcIm9hdXRoLWFwcFwiID8gYXdhaXQgZXhjaGFuZ2VEZXZpY2VDb2RlKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBjbGllbnRUeXBlOiBcIm9hdXRoLWFwcFwiXG4gICAgfSkgOiBhd2FpdCBleGNoYW5nZURldmljZUNvZGUoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGNsaWVudFR5cGU6IFwiZ2l0aHViLWFwcFwiXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidG9rZW5cIixcbiAgICAgIHRva2VuVHlwZTogXCJvYXV0aFwiLFxuICAgICAgLi4uYXV0aGVudGljYXRpb25cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICghZXJyb3IucmVzcG9uc2UpXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICBjb25zdCBlcnJvclR5cGUgPSBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yO1xuICAgIGlmIChlcnJvclR5cGUgPT09IFwiYXV0aG9yaXphdGlvbl9wZW5kaW5nXCIpIHtcbiAgICAgIGF3YWl0IHdhaXQodmVyaWZpY2F0aW9uLmludGVydmFsKTtcbiAgICAgIHJldHVybiB3YWl0Rm9yQWNjZXNzVG9rZW4ocmVxdWVzdCwgY2xpZW50SWQsIGNsaWVudFR5cGUsIHZlcmlmaWNhdGlvbik7XG4gICAgfVxuICAgIGlmIChlcnJvclR5cGUgPT09IFwic2xvd19kb3duXCIpIHtcbiAgICAgIGF3YWl0IHdhaXQodmVyaWZpY2F0aW9uLmludGVydmFsICsgNSk7XG4gICAgICByZXR1cm4gd2FpdEZvckFjY2Vzc1Rva2VuKHJlcXVlc3QsIGNsaWVudElkLCBjbGllbnRUeXBlLCB2ZXJpZmljYXRpb24pO1xuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBwa2cvZGlzdC1zcmMvYXV0aC5qc1xuYXN5bmMgZnVuY3Rpb24gYXV0aChzdGF0ZSwgYXV0aE9wdGlvbnMpIHtcbiAgcmV0dXJuIGdldE9BdXRoQWNjZXNzVG9rZW4oc3RhdGUsIHtcbiAgICBhdXRoOiBhdXRoT3B0aW9uc1xuICB9KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2hvb2suanNcbmFzeW5jIGZ1bmN0aW9uIGhvb2soc3RhdGUsIHJlcXVlc3QsIHJvdXRlLCBwYXJhbWV0ZXJzKSB7XG4gIGxldCBlbmRwb2ludCA9IHJlcXVlc3QuZW5kcG9pbnQubWVyZ2UoXG4gICAgcm91dGUsXG4gICAgcGFyYW1ldGVyc1xuICApO1xuICBpZiAoL1xcL2xvZ2luXFwvKG9hdXRoXFwvYWNjZXNzX3Rva2VufGRldmljZVxcL2NvZGUpJC8udGVzdChlbmRwb2ludC51cmwpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QoZW5kcG9pbnQpO1xuICB9XG4gIGNvbnN0IHsgdG9rZW4gfSA9IGF3YWl0IGdldE9BdXRoQWNjZXNzVG9rZW4oc3RhdGUsIHtcbiAgICByZXF1ZXN0LFxuICAgIGF1dGg6IHsgdHlwZTogXCJvYXV0aFwiIH1cbiAgfSk7XG4gIGVuZHBvaW50LmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IGB0b2tlbiAke3Rva2VufWA7XG4gIHJldHVybiByZXF1ZXN0KGVuZHBvaW50KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3ZlcnNpb24uanNcbnZhciBWRVJTSU9OID0gXCIwLjAuMC1kZXZlbG9wbWVudFwiO1xuXG4vLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbmZ1bmN0aW9uIGNyZWF0ZU9BdXRoRGV2aWNlQXV0aChvcHRpb25zKSB7XG4gIGNvbnN0IHJlcXVlc3RXaXRoRGVmYXVsdHMgPSBvcHRpb25zLnJlcXVlc3QgfHwgb2N0b2tpdFJlcXVlc3QuZGVmYXVsdHMoe1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwidXNlci1hZ2VudFwiOiBgb2N0b2tpdC1hdXRoLW9hdXRoLWRldmljZS5qcy8ke1ZFUlNJT059ICR7Z2V0VXNlckFnZW50KCl9YFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHsgcmVxdWVzdCA9IHJlcXVlc3RXaXRoRGVmYXVsdHMsIC4uLm90aGVyT3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgY29uc3Qgc3RhdGUgPSBvcHRpb25zLmNsaWVudFR5cGUgPT09IFwiZ2l0aHViLWFwcFwiID8ge1xuICAgIC4uLm90aGVyT3B0aW9ucyxcbiAgICBjbGllbnRUeXBlOiBcImdpdGh1Yi1hcHBcIixcbiAgICByZXF1ZXN0XG4gIH0gOiB7XG4gICAgLi4ub3RoZXJPcHRpb25zLFxuICAgIGNsaWVudFR5cGU6IFwib2F1dGgtYXBwXCIsXG4gICAgcmVxdWVzdCxcbiAgICBzY29wZXM6IG9wdGlvbnMuc2NvcGVzIHx8IFtdXG4gIH07XG4gIGlmICghb3B0aW9ucy5jbGllbnRJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdbQG9jdG9raXQvYXV0aC1vYXV0aC1kZXZpY2VdIFwiY2xpZW50SWRcIiBvcHRpb24gbXVzdCBiZSBzZXQgKGh0dHBzOi8vZ2l0aHViLmNvbS9vY3Rva2l0L2F1dGgtb2F1dGgtZGV2aWNlLmpzI3VzYWdlKSdcbiAgICApO1xuICB9XG4gIGlmICghb3B0aW9ucy5vblZlcmlmaWNhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdbQG9jdG9raXQvYXV0aC1vYXV0aC1kZXZpY2VdIFwib25WZXJpZmljYXRpb25cIiBvcHRpb24gbXVzdCBiZSBhIGZ1bmN0aW9uIChodHRwczovL2dpdGh1Yi5jb20vb2N0b2tpdC9hdXRoLW9hdXRoLWRldmljZS5qcyN1c2FnZSknXG4gICAgKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihhdXRoLmJpbmQobnVsbCwgc3RhdGUpLCB7XG4gICAgaG9vazogaG9vay5iaW5kKG51bGwsIHN0YXRlKVxuICB9KTtcbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZU9BdXRoRGV2aWNlQXV0aFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-oauth-device/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOAuthUserAuth: () => (/* binding */ createOAuthUserAuth),\n/* harmony export */   requiresBasicAuth: () => (/* binding */ requiresBasicAuth)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_auth_oauth_device__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/auth-oauth-device */ \"(ssr)/./node_modules/@octokit/auth-oauth-device/dist-bundle/index.js\");\n/* harmony import */ var _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/oauth-methods */ \"(ssr)/./node_modules/@octokit/oauth-methods/dist-bundle/index.js\");\n// pkg/dist-src/index.js\n\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/get-authentication.js\n\n\nasync function getAuthentication(state) {\n  if (\"code\" in state.strategyOptions) {\n    const { authentication } = await (0,_octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.exchangeWebFlowCode)({\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      onTokenCreated: state.onTokenCreated,\n      ...state.strategyOptions,\n      request: state.request\n    });\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      ...authentication\n    };\n  }\n  if (\"onVerification\" in state.strategyOptions) {\n    const deviceAuth = (0,_octokit_auth_oauth_device__WEBPACK_IMPORTED_MODULE_2__.createOAuthDeviceAuth)({\n      clientType: state.clientType,\n      clientId: state.clientId,\n      onTokenCreated: state.onTokenCreated,\n      ...state.strategyOptions,\n      request: state.request\n    });\n    const authentication = await deviceAuth({\n      type: \"oauth\"\n    });\n    return {\n      clientSecret: state.clientSecret,\n      ...authentication\n    };\n  }\n  if (\"token\" in state.strategyOptions) {\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      onTokenCreated: state.onTokenCreated,\n      ...state.strategyOptions\n    };\n  }\n  throw new Error(\"[@octokit/auth-oauth-user] Invalid strategy options\");\n}\n\n// pkg/dist-src/auth.js\n\nasync function auth(state, options = {}) {\n  if (!state.authentication) {\n    state.authentication = state.clientType === \"oauth-app\" ? await getAuthentication(state) : await getAuthentication(state);\n  }\n  if (state.authentication.invalid) {\n    throw new Error(\"[@octokit/auth-oauth-user] Token is invalid\");\n  }\n  const currentAuthentication = state.authentication;\n  if (\"expiresAt\" in currentAuthentication) {\n    if (options.type === \"refresh\" || new Date(currentAuthentication.expiresAt) < /* @__PURE__ */ new Date()) {\n      const { authentication } = await (0,_octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.refreshToken)({\n        clientType: \"github-app\",\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        refreshToken: currentAuthentication.refreshToken,\n        request: state.request\n      });\n      state.authentication = {\n        tokenType: \"oauth\",\n        type: \"token\",\n        ...authentication\n      };\n    }\n  }\n  if (options.type === \"refresh\") {\n    if (state.clientType === \"oauth-app\") {\n      throw new Error(\n        \"[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens\"\n      );\n    }\n    if (!currentAuthentication.hasOwnProperty(\"expiresAt\")) {\n      throw new Error(\"[@octokit/auth-oauth-user] Refresh token missing\");\n    }\n    await state.onTokenCreated?.(state.authentication, {\n      type: options.type\n    });\n  }\n  if (options.type === \"check\" || options.type === \"reset\") {\n    const method = options.type === \"check\" ? _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.checkToken : _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.resetToken;\n    try {\n      const { authentication } = await method({\n        // @ts-expect-error making TS happy would require unnecessary code so no\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: state.authentication.token,\n        request: state.request\n      });\n      state.authentication = {\n        tokenType: \"oauth\",\n        type: \"token\",\n        // @ts-expect-error TBD\n        ...authentication\n      };\n      if (options.type === \"reset\") {\n        await state.onTokenCreated?.(state.authentication, {\n          type: options.type\n        });\n      }\n      return state.authentication;\n    } catch (error) {\n      if (error.status === 404) {\n        error.message = \"[@octokit/auth-oauth-user] Token is invalid\";\n        state.authentication.invalid = true;\n      }\n      throw error;\n    }\n  }\n  if (options.type === \"delete\" || options.type === \"deleteAuthorization\") {\n    const method = options.type === \"delete\" ? _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.deleteToken : _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_1__.deleteAuthorization;\n    try {\n      await method({\n        // @ts-expect-error making TS happy would require unnecessary code so no\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: state.authentication.token,\n        request: state.request\n      });\n    } catch (error) {\n      if (error.status !== 404)\n        throw error;\n    }\n    state.authentication.invalid = true;\n    return state.authentication;\n  }\n  return state.authentication;\n}\n\n// pkg/dist-src/requires-basic-auth.js\nvar ROUTES_REQUIRING_BASIC_AUTH = /\\/applications\\/[^/]+\\/(token|grant)s?/;\nfunction requiresBasicAuth(url) {\n  return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);\n}\n\n// pkg/dist-src/hook.js\nasync function hook(state, request, route, parameters = {}) {\n  const endpoint = request.endpoint.merge(\n    route,\n    parameters\n  );\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n  if (requiresBasicAuth(endpoint.url)) {\n    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n    endpoint.headers.authorization = `basic ${credentials}`;\n    return request(endpoint);\n  }\n  const { token } = state.clientType === \"oauth-app\" ? await auth({ ...state, request }) : await auth({ ...state, request });\n  endpoint.headers.authorization = \"token \" + token;\n  return request(endpoint);\n}\n\n// pkg/dist-src/index.js\nfunction createOAuthUserAuth({\n  clientId,\n  clientSecret,\n  clientType = \"oauth-app\",\n  request = _octokit_request__WEBPACK_IMPORTED_MODULE_3__.request.defaults({\n    headers: {\n      \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n    }\n  }),\n  onTokenCreated,\n  ...strategyOptions\n}) {\n  const state = Object.assign({\n    clientType,\n    clientId,\n    clientSecret,\n    onTokenCreated,\n    strategyOptions,\n    request\n  });\n  return Object.assign(auth.bind(null, state), {\n    // @ts-expect-error not worth the extra code needed to appease TS\n    hook: hook.bind(null, state)\n  });\n}\ncreateOAuthUserAuth.VERSION = VERSION;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-token/dist-bundle/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@octokit/auth-token/dist-bundle/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTokenAuth: () => (/* binding */ createTokenAuth)\n/* harmony export */ });\n// pkg/dist-src/auth.js\nvar REGEX_IS_INSTALLATION_LEGACY = /^v1\\./;\nvar REGEX_IS_INSTALLATION = /^ghs_/;\nvar REGEX_IS_USER_TO_SERVER = /^ghu_/;\nasync function auth(token) {\n  const isApp = token.split(/\\./).length === 3;\n  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);\n  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);\n  const tokenType = isApp ? \"app\" : isInstallation ? \"installation\" : isUserToServer ? \"user-to-server\" : \"oauth\";\n  return {\n    type: \"token\",\n    token,\n    tokenType\n  };\n}\n\n// pkg/dist-src/with-authorization-prefix.js\nfunction withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n  return `token ${token}`;\n}\n\n// pkg/dist-src/hook.js\nasync function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(\n    route,\n    parameters\n  );\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n  return request(endpoint);\n}\n\n// pkg/dist-src/index.js\nvar createTokenAuth = function createTokenAuth2(token) {\n  if (!token) {\n    throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n  }\n  if (typeof token !== \"string\") {\n    throw new Error(\n      \"[@octokit/auth-token] Token passed to createTokenAuth is not a string\"\n    );\n  }\n  token = token.replace(/^(token|bearer) +/i, \"\");\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token)\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC10b2tlbi9kaXN0LWJ1bmRsZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCO0FBQ0Esa0JBQWtCLE1BQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC10b2tlbi9kaXN0LWJ1bmRsZS9pbmRleC5qcz9hZTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBrZy9kaXN0LXNyYy9hdXRoLmpzXG52YXIgUkVHRVhfSVNfSU5TVEFMTEFUSU9OX0xFR0FDWSA9IC9edjFcXC4vO1xudmFyIFJFR0VYX0lTX0lOU1RBTExBVElPTiA9IC9eZ2hzXy87XG52YXIgUkVHRVhfSVNfVVNFUl9UT19TRVJWRVIgPSAvXmdodV8vO1xuYXN5bmMgZnVuY3Rpb24gYXV0aCh0b2tlbikge1xuICBjb25zdCBpc0FwcCA9IHRva2VuLnNwbGl0KC9cXC4vKS5sZW5ndGggPT09IDM7XG4gIGNvbnN0IGlzSW5zdGFsbGF0aW9uID0gUkVHRVhfSVNfSU5TVEFMTEFUSU9OX0xFR0FDWS50ZXN0KHRva2VuKSB8fCBSRUdFWF9JU19JTlNUQUxMQVRJT04udGVzdCh0b2tlbik7XG4gIGNvbnN0IGlzVXNlclRvU2VydmVyID0gUkVHRVhfSVNfVVNFUl9UT19TRVJWRVIudGVzdCh0b2tlbik7XG4gIGNvbnN0IHRva2VuVHlwZSA9IGlzQXBwID8gXCJhcHBcIiA6IGlzSW5zdGFsbGF0aW9uID8gXCJpbnN0YWxsYXRpb25cIiA6IGlzVXNlclRvU2VydmVyID8gXCJ1c2VyLXRvLXNlcnZlclwiIDogXCJvYXV0aFwiO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwidG9rZW5cIixcbiAgICB0b2tlbixcbiAgICB0b2tlblR5cGVcbiAgfTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3dpdGgtYXV0aG9yaXphdGlvbi1wcmVmaXguanNcbmZ1bmN0aW9uIHdpdGhBdXRob3JpemF0aW9uUHJlZml4KHRva2VuKSB7XG4gIGlmICh0b2tlbi5zcGxpdCgvXFwuLykubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGBiZWFyZXIgJHt0b2tlbn1gO1xuICB9XG4gIHJldHVybiBgdG9rZW4gJHt0b2tlbn1gO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvaG9vay5qc1xuYXN5bmMgZnVuY3Rpb24gaG9vayh0b2tlbiwgcmVxdWVzdCwgcm91dGUsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgZW5kcG9pbnQgPSByZXF1ZXN0LmVuZHBvaW50Lm1lcmdlKFxuICAgIHJvdXRlLFxuICAgIHBhcmFtZXRlcnNcbiAgKTtcbiAgZW5kcG9pbnQuaGVhZGVycy5hdXRob3JpemF0aW9uID0gd2l0aEF1dGhvcml6YXRpb25QcmVmaXgodG9rZW4pO1xuICByZXR1cm4gcmVxdWVzdChlbmRwb2ludCk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xudmFyIGNyZWF0ZVRva2VuQXV0aCA9IGZ1bmN0aW9uIGNyZWF0ZVRva2VuQXV0aDIodG9rZW4pIHtcbiAgaWYgKCF0b2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIltAb2N0b2tpdC9hdXRoLXRva2VuXSBObyB0b2tlbiBwYXNzZWQgdG8gY3JlYXRlVG9rZW5BdXRoXCIpO1xuICB9XG4gIGlmICh0eXBlb2YgdG9rZW4gIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIltAb2N0b2tpdC9hdXRoLXRva2VuXSBUb2tlbiBwYXNzZWQgdG8gY3JlYXRlVG9rZW5BdXRoIGlzIG5vdCBhIHN0cmluZ1wiXG4gICAgKTtcbiAgfVxuICB0b2tlbiA9IHRva2VuLnJlcGxhY2UoL14odG9rZW58YmVhcmVyKSArL2ksIFwiXCIpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihhdXRoLmJpbmQobnVsbCwgdG9rZW4pLCB7XG4gICAgaG9vazogaG9vay5iaW5kKG51bGwsIHRva2VuKVxuICB9KTtcbn07XG5leHBvcnQge1xuICBjcmVhdGVUb2tlbkF1dGhcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-token/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/auth-unauthenticated/dist-node/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@octokit/auth-unauthenticated/dist-node/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUnauthenticatedAuth: () => (/* binding */ createUnauthenticatedAuth)\n/* harmony export */ });\n// pkg/dist-src/auth.js\nasync function auth(reason) {\n  return {\n    type: \"unauthenticated\",\n    reason\n  };\n}\n\n// pkg/dist-src/is-rate-limit-error.js\n\nfunction isRateLimitError(error) {\n  if (error.status !== 403) {\n    return false;\n  }\n  if (!error.response) {\n    return false;\n  }\n  return error.response.headers[\"x-ratelimit-remaining\"] === \"0\";\n}\n\n// pkg/dist-src/is-abuse-limit-error.js\n\nvar REGEX_ABUSE_LIMIT_MESSAGE = /\\babuse\\b/i;\nfunction isAbuseLimitError(error) {\n  if (error.status !== 403) {\n    return false;\n  }\n  return REGEX_ABUSE_LIMIT_MESSAGE.test(error.message);\n}\n\n// pkg/dist-src/hook.js\nasync function hook(reason, request, route, parameters) {\n  const endpoint = request.endpoint.merge(\n    route,\n    parameters\n  );\n  return request(endpoint).catch((error) => {\n    if (error.status === 404) {\n      error.message = `Not found. May be due to lack of authentication. Reason: ${reason}`;\n      throw error;\n    }\n    if (isRateLimitError(error)) {\n      error.message = `API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${reason}`;\n      throw error;\n    }\n    if (isAbuseLimitError(error)) {\n      error.message = `You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${reason}`;\n      throw error;\n    }\n    if (error.status === 401) {\n      error.message = `Unauthorized. \"${endpoint.method} ${endpoint.url}\" failed most likely due to lack of authentication. Reason: ${reason}`;\n      throw error;\n    }\n    if (error.status >= 400 && error.status < 500) {\n      error.message = error.message.replace(\n        /\\.?$/,\n        `. May be caused by lack of authentication (${reason}).`\n      );\n    }\n    throw error;\n  });\n}\n\n// pkg/dist-src/index.js\nvar createUnauthenticatedAuth = function createUnauthenticatedAuth2(options) {\n  if (!options || !options.reason) {\n    throw new Error(\n      \"[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth\"\n    );\n  }\n  return Object.assign(auth.bind(null, options.reason), {\n    hook: hook.bind(null, options.reason)\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC11bmF1dGhlbnRpY2F0ZWQvZGlzdC1ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBLDJHQUEyRyxPQUFPO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBLG1JQUFtSSxPQUFPO0FBQzFJO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxpQkFBaUIsRUFBRSxhQUFhLDhEQUE4RCxPQUFPO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsT0FBTztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC11bmF1dGhlbnRpY2F0ZWQvZGlzdC1ub2RlL2luZGV4LmpzPzBlY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGtnL2Rpc3Qtc3JjL2F1dGguanNcbmFzeW5jIGZ1bmN0aW9uIGF1dGgocmVhc29uKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJ1bmF1dGhlbnRpY2F0ZWRcIixcbiAgICByZWFzb25cbiAgfTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2lzLXJhdGUtbGltaXQtZXJyb3IuanNcbmltcG9ydCB7IFJlcXVlc3RFcnJvciB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0LWVycm9yXCI7XG5mdW5jdGlvbiBpc1JhdGVMaW1pdEVycm9yKGVycm9yKSB7XG4gIGlmIChlcnJvci5zdGF0dXMgIT09IDQwMykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIWVycm9yLnJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBlcnJvci5yZXNwb25zZS5oZWFkZXJzW1wieC1yYXRlbGltaXQtcmVtYWluaW5nXCJdID09PSBcIjBcIjtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2lzLWFidXNlLWxpbWl0LWVycm9yLmpzXG5pbXBvcnQgeyBSZXF1ZXN0RXJyb3IgYXMgUmVxdWVzdEVycm9yMiB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0LWVycm9yXCI7XG52YXIgUkVHRVhfQUJVU0VfTElNSVRfTUVTU0FHRSA9IC9cXGJhYnVzZVxcYi9pO1xuZnVuY3Rpb24gaXNBYnVzZUxpbWl0RXJyb3IoZXJyb3IpIHtcbiAgaWYgKGVycm9yLnN0YXR1cyAhPT0gNDAzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBSRUdFWF9BQlVTRV9MSU1JVF9NRVNTQUdFLnRlc3QoZXJyb3IubWVzc2FnZSk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9ob29rLmpzXG5hc3luYyBmdW5jdGlvbiBob29rKHJlYXNvbiwgcmVxdWVzdCwgcm91dGUsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgZW5kcG9pbnQgPSByZXF1ZXN0LmVuZHBvaW50Lm1lcmdlKFxuICAgIHJvdXRlLFxuICAgIHBhcmFtZXRlcnNcbiAgKTtcbiAgcmV0dXJuIHJlcXVlc3QoZW5kcG9pbnQpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGBOb3QgZm91bmQuIE1heSBiZSBkdWUgdG8gbGFjayBvZiBhdXRoZW50aWNhdGlvbi4gUmVhc29uOiAke3JlYXNvbn1gO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmIChpc1JhdGVMaW1pdEVycm9yKGVycm9yKSkge1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGBBUEkgcmF0ZSBsaW1pdCBleGNlZWRlZC4gVGhpcyBtYXliZSBjYXVzZWQgYnkgdGhlIGxhY2sgb2YgYXV0aGVudGljYXRpb24uIFJlYXNvbjogJHtyZWFzb259YDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAoaXNBYnVzZUxpbWl0RXJyb3IoZXJyb3IpKSB7XG4gICAgICBlcnJvci5tZXNzYWdlID0gYFlvdSBoYXZlIHRyaWdnZXJlZCBhbiBhYnVzZSBkZXRlY3Rpb24gbWVjaGFuaXNtLiBUaGlzIG1heWJlIGNhdXNlZCBieSB0aGUgbGFjayBvZiBhdXRoZW50aWNhdGlvbi4gUmVhc29uOiAke3JlYXNvbn1gO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGBVbmF1dGhvcml6ZWQuIFwiJHtlbmRwb2ludC5tZXRob2R9ICR7ZW5kcG9pbnQudXJsfVwiIGZhaWxlZCBtb3N0IGxpa2VseSBkdWUgdG8gbGFjayBvZiBhdXRoZW50aWNhdGlvbi4gUmVhc29uOiAke3JlYXNvbn1gO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmIChlcnJvci5zdGF0dXMgPj0gNDAwICYmIGVycm9yLnN0YXR1cyA8IDUwMCkge1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UucmVwbGFjZShcbiAgICAgICAgL1xcLj8kLyxcbiAgICAgICAgYC4gTWF5IGJlIGNhdXNlZCBieSBsYWNrIG9mIGF1dGhlbnRpY2F0aW9uICgke3JlYXNvbn0pLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgY3JlYXRlVW5hdXRoZW50aWNhdGVkQXV0aCA9IGZ1bmN0aW9uIGNyZWF0ZVVuYXV0aGVudGljYXRlZEF1dGgyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJlYXNvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW0BvY3Rva2l0L2F1dGgtdW5hdXRoZW50aWNhdGVkXSBObyByZWFzb24gcGFzc2VkIHRvIGNyZWF0ZVVuYXV0aGVudGljYXRlZEF1dGhcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYXV0aC5iaW5kKG51bGwsIG9wdGlvbnMucmVhc29uKSwge1xuICAgIGhvb2s6IGhvb2suYmluZChudWxsLCBvcHRpb25zLnJlYXNvbilcbiAgfSk7XG59O1xuZXhwb3J0IHtcbiAgY3JlYXRlVW5hdXRoZW50aWNhdGVkQXV0aFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/auth-unauthenticated/dist-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/core/dist-src/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@octokit/core/dist-src/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Octokit: () => (/* binding */ Octokit)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var before_after_hook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! before-after-hook */ \"(ssr)/./node_modules/before-after-hook/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @octokit/graphql */ \"(ssr)/./node_modules/@octokit/graphql/dist-bundle/index.js\");\n/* harmony import */ var _octokit_auth_token__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @octokit/auth-token */ \"(ssr)/./node_modules/@octokit/auth-token/dist-bundle/index.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@octokit/core/dist-src/version.js\");\n\n\n\n\n\n\nconst noop = () => {\n};\nconst consoleWarn = console.warn.bind(console);\nconst consoleError = console.error.bind(console);\nconst userAgentTrail = `octokit-core.js/${_version_js__WEBPACK_IMPORTED_MODULE_2__.VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`;\nclass Octokit {\n  static VERSION = _version_js__WEBPACK_IMPORTED_MODULE_2__.VERSION;\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor(...args) {\n        const options = args[0] || {};\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n        super(\n          Object.assign(\n            {},\n            defaults,\n            options,\n            options.userAgent && defaults.userAgent ? {\n              userAgent: `${options.userAgent} ${defaults.userAgent}`\n            } : null\n          )\n        );\n      }\n    };\n    return OctokitWithDefaults;\n  }\n  static plugins = [];\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n  static plugin(...newPlugins) {\n    const currentPlugins = this.plugins;\n    const NewOctokit = class extends this {\n      static plugins = currentPlugins.concat(\n        newPlugins.filter((plugin) => !currentPlugins.includes(plugin))\n      );\n    };\n    return NewOctokit;\n  }\n  constructor(options = {}) {\n    const hook = new before_after_hook__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Collection();\n    const requestDefaults = {\n      baseUrl: _octokit_request__WEBPACK_IMPORTED_MODULE_3__.request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    };\n    requestDefaults.headers[\"user-agent\"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n    this.request = _octokit_request__WEBPACK_IMPORTED_MODULE_3__.request.defaults(requestDefaults);\n    this.graphql = (0,_octokit_graphql__WEBPACK_IMPORTED_MODULE_4__.withCustomRequest)(this.request).defaults(requestDefaults);\n    this.log = Object.assign(\n      {\n        debug: noop,\n        info: noop,\n        warn: consoleWarn,\n        error: consoleError\n      },\n      options.log\n    );\n    this.hook = hook;\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        const auth = (0,_octokit_auth_token__WEBPACK_IMPORTED_MODULE_5__.createTokenAuth)(options.auth);\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const { authStrategy, ...otherOptions } = options;\n      const auth = authStrategy(\n        Object.assign(\n          {\n            request: this.request,\n            log: this.log,\n            // we pass the current octokit instance as well as its constructor options\n            // to allow for authentication strategies that return a new octokit instance\n            // that shares the same internal state as the current one. The original\n            // requirement for this was the \"event-octokit\" authentication strategy\n            // of https://github.com/probot/octokit-auth-probot.\n            octokit: this,\n            octokitOptions: otherOptions\n          },\n          options.auth\n        )\n      );\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    }\n    const classConstructor = this.constructor;\n    for (let i = 0; i < classConstructor.plugins.length; ++i) {\n      Object.assign(this, classConstructor.plugins[i](this, options));\n    }\n  }\n  // assigned during constructor\n  request;\n  graphql;\n  log;\n  hook;\n  // TODO: type `octokit.auth` based on passed options.authStrategy\n  auth;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvY29yZS9kaXN0LXNyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQW9EO0FBQ2Y7QUFDTTtBQUNVO0FBQ0M7QUFDZjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxnREFBTyxFQUFFLEVBQUUsa0VBQVksR0FBRztBQUNwRTtBQUNBLG1CQUFtQixnREFBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CLEVBQUUsbUJBQW1CO0FBQ3BFLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixxQkFBcUIseURBQUk7QUFDekI7QUFDQSxlQUFlLHFEQUFPO0FBQ3RCLGlCQUFpQjtBQUNqQiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLG1CQUFtQixFQUFFLGVBQWU7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFPO0FBQzFCLG1CQUFtQixtRUFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUixxQkFBcUIsb0VBQWU7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGNBQWMsZ0NBQWdDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQ0FBcUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L2NvcmUvZGlzdC1zcmMvaW5kZXguanM/ODllMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRVc2VyQWdlbnQgfSBmcm9tIFwidW5pdmVyc2FsLXVzZXItYWdlbnRcIjtcbmltcG9ydCBIb29rIGZyb20gXCJiZWZvcmUtYWZ0ZXItaG9va1wiO1xuaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0XCI7XG5pbXBvcnQgeyB3aXRoQ3VzdG9tUmVxdWVzdCB9IGZyb20gXCJAb2N0b2tpdC9ncmFwaHFsXCI7XG5pbXBvcnQgeyBjcmVhdGVUb2tlbkF1dGggfSBmcm9tIFwiQG9jdG9raXQvYXV0aC10b2tlblwiO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbmNvbnN0IG5vb3AgPSAoKSA9PiB7XG59O1xuY29uc3QgY29uc29sZVdhcm4gPSBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbmNvbnN0IGNvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbmNvbnN0IHVzZXJBZ2VudFRyYWlsID0gYG9jdG9raXQtY29yZS5qcy8ke1ZFUlNJT059ICR7Z2V0VXNlckFnZW50KCl9YDtcbmNsYXNzIE9jdG9raXQge1xuICBzdGF0aWMgVkVSU0lPTiA9IFZFUlNJT047XG4gIHN0YXRpYyBkZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGNvbnN0IE9jdG9raXRXaXRoRGVmYXVsdHMgPSBjbGFzcyBleHRlbmRzIHRoaXMge1xuICAgICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYXJnc1swXSB8fCB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWZhdWx0cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgc3VwZXIoZGVmYXVsdHMob3B0aW9ucykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihcbiAgICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBkZWZhdWx0cyxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zLnVzZXJBZ2VudCAmJiBkZWZhdWx0cy51c2VyQWdlbnQgPyB7XG4gICAgICAgICAgICAgIHVzZXJBZ2VudDogYCR7b3B0aW9ucy51c2VyQWdlbnR9ICR7ZGVmYXVsdHMudXNlckFnZW50fWBcbiAgICAgICAgICAgIH0gOiBudWxsXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9jdG9raXRXaXRoRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIHBsdWdpbnMgPSBbXTtcbiAgLyoqXG4gICAqIEF0dGFjaCBhIHBsdWdpbiAob3IgbWFueSkgdG8geW91ciBPY3Rva2l0IGluc3RhbmNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBBUEkgPSBPY3Rva2l0LnBsdWdpbihwbHVnaW4xLCBwbHVnaW4yLCBwbHVnaW4zLCAuLi4pXG4gICAqL1xuICBzdGF0aWMgcGx1Z2luKC4uLm5ld1BsdWdpbnMpIHtcbiAgICBjb25zdCBjdXJyZW50UGx1Z2lucyA9IHRoaXMucGx1Z2lucztcbiAgICBjb25zdCBOZXdPY3Rva2l0ID0gY2xhc3MgZXh0ZW5kcyB0aGlzIHtcbiAgICAgIHN0YXRpYyBwbHVnaW5zID0gY3VycmVudFBsdWdpbnMuY29uY2F0KFxuICAgICAgICBuZXdQbHVnaW5zLmZpbHRlcigocGx1Z2luKSA9PiAhY3VycmVudFBsdWdpbnMuaW5jbHVkZXMocGx1Z2luKSlcbiAgICAgICk7XG4gICAgfTtcbiAgICByZXR1cm4gTmV3T2N0b2tpdDtcbiAgfVxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBob29rID0gbmV3IEhvb2suQ29sbGVjdGlvbigpO1xuICAgIGNvbnN0IHJlcXVlc3REZWZhdWx0cyA9IHtcbiAgICAgIGJhc2VVcmw6IHJlcXVlc3QuZW5kcG9pbnQuREVGQVVMVFMuYmFzZVVybCxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgcmVxdWVzdDogT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5yZXF1ZXN0LCB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgdXNhZ2Ugb25seSwgbm8gbmVlZCB0byB0eXBlXG4gICAgICAgIGhvb2s6IGhvb2suYmluZChudWxsLCBcInJlcXVlc3RcIilcbiAgICAgIH0pLFxuICAgICAgbWVkaWFUeXBlOiB7XG4gICAgICAgIHByZXZpZXdzOiBbXSxcbiAgICAgICAgZm9ybWF0OiBcIlwiXG4gICAgICB9XG4gICAgfTtcbiAgICByZXF1ZXN0RGVmYXVsdHMuaGVhZGVyc1tcInVzZXItYWdlbnRcIl0gPSBvcHRpb25zLnVzZXJBZ2VudCA/IGAke29wdGlvbnMudXNlckFnZW50fSAke3VzZXJBZ2VudFRyYWlsfWAgOiB1c2VyQWdlbnRUcmFpbDtcbiAgICBpZiAob3B0aW9ucy5iYXNlVXJsKSB7XG4gICAgICByZXF1ZXN0RGVmYXVsdHMuYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucHJldmlld3MpIHtcbiAgICAgIHJlcXVlc3REZWZhdWx0cy5tZWRpYVR5cGUucHJldmlld3MgPSBvcHRpb25zLnByZXZpZXdzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50aW1lWm9uZSkge1xuICAgICAgcmVxdWVzdERlZmF1bHRzLmhlYWRlcnNbXCJ0aW1lLXpvbmVcIl0gPSBvcHRpb25zLnRpbWVab25lO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0LmRlZmF1bHRzKHJlcXVlc3REZWZhdWx0cyk7XG4gICAgdGhpcy5ncmFwaHFsID0gd2l0aEN1c3RvbVJlcXVlc3QodGhpcy5yZXF1ZXN0KS5kZWZhdWx0cyhyZXF1ZXN0RGVmYXVsdHMpO1xuICAgIHRoaXMubG9nID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgZGVidWc6IG5vb3AsXG4gICAgICAgIGluZm86IG5vb3AsXG4gICAgICAgIHdhcm46IGNvbnNvbGVXYXJuLFxuICAgICAgICBlcnJvcjogY29uc29sZUVycm9yXG4gICAgICB9LFxuICAgICAgb3B0aW9ucy5sb2dcbiAgICApO1xuICAgIHRoaXMuaG9vayA9IGhvb2s7XG4gICAgaWYgKCFvcHRpb25zLmF1dGhTdHJhdGVneSkge1xuICAgICAgaWYgKCFvcHRpb25zLmF1dGgpIHtcbiAgICAgICAgdGhpcy5hdXRoID0gYXN5bmMgKCkgPT4gKHtcbiAgICAgICAgICB0eXBlOiBcInVuYXV0aGVudGljYXRlZFwiXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYXV0aCA9IGNyZWF0ZVRva2VuQXV0aChvcHRpb25zLmF1dGgpO1xuICAgICAgICBob29rLndyYXAoXCJyZXF1ZXN0XCIsIGF1dGguaG9vayk7XG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYXV0aFN0cmF0ZWd5LCAuLi5vdGhlck9wdGlvbnMgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCBhdXRoID0gYXV0aFN0cmF0ZWd5KFxuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHRoaXMucmVxdWVzdCxcbiAgICAgICAgICAgIGxvZzogdGhpcy5sb2csXG4gICAgICAgICAgICAvLyB3ZSBwYXNzIHRoZSBjdXJyZW50IG9jdG9raXQgaW5zdGFuY2UgYXMgd2VsbCBhcyBpdHMgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgICAgICAgICAgLy8gdG8gYWxsb3cgZm9yIGF1dGhlbnRpY2F0aW9uIHN0cmF0ZWdpZXMgdGhhdCByZXR1cm4gYSBuZXcgb2N0b2tpdCBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gdGhhdCBzaGFyZXMgdGhlIHNhbWUgaW50ZXJuYWwgc3RhdGUgYXMgdGhlIGN1cnJlbnQgb25lLiBUaGUgb3JpZ2luYWxcbiAgICAgICAgICAgIC8vIHJlcXVpcmVtZW50IGZvciB0aGlzIHdhcyB0aGUgXCJldmVudC1vY3Rva2l0XCIgYXV0aGVudGljYXRpb24gc3RyYXRlZ3lcbiAgICAgICAgICAgIC8vIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9ib3Qvb2N0b2tpdC1hdXRoLXByb2JvdC5cbiAgICAgICAgICAgIG9jdG9raXQ6IHRoaXMsXG4gICAgICAgICAgICBvY3Rva2l0T3B0aW9uczogb3RoZXJPcHRpb25zXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zLmF1dGhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGhvb2sud3JhcChcInJlcXVlc3RcIiwgYXV0aC5ob29rKTtcbiAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzQ29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3NDb25zdHJ1Y3Rvci5wbHVnaW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNsYXNzQ29uc3RydWN0b3IucGx1Z2luc1tpXSh0aGlzLCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG4gIC8vIGFzc2lnbmVkIGR1cmluZyBjb25zdHJ1Y3RvclxuICByZXF1ZXN0O1xuICBncmFwaHFsO1xuICBsb2c7XG4gIGhvb2s7XG4gIC8vIFRPRE86IHR5cGUgYG9jdG9raXQuYXV0aGAgYmFzZWQgb24gcGFzc2VkIG9wdGlvbnMuYXV0aFN0cmF0ZWd5XG4gIGF1dGg7XG59XG5leHBvcnQge1xuICBPY3Rva2l0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/core/dist-src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/core/dist-src/version.js":
/*!********************************************************!*\
  !*** ./node_modules/@octokit/core/dist-src/version.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"6.1.2\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvY29yZS9kaXN0LXNyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L2NvcmUvZGlzdC1zcmMvdmVyc2lvbi5qcz8yMTQwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZFUlNJT04gPSBcIjYuMS4yXCI7XG5leHBvcnQge1xuICBWRVJTSU9OXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/core/dist-src/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/endpoint/dist-bundle/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@octokit/endpoint/dist-bundle/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   endpoint: () => (/* binding */ endpoint)\n/* harmony export */ });\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n// pkg/dist-src/defaults.js\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/defaults.js\nvar userAgent = `octokit-endpoint.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`;\nvar DEFAULTS = {\n  method: \"GET\",\n  baseUrl: \"https://api.github.com\",\n  headers: {\n    accept: \"application/vnd.github.v3+json\",\n    \"user-agent\": userAgent\n  },\n  mediaType: {\n    format: \"\"\n  }\n};\n\n// pkg/dist-src/util/lowercase-keys.js\nfunction lowercaseKeys(object) {\n  if (!object) {\n    return {};\n  }\n  return Object.keys(object).reduce((newObj, key) => {\n    newObj[key.toLowerCase()] = object[key];\n    return newObj;\n  }, {});\n}\n\n// pkg/dist-src/util/is-plain-object.js\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null)\n    return false;\n  if (Object.prototype.toString.call(value) !== \"[object Object]\")\n    return false;\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null)\n    return true;\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n\n// pkg/dist-src/util/merge-deep.js\nfunction mergeDeep(defaults, options) {\n  const result = Object.assign({}, defaults);\n  Object.keys(options).forEach((key) => {\n    if (isPlainObject(options[key])) {\n      if (!(key in defaults))\n        Object.assign(result, { [key]: options[key] });\n      else\n        result[key] = mergeDeep(defaults[key], options[key]);\n    } else {\n      Object.assign(result, { [key]: options[key] });\n    }\n  });\n  return result;\n}\n\n// pkg/dist-src/util/remove-undefined-properties.js\nfunction removeUndefinedProperties(obj) {\n  for (const key in obj) {\n    if (obj[key] === void 0) {\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n\n// pkg/dist-src/merge.js\nfunction merge(defaults, route, options) {\n  if (typeof route === \"string\") {\n    let [method, url] = route.split(\" \");\n    options = Object.assign(url ? { method, url } : { url: method }, options);\n  } else {\n    options = Object.assign({}, route);\n  }\n  options.headers = lowercaseKeys(options.headers);\n  removeUndefinedProperties(options);\n  removeUndefinedProperties(options.headers);\n  const mergedOptions = mergeDeep(defaults || {}, options);\n  if (options.url === \"/graphql\") {\n    if (defaults && defaults.mediaType.previews?.length) {\n      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(\n        (preview) => !mergedOptions.mediaType.previews.includes(preview)\n      ).concat(mergedOptions.mediaType.previews);\n    }\n    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, \"\"));\n  }\n  return mergedOptions;\n}\n\n// pkg/dist-src/util/add-query-parameters.js\nfunction addQueryParameters(url, parameters) {\n  const separator = /\\?/.test(url) ? \"&\" : \"?\";\n  const names = Object.keys(parameters);\n  if (names.length === 0) {\n    return url;\n  }\n  return url + separator + names.map((name) => {\n    if (name === \"q\") {\n      return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n    }\n    return `${name}=${encodeURIComponent(parameters[name])}`;\n  }).join(\"&\");\n}\n\n// pkg/dist-src/util/extract-url-variable-names.js\nvar urlVariableRegex = /\\{[^}]+\\}/g;\nfunction removeNonChars(variableName) {\n  return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\nfunction extractUrlVariableNames(url) {\n  const matches = url.match(urlVariableRegex);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n\n// pkg/dist-src/util/omit.js\nfunction omit(object, keysToOmit) {\n  const result = { __proto__: null };\n  for (const key of Object.keys(object)) {\n    if (keysToOmit.indexOf(key) === -1) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\n\n// pkg/dist-src/util/url-template.js\nfunction encodeReserved(str) {\n  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {\n    if (!/%[0-9A-Fa-f]/.test(part)) {\n      part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n    }\n    return part;\n  }).join(\"\");\n}\nfunction encodeUnreserved(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\nfunction encodeValue(operator, value, key) {\n  value = operator === \"+\" || operator === \"#\" ? encodeReserved(value) : encodeUnreserved(value);\n  if (key) {\n    return encodeUnreserved(key) + \"=\" + value;\n  } else {\n    return value;\n  }\n}\nfunction isDefined(value) {\n  return value !== void 0 && value !== null;\n}\nfunction isKeyOperator(operator) {\n  return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\nfunction getValues(context, operator, key, modifier) {\n  var value = context[key], result = [];\n  if (isDefined(value) && value !== \"\") {\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n      value = value.toString();\n      if (modifier && modifier !== \"*\") {\n        value = value.substring(0, parseInt(modifier, 10));\n      }\n      result.push(\n        encodeValue(operator, value, isKeyOperator(operator) ? key : \"\")\n      );\n    } else {\n      if (modifier === \"*\") {\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function(value2) {\n            result.push(\n              encodeValue(operator, value2, isKeyOperator(operator) ? key : \"\")\n            );\n          });\n        } else {\n          Object.keys(value).forEach(function(k) {\n            if (isDefined(value[k])) {\n              result.push(encodeValue(operator, value[k], k));\n            }\n          });\n        }\n      } else {\n        const tmp = [];\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function(value2) {\n            tmp.push(encodeValue(operator, value2));\n          });\n        } else {\n          Object.keys(value).forEach(function(k) {\n            if (isDefined(value[k])) {\n              tmp.push(encodeUnreserved(k));\n              tmp.push(encodeValue(operator, value[k].toString()));\n            }\n          });\n        }\n        if (isKeyOperator(operator)) {\n          result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n        } else if (tmp.length !== 0) {\n          result.push(tmp.join(\",\"));\n        }\n      }\n    }\n  } else {\n    if (operator === \";\") {\n      if (isDefined(value)) {\n        result.push(encodeUnreserved(key));\n      }\n    } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n      result.push(encodeUnreserved(key) + \"=\");\n    } else if (value === \"\") {\n      result.push(\"\");\n    }\n  }\n  return result;\n}\nfunction parseUrl(template) {\n  return {\n    expand: expand.bind(null, template)\n  };\n}\nfunction expand(template, context) {\n  var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n  template = template.replace(\n    /\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g,\n    function(_, expression, literal) {\n      if (expression) {\n        let operator = \"\";\n        const values = [];\n        if (operators.indexOf(expression.charAt(0)) !== -1) {\n          operator = expression.charAt(0);\n          expression = expression.substr(1);\n        }\n        expression.split(/,/g).forEach(function(variable) {\n          var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n        });\n        if (operator && operator !== \"+\") {\n          var separator = \",\";\n          if (operator === \"?\") {\n            separator = \"&\";\n          } else if (operator !== \"#\") {\n            separator = operator;\n          }\n          return (values.length !== 0 ? operator : \"\") + values.join(separator);\n        } else {\n          return values.join(\",\");\n        }\n      } else {\n        return encodeReserved(literal);\n      }\n    }\n  );\n  if (template === \"/\") {\n    return template;\n  } else {\n    return template.replace(/\\/$/, \"\");\n  }\n}\n\n// pkg/dist-src/parse.js\nfunction parse(options) {\n  let method = options.method.toUpperCase();\n  let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n  let headers = Object.assign({}, options.headers);\n  let body;\n  let parameters = omit(options, [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"mediaType\"\n  ]);\n  const urlVariableNames = extractUrlVariableNames(url);\n  url = parseUrl(url).expand(parameters);\n  if (!/^http/.test(url)) {\n    url = options.baseUrl + url;\n  }\n  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat(\"baseUrl\");\n  const remainingParameters = omit(parameters, omittedParameters);\n  const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n  if (!isBinaryRequest) {\n    if (options.mediaType.format) {\n      headers.accept = headers.accept.split(/,/).map(\n        (format) => format.replace(\n          /application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/,\n          `application/vnd$1$2.${options.mediaType.format}`\n        )\n      ).join(\",\");\n    }\n    if (url.endsWith(\"/graphql\")) {\n      if (options.mediaType.previews?.length) {\n        const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {\n          const format = options.mediaType.format ? `.${options.mediaType.format}` : \"+json\";\n          return `application/vnd.github.${preview}-preview${format}`;\n        }).join(\",\");\n      }\n    }\n  }\n  if ([\"GET\", \"HEAD\"].includes(method)) {\n    url = addQueryParameters(url, remainingParameters);\n  } else {\n    if (\"data\" in remainingParameters) {\n      body = remainingParameters.data;\n    } else {\n      if (Object.keys(remainingParameters).length) {\n        body = remainingParameters;\n      }\n    }\n  }\n  if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n    headers[\"content-type\"] = \"application/json; charset=utf-8\";\n  }\n  if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n    body = \"\";\n  }\n  return Object.assign(\n    { method, url, headers },\n    typeof body !== \"undefined\" ? { body } : null,\n    options.request ? { request: options.request } : null\n  );\n}\n\n// pkg/dist-src/endpoint-with-defaults.js\nfunction endpointWithDefaults(defaults, route, options) {\n  return parse(merge(defaults, route, options));\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldDefaults, newDefaults) {\n  const DEFAULTS2 = merge(oldDefaults, newDefaults);\n  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);\n  return Object.assign(endpoint2, {\n    DEFAULTS: DEFAULTS2,\n    defaults: withDefaults.bind(null, DEFAULTS2),\n    merge: merge.bind(null, DEFAULTS2),\n    parse\n  });\n}\n\n// pkg/dist-src/index.js\nvar endpoint = withDefaults(null, DEFAULTS);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/endpoint/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/graphql/dist-bundle/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@octokit/graphql/dist-bundle/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphqlResponseError: () => (/* binding */ GraphqlResponseError),\n/* harmony export */   graphql: () => (/* binding */ graphql2),\n/* harmony export */   withCustomRequest: () => (/* binding */ withCustomRequest)\n/* harmony export */ });\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n// pkg/dist-src/index.js\n\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/with-defaults.js\n\n\n// pkg/dist-src/graphql.js\n\n\n// pkg/dist-src/error.js\nfunction _buildMessageForResponseErrors(data) {\n  return `Request failed due to following response errors:\n` + data.errors.map((e) => ` - ${e.message}`).join(\"\\n\");\n}\nvar GraphqlResponseError = class extends Error {\n  constructor(request2, headers, response) {\n    super(_buildMessageForResponseErrors(response));\n    this.request = request2;\n    this.headers = headers;\n    this.response = response;\n    this.errors = response.errors;\n    this.data = response.data;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n  name = \"GraphqlResponseError\";\n  errors;\n  data;\n};\n\n// pkg/dist-src/graphql.js\nvar NON_VARIABLE_OPTIONS = [\n  \"method\",\n  \"baseUrl\",\n  \"url\",\n  \"headers\",\n  \"request\",\n  \"query\",\n  \"mediaType\"\n];\nvar FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\nvar GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request2, query, options) {\n  if (options) {\n    if (typeof query === \"string\" && \"query\" in options) {\n      return Promise.reject(\n        new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`)\n      );\n    }\n    for (const key in options) {\n      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))\n        continue;\n      return Promise.reject(\n        new Error(\n          `[@octokit/graphql] \"${key}\" cannot be used as variable name`\n        )\n      );\n    }\n  }\n  const parsedOptions = typeof query === \"string\" ? Object.assign({ query }, options) : query;\n  const requestOptions = Object.keys(\n    parsedOptions\n  ).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n    if (!result.variables) {\n      result.variables = {};\n    }\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {});\n  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n  return request2(requestOptions).then((response) => {\n    if (response.data.errors) {\n      const headers = {};\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n      throw new GraphqlResponseError(\n        requestOptions,\n        headers,\n        response.data\n      );\n    }\n    return response.data.data;\n  });\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(request2, newDefaults) {\n  const newRequest = request2.defaults(newDefaults);\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: newRequest.endpoint\n  });\n}\n\n// pkg/dist-src/index.js\nvar graphql2 = withDefaults(_octokit_request__WEBPACK_IMPORTED_MODULE_1__.request, {\n  headers: {\n    \"user-agent\": `octokit-graphql.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n  },\n  method: \"POST\",\n  url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\"\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvZ3JhcGhxbC9kaXN0LWJ1bmRsZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzJDO0FBQ1M7O0FBRXBEO0FBQ0E7O0FBRUE7QUFDdUQ7O0FBRXZEO0FBQ3NEOztBQUV0RDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsVUFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxJQUFJO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLE9BQU87QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSw0QkFBNEIscURBQU87QUFDbkM7QUFDQSx3Q0FBd0MsU0FBUyxFQUFFLGtFQUFZLEdBQUc7QUFDbEUsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFLRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9ncmFwaHFsL2Rpc3QtYnVuZGxlL2luZGV4LmpzP2JjYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcbmltcG9ydCB7IGdldFVzZXJBZ2VudCB9IGZyb20gXCJ1bml2ZXJzYWwtdXNlci1hZ2VudFwiO1xuXG4vLyBwa2cvZGlzdC1zcmMvdmVyc2lvbi5qc1xudmFyIFZFUlNJT04gPSBcIjAuMC4wLWRldmVsb3BtZW50XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy93aXRoLWRlZmF1bHRzLmpzXG5pbXBvcnQgeyByZXF1ZXN0IGFzIFJlcXVlc3QyIH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2dyYXBocWwuanNcbmltcG9ydCB7IHJlcXVlc3QgYXMgUmVxdWVzdCB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy9lcnJvci5qc1xuZnVuY3Rpb24gX2J1aWxkTWVzc2FnZUZvclJlc3BvbnNlRXJyb3JzKGRhdGEpIHtcbiAgcmV0dXJuIGBSZXF1ZXN0IGZhaWxlZCBkdWUgdG8gZm9sbG93aW5nIHJlc3BvbnNlIGVycm9yczpcbmAgKyBkYXRhLmVycm9ycy5tYXAoKGUpID0+IGAgLSAke2UubWVzc2FnZX1gKS5qb2luKFwiXFxuXCIpO1xufVxudmFyIEdyYXBocWxSZXNwb25zZUVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlcXVlc3QyLCBoZWFkZXJzLCByZXNwb25zZSkge1xuICAgIHN1cGVyKF9idWlsZE1lc3NhZ2VGb3JSZXNwb25zZUVycm9ycyhyZXNwb25zZSkpO1xuICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3QyO1xuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gIH1cbiAgbmFtZSA9IFwiR3JhcGhxbFJlc3BvbnNlRXJyb3JcIjtcbiAgZXJyb3JzO1xuICBkYXRhO1xufTtcblxuLy8gcGtnL2Rpc3Qtc3JjL2dyYXBocWwuanNcbnZhciBOT05fVkFSSUFCTEVfT1BUSU9OUyA9IFtcbiAgXCJtZXRob2RcIixcbiAgXCJiYXNlVXJsXCIsXG4gIFwidXJsXCIsXG4gIFwiaGVhZGVyc1wiLFxuICBcInJlcXVlc3RcIixcbiAgXCJxdWVyeVwiLFxuICBcIm1lZGlhVHlwZVwiXG5dO1xudmFyIEZPUkJJRERFTl9WQVJJQUJMRV9PUFRJT05TID0gW1wicXVlcnlcIiwgXCJtZXRob2RcIiwgXCJ1cmxcIl07XG52YXIgR0hFU19WM19TVUZGSVhfUkVHRVggPSAvXFwvYXBpXFwvdjNcXC8/JC87XG5mdW5jdGlvbiBncmFwaHFsKHJlcXVlc3QyLCBxdWVyeSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09IFwic3RyaW5nXCIgJiYgXCJxdWVyeVwiIGluIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEVycm9yKGBbQG9jdG9raXQvZ3JhcGhxbF0gXCJxdWVyeVwiIGNhbm5vdCBiZSB1c2VkIGFzIHZhcmlhYmxlIG5hbWVgKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKCFGT1JCSURERU5fVkFSSUFCTEVfT1BUSU9OUy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgIGBbQG9jdG9raXQvZ3JhcGhxbF0gXCIke2tleX1cIiBjYW5ub3QgYmUgdXNlZCBhcyB2YXJpYWJsZSBuYW1lYFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYXJzZWRPcHRpb25zID0gdHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiID8gT2JqZWN0LmFzc2lnbih7IHF1ZXJ5IH0sIG9wdGlvbnMpIDogcXVlcnk7XG4gIGNvbnN0IHJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmtleXMoXG4gICAgcGFyc2VkT3B0aW9uc1xuICApLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcbiAgICBpZiAoTk9OX1ZBUklBQkxFX09QVElPTlMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBwYXJzZWRPcHRpb25zW2tleV07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAoIXJlc3VsdC52YXJpYWJsZXMpIHtcbiAgICAgIHJlc3VsdC52YXJpYWJsZXMgPSB7fTtcbiAgICB9XG4gICAgcmVzdWx0LnZhcmlhYmxlc1trZXldID0gcGFyc2VkT3B0aW9uc1trZXldO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbiAgY29uc3QgYmFzZVVybCA9IHBhcnNlZE9wdGlvbnMuYmFzZVVybCB8fCByZXF1ZXN0Mi5lbmRwb2ludC5ERUZBVUxUUy5iYXNlVXJsO1xuICBpZiAoR0hFU19WM19TVUZGSVhfUkVHRVgudGVzdChiYXNlVXJsKSkge1xuICAgIHJlcXVlc3RPcHRpb25zLnVybCA9IGJhc2VVcmwucmVwbGFjZShHSEVTX1YzX1NVRkZJWF9SRUdFWCwgXCIvYXBpL2dyYXBocWxcIik7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3QyKHJlcXVlc3RPcHRpb25zKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVzcG9uc2UuaGVhZGVycykpIHtcbiAgICAgICAgaGVhZGVyc1trZXldID0gcmVzcG9uc2UuaGVhZGVyc1trZXldO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEdyYXBocWxSZXNwb25zZUVycm9yKFxuICAgICAgICByZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgcmVzcG9uc2UuZGF0YVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuZGF0YTtcbiAgfSk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy93aXRoLWRlZmF1bHRzLmpzXG5mdW5jdGlvbiB3aXRoRGVmYXVsdHMocmVxdWVzdDIsIG5ld0RlZmF1bHRzKSB7XG4gIGNvbnN0IG5ld1JlcXVlc3QgPSByZXF1ZXN0Mi5kZWZhdWx0cyhuZXdEZWZhdWx0cyk7XG4gIGNvbnN0IG5ld0FwaSA9IChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBncmFwaHFsKG5ld1JlcXVlc3QsIHF1ZXJ5LCBvcHRpb25zKTtcbiAgfTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3QXBpLCB7XG4gICAgZGVmYXVsdHM6IHdpdGhEZWZhdWx0cy5iaW5kKG51bGwsIG5ld1JlcXVlc3QpLFxuICAgIGVuZHBvaW50OiBuZXdSZXF1ZXN0LmVuZHBvaW50XG4gIH0pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbnZhciBncmFwaHFsMiA9IHdpdGhEZWZhdWx0cyhyZXF1ZXN0LCB7XG4gIGhlYWRlcnM6IHtcbiAgICBcInVzZXItYWdlbnRcIjogYG9jdG9raXQtZ3JhcGhxbC5qcy8ke1ZFUlNJT059ICR7Z2V0VXNlckFnZW50KCl9YFxuICB9LFxuICBtZXRob2Q6IFwiUE9TVFwiLFxuICB1cmw6IFwiL2dyYXBocWxcIlxufSk7XG5mdW5jdGlvbiB3aXRoQ3VzdG9tUmVxdWVzdChjdXN0b21SZXF1ZXN0KSB7XG4gIHJldHVybiB3aXRoRGVmYXVsdHMoY3VzdG9tUmVxdWVzdCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBcIi9ncmFwaHFsXCJcbiAgfSk7XG59XG5leHBvcnQge1xuICBHcmFwaHFsUmVzcG9uc2VFcnJvcixcbiAgZ3JhcGhxbDIgYXMgZ3JhcGhxbCxcbiAgd2l0aEN1c3RvbVJlcXVlc3Rcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/graphql/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/oauth-app/dist-node/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@octokit/oauth-app/dist-node/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OAuthApp: () => (/* binding */ OAuthApp),\n/* harmony export */   createAWSLambdaAPIGatewayV2Handler: () => (/* binding */ createAWSLambdaAPIGatewayV2Handler),\n/* harmony export */   createNodeMiddleware: () => (/* binding */ createNodeMiddleware),\n/* harmony export */   createWebWorkerHandler: () => (/* binding */ createWebWorkerHandler),\n/* harmony export */   handleRequest: () => (/* binding */ handleRequest),\n/* harmony export */   sendNodeResponse: () => (/* binding */ sendResponse),\n/* harmony export */   unknownRouteResponse: () => (/* binding */ unknownRouteResponse)\n/* harmony export */ });\n/* harmony import */ var _octokit_auth_oauth_app__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @octokit/auth-oauth-app */ \"(ssr)/./node_modules/@octokit/auth-oauth-app/dist-bundle/index.js\");\n/* harmony import */ var _octokit_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/core */ \"(ssr)/./node_modules/@octokit/core/dist-src/index.js\");\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/auth-oauth-user */ \"(ssr)/./node_modules/@octokit/auth-oauth-user/dist-bundle/index.js\");\n/* harmony import */ var _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @octokit/oauth-methods */ \"(ssr)/./node_modules/@octokit/oauth-methods/dist-bundle/index.js\");\n/* harmony import */ var _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @octokit/auth-unauthenticated */ \"(ssr)/./node_modules/@octokit/auth-unauthenticated/dist-node/index.js\");\n// pkg/dist-src/index.js\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"7.1.3\";\n\n// pkg/dist-src/add-event-handler.js\nfunction addEventHandler(state, eventName, eventHandler) {\n  if (Array.isArray(eventName)) {\n    for (const singleEventName of eventName) {\n      addEventHandler(state, singleEventName, eventHandler);\n    }\n    return;\n  }\n  if (!state.eventHandlers[eventName]) {\n    state.eventHandlers[eventName] = [];\n  }\n  state.eventHandlers[eventName].push(eventHandler);\n}\n\n// pkg/dist-src/oauth-app-octokit.js\n\n\nvar OAuthAppOctokit = _octokit_core__WEBPACK_IMPORTED_MODULE_1__.Octokit.defaults({\n  userAgent: `octokit-oauth-app.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n});\n\n// pkg/dist-src/methods/get-user-octokit.js\n\n\n// pkg/dist-src/emit-event.js\nasync function emitEvent(state, context) {\n  const { name, action } = context;\n  if (state.eventHandlers[`${name}.${action}`]) {\n    for (const eventHandler of state.eventHandlers[`${name}.${action}`]) {\n      await eventHandler(context);\n    }\n  }\n  if (state.eventHandlers[name]) {\n    for (const eventHandler of state.eventHandlers[name]) {\n      await eventHandler(context);\n    }\n  }\n}\n\n// pkg/dist-src/methods/get-user-octokit.js\nasync function getUserOctokitWithState(state, options) {\n  return state.octokit.auth({\n    type: \"oauth-user\",\n    ...options,\n    async factory(options2) {\n      const octokit = new state.Octokit({\n        authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n        auth: options2\n      });\n      const authentication = await octokit.auth({\n        type: \"get\"\n      });\n      await emitEvent(state, {\n        name: \"token\",\n        action: \"created\",\n        token: authentication.token,\n        scopes: authentication.scopes,\n        authentication,\n        octokit\n      });\n      return octokit;\n    }\n  });\n}\n\n// pkg/dist-src/methods/get-web-flow-authorization-url.js\n\nfunction getWebFlowAuthorizationUrlWithState(state, options) {\n  const optionsWithDefaults = {\n    clientId: state.clientId,\n    request: state.octokit.request,\n    ...options,\n    allowSignup: state.allowSignup ?? options.allowSignup,\n    redirectUrl: options.redirectUrl ?? state.redirectUrl,\n    scopes: options.scopes ?? state.defaultScopes\n  };\n  return _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.getWebFlowAuthorizationUrl({\n    clientType: state.clientType,\n    ...optionsWithDefaults\n  });\n}\n\n// pkg/dist-src/methods/create-token.js\n\nasync function createTokenWithState(state, options) {\n  const authentication = await state.octokit.auth({\n    type: \"oauth-user\",\n    ...options\n  });\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"created\",\n    token: authentication.token,\n    scopes: authentication.scopes,\n    authentication,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n      auth: {\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: authentication.token,\n        scopes: authentication.scopes,\n        refreshToken: authentication.refreshToken,\n        expiresAt: authentication.expiresAt,\n        refreshTokenExpiresAt: authentication.refreshTokenExpiresAt\n      }\n    })\n  });\n  return { authentication };\n}\n\n// pkg/dist-src/methods/check-token.js\n\nasync function checkTokenWithState(state, options) {\n  const result = await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.checkToken({\n    // @ts-expect-error not worth the extra code to appease TS\n    clientType: state.clientType,\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    ...options\n  });\n  Object.assign(result.authentication, { type: \"token\", tokenType: \"oauth\" });\n  return result;\n}\n\n// pkg/dist-src/methods/reset-token.js\n\n\nasync function resetTokenWithState(state, options) {\n  const optionsWithDefaults = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    ...options\n  };\n  if (state.clientType === \"oauth-app\") {\n    const response2 = await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.resetToken({\n      clientType: \"oauth-app\",\n      ...optionsWithDefaults\n    });\n    const authentication2 = Object.assign(response2.authentication, {\n      type: \"token\",\n      tokenType: \"oauth\"\n    });\n    await emitEvent(state, {\n      name: \"token\",\n      action: \"reset\",\n      token: response2.authentication.token,\n      scopes: response2.authentication.scopes || void 0,\n      authentication: authentication2,\n      octokit: new state.Octokit({\n        authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n        auth: {\n          clientType: state.clientType,\n          clientId: state.clientId,\n          clientSecret: state.clientSecret,\n          token: response2.authentication.token,\n          scopes: response2.authentication.scopes\n        }\n      })\n    });\n    return { ...response2, authentication: authentication2 };\n  }\n  const response = await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.resetToken({\n    clientType: \"github-app\",\n    ...optionsWithDefaults\n  });\n  const authentication = Object.assign(response.authentication, {\n    type: \"token\",\n    tokenType: \"oauth\"\n  });\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"reset\",\n    token: response.authentication.token,\n    authentication,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n      auth: {\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: response.authentication.token\n      }\n    })\n  });\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/methods/refresh-token.js\n\n\nasync function refreshTokenWithState(state, options) {\n  if (state.clientType === \"oauth-app\") {\n    throw new Error(\n      \"[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps\"\n    );\n  }\n  const response = await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.refreshToken({\n    clientType: \"github-app\",\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    refreshToken: options.refreshToken\n  });\n  const authentication = Object.assign(response.authentication, {\n    type: \"token\",\n    tokenType: \"oauth\"\n  });\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"refreshed\",\n    token: response.authentication.token,\n    authentication,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n      auth: {\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: response.authentication.token\n      }\n    })\n  });\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/methods/scope-token.js\n\n\nasync function scopeTokenWithState(state, options) {\n  if (state.clientType === \"oauth-app\") {\n    throw new Error(\n      \"[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps\"\n    );\n  }\n  const response = await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.scopeToken({\n    clientType: \"github-app\",\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    ...options\n  });\n  const authentication = Object.assign(response.authentication, {\n    type: \"token\",\n    tokenType: \"oauth\"\n  });\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"scoped\",\n    token: response.authentication.token,\n    authentication,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_oauth_user__WEBPACK_IMPORTED_MODULE_2__.createOAuthUserAuth,\n      auth: {\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: response.authentication.token\n      }\n    })\n  });\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/methods/delete-token.js\n\n\nasync function deleteTokenWithState(state, options) {\n  const optionsWithDefaults = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    ...options\n  };\n  const response = state.clientType === \"oauth-app\" ? await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.deleteToken({\n    clientType: \"oauth-app\",\n    ...optionsWithDefaults\n  }) : (\n    // istanbul ignore next\n    await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.deleteToken({\n      clientType: \"github-app\",\n      ...optionsWithDefaults\n    })\n  );\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"deleted\",\n    token: options.token,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_4__.createUnauthenticatedAuth,\n      auth: {\n        reason: `Handling \"token.deleted\" event. The access for the token has been revoked.`\n      }\n    })\n  });\n  return response;\n}\n\n// pkg/dist-src/methods/delete-authorization.js\n\n\nasync function deleteAuthorizationWithState(state, options) {\n  const optionsWithDefaults = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.octokit.request,\n    ...options\n  };\n  const response = state.clientType === \"oauth-app\" ? await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.deleteAuthorization({\n    clientType: \"oauth-app\",\n    ...optionsWithDefaults\n  }) : (\n    // istanbul ignore next\n    await _octokit_oauth_methods__WEBPACK_IMPORTED_MODULE_3__.deleteAuthorization({\n      clientType: \"github-app\",\n      ...optionsWithDefaults\n    })\n  );\n  await emitEvent(state, {\n    name: \"token\",\n    action: \"deleted\",\n    token: options.token,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_4__.createUnauthenticatedAuth,\n      auth: {\n        reason: `Handling \"token.deleted\" event. The access for the token has been revoked.`\n      }\n    })\n  });\n  await emitEvent(state, {\n    name: \"authorization\",\n    action: \"deleted\",\n    token: options.token,\n    octokit: new state.Octokit({\n      authStrategy: _octokit_auth_unauthenticated__WEBPACK_IMPORTED_MODULE_4__.createUnauthenticatedAuth,\n      auth: {\n        reason: `Handling \"authorization.deleted\" event. The access for the app has been revoked.`\n      }\n    })\n  });\n  return response;\n}\n\n// pkg/dist-src/middleware/unknown-route-response.js\nfunction unknownRouteResponse(request) {\n  return {\n    status: 404,\n    headers: { \"content-type\": \"application/json\" },\n    text: JSON.stringify({\n      error: `Unknown route: ${request.method} ${request.url}`\n    })\n  };\n}\n\n// pkg/dist-src/middleware/handle-request.js\nasync function handleRequest(app, { pathPrefix = \"/api/github/oauth\" }, request) {\n  let { pathname } = new URL(request.url, \"http://localhost\");\n  if (!pathname.startsWith(`${pathPrefix}/`)) {\n    return void 0;\n  }\n  if (request.method === \"OPTIONS\") {\n    return {\n      status: 200,\n      headers: {\n        \"access-control-allow-origin\": \"*\",\n        \"access-control-allow-methods\": \"*\",\n        \"access-control-allow-headers\": \"Content-Type, User-Agent, Authorization\"\n      }\n    };\n  }\n  pathname = pathname.slice(pathPrefix.length + 1);\n  const route = [request.method, pathname].join(\" \");\n  const routes = {\n    getLogin: `GET login`,\n    getCallback: `GET callback`,\n    createToken: `POST token`,\n    getToken: `GET token`,\n    patchToken: `PATCH token`,\n    patchRefreshToken: `PATCH refresh-token`,\n    scopeToken: `POST token/scoped`,\n    deleteToken: `DELETE token`,\n    deleteGrant: `DELETE grant`\n  };\n  if (!Object.values(routes).includes(route)) {\n    return unknownRouteResponse(request);\n  }\n  let json;\n  try {\n    const text = await request.text();\n    json = text ? JSON.parse(text) : {};\n  } catch (error) {\n    return {\n      status: 400,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"access-control-allow-origin\": \"*\"\n      },\n      text: JSON.stringify({\n        error: \"[@octokit/oauth-app] request error\"\n      })\n    };\n  }\n  const { searchParams } = new URL(request.url, \"http://localhost\");\n  const query = Object.fromEntries(searchParams);\n  const headers = request.headers;\n  try {\n    if (route === routes.getLogin) {\n      const { url } = app.getWebFlowAuthorizationUrl({\n        state: query.state,\n        scopes: query.scopes ? query.scopes.split(\",\") : void 0,\n        allowSignup: query.allowSignup ? query.allowSignup === \"true\" : void 0,\n        redirectUrl: query.redirectUrl\n      });\n      return { status: 302, headers: { location: url } };\n    }\n    if (route === routes.getCallback) {\n      if (query.error) {\n        throw new Error(\n          `[@octokit/oauth-app] ${query.error} ${query.error_description}`\n        );\n      }\n      if (!query.code) {\n        throw new Error('[@octokit/oauth-app] \"code\" parameter is required');\n      }\n      const {\n        authentication: { token: token2 }\n      } = await app.createToken({\n        code: query.code\n      });\n      return {\n        status: 200,\n        headers: {\n          \"content-type\": \"text/html\"\n        },\n        text: `<h1>Token created successfully</h1>\n\n<p>Your token is: <strong>${token2}</strong>. Copy it now as it cannot be shown again.</p>`\n      };\n    }\n    if (route === routes.createToken) {\n      const { code, redirectUrl } = json;\n      if (!code) {\n        throw new Error('[@octokit/oauth-app] \"code\" parameter is required');\n      }\n      const result = await app.createToken({\n        code,\n        redirectUrl\n      });\n      delete result.authentication.clientSecret;\n      return {\n        status: 201,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify(result)\n      };\n    }\n    if (route === routes.getToken) {\n      const token2 = headers.authorization?.substr(\"token \".length);\n      if (!token2) {\n        throw new Error(\n          '[@octokit/oauth-app] \"Authorization\" header is required'\n        );\n      }\n      const result = await app.checkToken({\n        token: token2\n      });\n      delete result.authentication.clientSecret;\n      return {\n        status: 200,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify(result)\n      };\n    }\n    if (route === routes.patchToken) {\n      const token2 = headers.authorization?.substr(\"token \".length);\n      if (!token2) {\n        throw new Error(\n          '[@octokit/oauth-app] \"Authorization\" header is required'\n        );\n      }\n      const result = await app.resetToken({ token: token2 });\n      delete result.authentication.clientSecret;\n      return {\n        status: 200,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify(result)\n      };\n    }\n    if (route === routes.patchRefreshToken) {\n      const token2 = headers.authorization?.substr(\"token \".length);\n      if (!token2) {\n        throw new Error(\n          '[@octokit/oauth-app] \"Authorization\" header is required'\n        );\n      }\n      const { refreshToken: refreshToken2 } = json;\n      if (!refreshToken2) {\n        throw new Error(\n          \"[@octokit/oauth-app] refreshToken must be sent in request body\"\n        );\n      }\n      const result = await app.refreshToken({ refreshToken: refreshToken2 });\n      delete result.authentication.clientSecret;\n      return {\n        status: 200,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify(result)\n      };\n    }\n    if (route === routes.scopeToken) {\n      const token2 = headers.authorization?.substr(\"token \".length);\n      if (!token2) {\n        throw new Error(\n          '[@octokit/oauth-app] \"Authorization\" header is required'\n        );\n      }\n      const result = await app.scopeToken({\n        token: token2,\n        ...json\n      });\n      delete result.authentication.clientSecret;\n      return {\n        status: 200,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"access-control-allow-origin\": \"*\"\n        },\n        text: JSON.stringify(result)\n      };\n    }\n    if (route === routes.deleteToken) {\n      const token2 = headers.authorization?.substr(\"token \".length);\n      if (!token2) {\n        throw new Error(\n          '[@octokit/oauth-app] \"Authorization\" header is required'\n        );\n      }\n      await app.deleteToken({\n        token: token2\n      });\n      return {\n        status: 204,\n        headers: { \"access-control-allow-origin\": \"*\" }\n      };\n    }\n    const token = headers.authorization?.substr(\"token \".length);\n    if (!token) {\n      throw new Error(\n        '[@octokit/oauth-app] \"Authorization\" header is required'\n      );\n    }\n    await app.deleteAuthorization({\n      token\n    });\n    return {\n      status: 204,\n      headers: { \"access-control-allow-origin\": \"*\" }\n    };\n  } catch (error) {\n    return {\n      status: 400,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"access-control-allow-origin\": \"*\"\n      },\n      text: JSON.stringify({ error: error.message })\n    };\n  }\n}\n\n// pkg/dist-src/middleware/node/parse-request.js\nfunction parseRequest(request) {\n  const { method, url, headers } = request;\n  async function text() {\n    const text2 = await new Promise((resolve, reject) => {\n      let bodyChunks = [];\n      request.on(\"error\", reject).on(\"data\", (chunk) => bodyChunks.push(chunk)).on(\"end\", () => resolve(Buffer.concat(bodyChunks).toString()));\n    });\n    return text2;\n  }\n  return { method, url, headers, text };\n}\n\n// pkg/dist-src/middleware/node/send-response.js\nfunction sendResponse(octokitResponse, response) {\n  response.writeHead(octokitResponse.status, octokitResponse.headers);\n  response.end(octokitResponse.text);\n}\n\n// pkg/dist-src/middleware/node/index.js\nfunction createNodeMiddleware(app, options = {}) {\n  return async function(request, response, next) {\n    const octokitRequest = await parseRequest(request);\n    const octokitResponse = await handleRequest(app, options, octokitRequest);\n    if (octokitResponse) {\n      sendResponse(octokitResponse, response);\n      return true;\n    } else {\n      next?.();\n      return false;\n    }\n  };\n}\n\n// pkg/dist-src/middleware/web-worker/parse-request.js\nfunction parseRequest2(request) {\n  const headers = Object.fromEntries(request.headers.entries());\n  return {\n    method: request.method,\n    url: request.url,\n    headers,\n    text: () => request.text()\n  };\n}\n\n// pkg/dist-src/middleware/web-worker/send-response.js\nfunction sendResponse2(octokitResponse) {\n  return new Response(octokitResponse.text, {\n    status: octokitResponse.status,\n    headers: octokitResponse.headers\n  });\n}\n\n// pkg/dist-src/middleware/web-worker/index.js\nfunction createWebWorkerHandler(app, options = {}) {\n  return async function(request) {\n    const octokitRequest = await parseRequest2(request);\n    const octokitResponse = await handleRequest(app, options, octokitRequest);\n    return octokitResponse ? sendResponse2(octokitResponse) : void 0;\n  };\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2-parse-request.js\nfunction parseRequest3(request) {\n  const { method } = request.requestContext.http;\n  let url = request.rawPath;\n  const { stage } = request.requestContext;\n  if (url.startsWith(\"/\" + stage)) url = url.substring(stage.length + 1);\n  if (request.rawQueryString) url += \"?\" + request.rawQueryString;\n  const headers = request.headers;\n  const text = async () => request.body || \"\";\n  return { method, url, headers, text };\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2-send-response.js\nfunction sendResponse3(octokitResponse) {\n  return {\n    statusCode: octokitResponse.status,\n    headers: octokitResponse.headers,\n    body: octokitResponse.text\n  };\n}\n\n// pkg/dist-src/middleware/aws-lambda/api-gateway-v2.js\nfunction createAWSLambdaAPIGatewayV2Handler(app, options = {}) {\n  return async function(event) {\n    const request = parseRequest3(event);\n    const response = await handleRequest(app, options, request);\n    return response ? sendResponse3(response) : void 0;\n  };\n}\n\n// pkg/dist-src/index.js\nvar OAuthApp = class {\n  static VERSION = VERSION;\n  static defaults(defaults) {\n    const OAuthAppWithDefaults = class extends this {\n      constructor(...args) {\n        super({\n          ...defaults,\n          ...args[0]\n        });\n      }\n    };\n    return OAuthAppWithDefaults;\n  }\n  constructor(options) {\n    const Octokit2 = options.Octokit || OAuthAppOctokit;\n    this.type = options.clientType || \"oauth-app\";\n    const octokit = new Octokit2({\n      authStrategy: _octokit_auth_oauth_app__WEBPACK_IMPORTED_MODULE_5__.createOAuthAppAuth,\n      auth: {\n        clientType: this.type,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret\n      }\n    });\n    const state = {\n      clientType: this.type,\n      clientId: options.clientId,\n      clientSecret: options.clientSecret,\n      // @ts-expect-error defaultScopes not permitted for GitHub Apps\n      defaultScopes: options.defaultScopes || [],\n      allowSignup: options.allowSignup,\n      baseUrl: options.baseUrl,\n      redirectUrl: options.redirectUrl,\n      log: options.log,\n      Octokit: Octokit2,\n      octokit,\n      eventHandlers: {}\n    };\n    this.on = addEventHandler.bind(null, state);\n    this.octokit = octokit;\n    this.getUserOctokit = getUserOctokitWithState.bind(null, state);\n    this.getWebFlowAuthorizationUrl = getWebFlowAuthorizationUrlWithState.bind(\n      null,\n      state\n    );\n    this.createToken = createTokenWithState.bind(\n      null,\n      state\n    );\n    this.checkToken = checkTokenWithState.bind(\n      null,\n      state\n    );\n    this.resetToken = resetTokenWithState.bind(\n      null,\n      state\n    );\n    this.refreshToken = refreshTokenWithState.bind(\n      null,\n      state\n    );\n    this.scopeToken = scopeTokenWithState.bind(\n      null,\n      state\n    );\n    this.deleteToken = deleteTokenWithState.bind(null, state);\n    this.deleteAuthorization = deleteAuthorizationWithState.bind(null, state);\n  }\n  // assigned during constructor\n  type;\n  on;\n  octokit;\n  getUserOctokit;\n  getWebFlowAuthorizationUrl;\n  createToken;\n  checkToken;\n  resetToken;\n  refreshToken;\n  scopeToken;\n  deleteToken;\n  deleteAuthorization;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/oauth-app/dist-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/oauth-authorization-url/dist-src/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@octokit/oauth-authorization-url/dist-src/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   oauthAuthorizationUrl: () => (/* binding */ oauthAuthorizationUrl)\n/* harmony export */ });\nfunction oauthAuthorizationUrl(options) {\n  const clientType = options.clientType || \"oauth-app\";\n  const baseUrl = options.baseUrl || \"https://github.com\";\n  const result = {\n    clientType,\n    allowSignup: options.allowSignup === false ? false : true,\n    clientId: options.clientId,\n    login: options.login || null,\n    redirectUrl: options.redirectUrl || null,\n    state: options.state || Math.random().toString(36).substr(2),\n    url: \"\"\n  };\n  if (clientType === \"oauth-app\") {\n    const scopes = \"scopes\" in options ? options.scopes : [];\n    result.scopes = typeof scopes === \"string\" ? scopes.split(/[,\\s]+/).filter(Boolean) : scopes;\n  }\n  result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n  return result;\n}\nfunction urlBuilderAuthorize(base, options) {\n  const map = {\n    allowSignup: \"allow_signup\",\n    clientId: \"client_id\",\n    login: \"login\",\n    redirectUrl: \"redirect_uri\",\n    scopes: \"scope\",\n    state: \"state\"\n  };\n  let url = base;\n  Object.keys(map).filter((k) => options[k] !== null).filter((k) => {\n    if (k !== \"scopes\")\n      return true;\n    if (options.clientType === \"github-app\")\n      return false;\n    return !Array.isArray(options[k]) || options[k].length > 0;\n  }).map((key) => [map[key], `${options[key]}`]).forEach(([key, value], index) => {\n    url += index === 0 ? `?` : \"&\";\n    url += `${key}=${encodeURIComponent(value)}`;\n  });\n  return url;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvb2F1dGgtYXV0aG9yaXphdGlvbi11cmwvZGlzdC1zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2QkFBNkIsYUFBYTtBQUM3QztBQUNBLGNBQWMsSUFBSSxHQUFHLDBCQUEwQjtBQUMvQyxHQUFHO0FBQ0g7QUFDQTtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L29hdXRoLWF1dGhvcml6YXRpb24tdXJsL2Rpc3Qtc3JjL2luZGV4LmpzP2FhOGMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gb2F1dGhBdXRob3JpemF0aW9uVXJsKG9wdGlvbnMpIHtcbiAgY29uc3QgY2xpZW50VHlwZSA9IG9wdGlvbnMuY2xpZW50VHlwZSB8fCBcIm9hdXRoLWFwcFwiO1xuICBjb25zdCBiYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsIHx8IFwiaHR0cHM6Ly9naXRodWIuY29tXCI7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBjbGllbnRUeXBlLFxuICAgIGFsbG93U2lnbnVwOiBvcHRpb25zLmFsbG93U2lnbnVwID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICBjbGllbnRJZDogb3B0aW9ucy5jbGllbnRJZCxcbiAgICBsb2dpbjogb3B0aW9ucy5sb2dpbiB8fCBudWxsLFxuICAgIHJlZGlyZWN0VXJsOiBvcHRpb25zLnJlZGlyZWN0VXJsIHx8IG51bGwsXG4gICAgc3RhdGU6IG9wdGlvbnMuc3RhdGUgfHwgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpLFxuICAgIHVybDogXCJcIlxuICB9O1xuICBpZiAoY2xpZW50VHlwZSA9PT0gXCJvYXV0aC1hcHBcIikge1xuICAgIGNvbnN0IHNjb3BlcyA9IFwic2NvcGVzXCIgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2NvcGVzIDogW107XG4gICAgcmVzdWx0LnNjb3BlcyA9IHR5cGVvZiBzY29wZXMgPT09IFwic3RyaW5nXCIgPyBzY29wZXMuc3BsaXQoL1ssXFxzXSsvKS5maWx0ZXIoQm9vbGVhbikgOiBzY29wZXM7XG4gIH1cbiAgcmVzdWx0LnVybCA9IHVybEJ1aWxkZXJBdXRob3JpemUoYCR7YmFzZVVybH0vbG9naW4vb2F1dGgvYXV0aG9yaXplYCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHVybEJ1aWxkZXJBdXRob3JpemUoYmFzZSwgb3B0aW9ucykge1xuICBjb25zdCBtYXAgPSB7XG4gICAgYWxsb3dTaWdudXA6IFwiYWxsb3dfc2lnbnVwXCIsXG4gICAgY2xpZW50SWQ6IFwiY2xpZW50X2lkXCIsXG4gICAgbG9naW46IFwibG9naW5cIixcbiAgICByZWRpcmVjdFVybDogXCJyZWRpcmVjdF91cmlcIixcbiAgICBzY29wZXM6IFwic2NvcGVcIixcbiAgICBzdGF0ZTogXCJzdGF0ZVwiXG4gIH07XG4gIGxldCB1cmwgPSBiYXNlO1xuICBPYmplY3Qua2V5cyhtYXApLmZpbHRlcigoaykgPT4gb3B0aW9uc1trXSAhPT0gbnVsbCkuZmlsdGVyKChrKSA9PiB7XG4gICAgaWYgKGsgIT09IFwic2NvcGVzXCIpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucy5jbGllbnRUeXBlID09PSBcImdpdGh1Yi1hcHBcIilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gIUFycmF5LmlzQXJyYXkob3B0aW9uc1trXSkgfHwgb3B0aW9uc1trXS5sZW5ndGggPiAwO1xuICB9KS5tYXAoKGtleSkgPT4gW21hcFtrZXldLCBgJHtvcHRpb25zW2tleV19YF0pLmZvckVhY2goKFtrZXksIHZhbHVlXSwgaW5kZXgpID0+IHtcbiAgICB1cmwgKz0gaW5kZXggPT09IDAgPyBgP2AgOiBcIiZcIjtcbiAgICB1cmwgKz0gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcbiAgfSk7XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnQge1xuICBvYXV0aEF1dGhvcml6YXRpb25Vcmxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/oauth-authorization-url/dist-src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/oauth-methods/dist-bundle/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@octokit/oauth-methods/dist-bundle/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   checkToken: () => (/* binding */ checkToken),\n/* harmony export */   createDeviceCode: () => (/* binding */ createDeviceCode),\n/* harmony export */   deleteAuthorization: () => (/* binding */ deleteAuthorization),\n/* harmony export */   deleteToken: () => (/* binding */ deleteToken),\n/* harmony export */   exchangeDeviceCode: () => (/* binding */ exchangeDeviceCode),\n/* harmony export */   exchangeWebFlowCode: () => (/* binding */ exchangeWebFlowCode),\n/* harmony export */   getWebFlowAuthorizationUrl: () => (/* binding */ getWebFlowAuthorizationUrl),\n/* harmony export */   refreshToken: () => (/* binding */ refreshToken),\n/* harmony export */   resetToken: () => (/* binding */ resetToken),\n/* harmony export */   scopeToken: () => (/* binding */ scopeToken)\n/* harmony export */ });\n/* harmony import */ var _octokit_oauth_authorization_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/oauth-authorization-url */ \"(ssr)/./node_modules/@octokit/oauth-authorization-url/dist-src/index.js\");\n/* harmony import */ var _octokit_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/request */ \"(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\");\n/* harmony import */ var _octokit_request_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @octokit/request-error */ \"(ssr)/./node_modules/@octokit/request-error/dist-src/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/get-web-flow-authorization-url.js\n\n\n\n// pkg/dist-src/utils.js\n\nfunction requestToOAuthBaseUrl(request) {\n  const endpointDefaults = request.endpoint.DEFAULTS;\n  return /^https:\\/\\/(api\\.)?github\\.com$/.test(endpointDefaults.baseUrl) ? \"https://github.com\" : endpointDefaults.baseUrl.replace(\"/api/v3\", \"\");\n}\nasync function oauthRequest(request, route, parameters) {\n  const withOAuthParameters = {\n    baseUrl: requestToOAuthBaseUrl(request),\n    headers: {\n      accept: \"application/json\"\n    },\n    ...parameters\n  };\n  const response = await request(route, withOAuthParameters);\n  if (\"error\" in response.data) {\n    const error = new _octokit_request_error__WEBPACK_IMPORTED_MODULE_0__.RequestError(\n      `${response.data.error_description} (${response.data.error}, ${response.data.error_uri})`,\n      400,\n      {\n        request: request.endpoint.merge(\n          route,\n          withOAuthParameters\n        )\n      }\n    );\n    error.response = response;\n    throw error;\n  }\n  return response;\n}\n\n// pkg/dist-src/get-web-flow-authorization-url.js\nfunction getWebFlowAuthorizationUrl({\n  request = _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request,\n  ...options\n}) {\n  const baseUrl = requestToOAuthBaseUrl(request);\n  return (0,_octokit_oauth_authorization_url__WEBPACK_IMPORTED_MODULE_2__.oauthAuthorizationUrl)({\n    ...options,\n    baseUrl\n  });\n}\n\n// pkg/dist-src/exchange-web-flow-code.js\n\nasync function exchangeWebFlowCode(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const response = await oauthRequest(\n    request,\n    \"POST /login/oauth/access_token\",\n    {\n      client_id: options.clientId,\n      client_secret: options.clientSecret,\n      code: options.code,\n      redirect_uri: options.redirectUrl\n    }\n  );\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp(\n        apiTimeInMs,\n        response.data.expires_in\n      ), authentication.refreshTokenExpiresAt = toTimestamp(\n        apiTimeInMs,\n        response.data.refresh_token_expires_in\n      );\n    }\n    delete authentication.scopes;\n  }\n  return { ...response, authentication };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();\n}\n\n// pkg/dist-src/create-device-code.js\n\nasync function createDeviceCode(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const parameters = {\n    client_id: options.clientId\n  };\n  if (\"scopes\" in options && Array.isArray(options.scopes)) {\n    parameters.scope = options.scopes.join(\" \");\n  }\n  return oauthRequest(request, \"POST /login/device/code\", parameters);\n}\n\n// pkg/dist-src/exchange-device-code.js\n\nasync function exchangeDeviceCode(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const response = await oauthRequest(\n    request,\n    \"POST /login/oauth/access_token\",\n    {\n      client_id: options.clientId,\n      device_code: options.code,\n      grant_type: \"urn:ietf:params:oauth:grant-type:device_code\"\n    }\n  );\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n  if (\"clientSecret\" in options) {\n    authentication.clientSecret = options.clientSecret;\n  }\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp2(\n        apiTimeInMs,\n        response.data.expires_in\n      ), authentication.refreshTokenExpiresAt = toTimestamp2(\n        apiTimeInMs,\n        response.data.refresh_token_expires_in\n      );\n    }\n    delete authentication.scopes;\n  }\n  return { ...response, authentication };\n}\nfunction toTimestamp2(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();\n}\n\n// pkg/dist-src/check-token.js\n\nasync function checkToken(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const response = await request(\"POST /applications/{client_id}/token\", {\n    headers: {\n      authorization: `basic ${btoa(\n        `${options.clientId}:${options.clientSecret}`\n      )}`\n    },\n    client_id: options.clientId,\n    access_token: options.token\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: options.token,\n    scopes: response.data.scopes\n  };\n  if (response.data.expires_at)\n    authentication.expiresAt = response.data.expires_at;\n  if (options.clientType === \"github-app\") {\n    delete authentication.scopes;\n  }\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/refresh-token.js\n\nasync function refreshToken(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const response = await oauthRequest(\n    request,\n    \"POST /login/oauth/access_token\",\n    {\n      client_id: options.clientId,\n      client_secret: options.clientSecret,\n      grant_type: \"refresh_token\",\n      refresh_token: options.refreshToken\n    }\n  );\n  const apiTimeInMs = new Date(response.headers.date).getTime();\n  const authentication = {\n    clientType: \"github-app\",\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.access_token,\n    refreshToken: response.data.refresh_token,\n    expiresAt: toTimestamp3(apiTimeInMs, response.data.expires_in),\n    refreshTokenExpiresAt: toTimestamp3(\n      apiTimeInMs,\n      response.data.refresh_token_expires_in\n    )\n  };\n  return { ...response, authentication };\n}\nfunction toTimestamp3(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();\n}\n\n// pkg/dist-src/scope-token.js\n\nasync function scopeToken(options) {\n  const {\n    request: optionsRequest,\n    clientType,\n    clientId,\n    clientSecret,\n    token,\n    ...requestOptions\n  } = options;\n  const request = optionsRequest || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const response = await request(\n    \"POST /applications/{client_id}/token/scoped\",\n    {\n      headers: {\n        authorization: `basic ${btoa(`${clientId}:${clientSecret}`)}`\n      },\n      client_id: clientId,\n      access_token: token,\n      ...requestOptions\n    }\n  );\n  const authentication = Object.assign(\n    {\n      clientType,\n      clientId,\n      clientSecret,\n      token: response.data.token\n    },\n    response.data.expires_at ? { expiresAt: response.data.expires_at } : {}\n  );\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/reset-token.js\n\nasync function resetToken(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  const response = await request(\n    \"PATCH /applications/{client_id}/token\",\n    {\n      headers: {\n        authorization: `basic ${auth}`\n      },\n      client_id: options.clientId,\n      access_token: options.token\n    }\n  );\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.token,\n    scopes: response.data.scopes\n  };\n  if (response.data.expires_at)\n    authentication.expiresAt = response.data.expires_at;\n  if (options.clientType === \"github-app\") {\n    delete authentication.scopes;\n  }\n  return { ...response, authentication };\n}\n\n// pkg/dist-src/delete-token.js\n\nasync function deleteToken(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  return request(\n    \"DELETE /applications/{client_id}/token\",\n    {\n      headers: {\n        authorization: `basic ${auth}`\n      },\n      client_id: options.clientId,\n      access_token: options.token\n    }\n  );\n}\n\n// pkg/dist-src/delete-authorization.js\n\nasync function deleteAuthorization(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  _octokit_request__WEBPACK_IMPORTED_MODULE_1__.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  return request(\n    \"DELETE /applications/{client_id}/grant\",\n    {\n      headers: {\n        authorization: `basic ${auth}`\n      },\n      client_id: options.clientId,\n      access_token: options.token\n    }\n  );\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/oauth-methods/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-paginate-graphql/dist-bundle/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-paginate-graphql/dist-bundle/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   paginateGraphQL: () => (/* binding */ paginateGraphQL)\n/* harmony export */ });\n// pkg/dist-src/errors.js\nvar generateMessage = (path, cursorValue) => `The cursor at \"${path.join(\n  \",\"\n)}\" did not change its value \"${cursorValue}\" after a page transition. Please make sure your that your query is set up correctly.`;\nvar MissingCursorChange = class extends Error {\n  constructor(pageInfo, cursorValue) {\n    super(generateMessage(pageInfo.pathInQuery, cursorValue));\n    this.pageInfo = pageInfo;\n    this.cursorValue = cursorValue;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n  name = \"MissingCursorChangeError\";\n};\nvar MissingPageInfo = class extends Error {\n  constructor(response) {\n    super(\n      `No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(\n        response,\n        null,\n        2\n      )}`\n    );\n    this.response = response;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n  name = \"MissingPageInfo\";\n};\n\n// pkg/dist-src/object-helpers.js\nvar isObject = (value) => Object.prototype.toString.call(value) === \"[object Object]\";\nfunction findPaginatedResourcePath(responseData) {\n  const paginatedResourcePath = deepFindPathToProperty(\n    responseData,\n    \"pageInfo\"\n  );\n  if (paginatedResourcePath.length === 0) {\n    throw new MissingPageInfo(responseData);\n  }\n  return paginatedResourcePath;\n}\nvar deepFindPathToProperty = (object, searchProp, path = []) => {\n  for (const key of Object.keys(object)) {\n    const currentPath = [...path, key];\n    const currentValue = object[key];\n    if (currentValue.hasOwnProperty(searchProp)) {\n      return currentPath;\n    }\n    if (isObject(currentValue)) {\n      const result = deepFindPathToProperty(\n        currentValue,\n        searchProp,\n        currentPath\n      );\n      if (result.length > 0) {\n        return result;\n      }\n    }\n  }\n  return [];\n};\nvar get = (object, path) => {\n  return path.reduce((current, nextProperty) => current[nextProperty], object);\n};\nvar set = (object, path, mutator) => {\n  const lastProperty = path[path.length - 1];\n  const parentPath = [...path].slice(0, -1);\n  const parent = get(object, parentPath);\n  if (typeof mutator === \"function\") {\n    parent[lastProperty] = mutator(parent[lastProperty]);\n  } else {\n    parent[lastProperty] = mutator;\n  }\n};\n\n// pkg/dist-src/extract-page-info.js\nvar extractPageInfos = (responseData) => {\n  const pageInfoPath = findPaginatedResourcePath(responseData);\n  return {\n    pathInQuery: pageInfoPath,\n    pageInfo: get(responseData, [...pageInfoPath, \"pageInfo\"])\n  };\n};\n\n// pkg/dist-src/page-info.js\nvar isForwardSearch = (givenPageInfo) => {\n  return givenPageInfo.hasOwnProperty(\"hasNextPage\");\n};\nvar getCursorFrom = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.endCursor : pageInfo.startCursor;\nvar hasAnotherPage = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.hasNextPage : pageInfo.hasPreviousPage;\n\n// pkg/dist-src/iterator.js\nvar createIterator = (octokit) => {\n  return (query, initialParameters = {}) => {\n    let nextPageExists = true;\n    let parameters = { ...initialParameters };\n    return {\n      [Symbol.asyncIterator]: () => ({\n        async next() {\n          if (!nextPageExists)\n            return { done: true, value: {} };\n          const response = await octokit.graphql(\n            query,\n            parameters\n          );\n          const pageInfoContext = extractPageInfos(response);\n          const nextCursorValue = getCursorFrom(pageInfoContext.pageInfo);\n          nextPageExists = hasAnotherPage(pageInfoContext.pageInfo);\n          if (nextPageExists && nextCursorValue === parameters.cursor) {\n            throw new MissingCursorChange(pageInfoContext, nextCursorValue);\n          }\n          parameters = {\n            ...parameters,\n            cursor: nextCursorValue\n          };\n          return { done: false, value: response };\n        }\n      })\n    };\n  };\n};\n\n// pkg/dist-src/merge-responses.js\nvar mergeResponses = (response1, response2) => {\n  if (Object.keys(response1).length === 0) {\n    return Object.assign(response1, response2);\n  }\n  const path = findPaginatedResourcePath(response1);\n  const nodesPath = [...path, \"nodes\"];\n  const newNodes = get(response2, nodesPath);\n  if (newNodes) {\n    set(response1, nodesPath, (values) => {\n      return [...values, ...newNodes];\n    });\n  }\n  const edgesPath = [...path, \"edges\"];\n  const newEdges = get(response2, edgesPath);\n  if (newEdges) {\n    set(response1, edgesPath, (values) => {\n      return [...values, ...newEdges];\n    });\n  }\n  const pageInfoPath = [...path, \"pageInfo\"];\n  set(response1, pageInfoPath, get(response2, pageInfoPath));\n  return response1;\n};\n\n// pkg/dist-src/paginate.js\nvar createPaginate = (octokit) => {\n  const iterator = createIterator(octokit);\n  return async (query, initialParameters = {}) => {\n    let mergedResponse = {};\n    for await (const response of iterator(\n      query,\n      initialParameters\n    )) {\n      mergedResponse = mergeResponses(mergedResponse, response);\n    }\n    return mergedResponse;\n  };\n};\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/index.js\nfunction paginateGraphQL(octokit) {\n  return {\n    graphql: Object.assign(octokit.graphql, {\n      paginate: Object.assign(createPaginate(octokit), {\n        iterator: createIterator(octokit)\n      })\n    })\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-paginate-graphql/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composePaginateRest: () => (/* binding */ composePaginateRest),\n/* harmony export */   isPaginatingEndpoint: () => (/* binding */ isPaginatingEndpoint),\n/* harmony export */   paginateRest: () => (/* binding */ paginateRest),\n/* harmony export */   paginatingEndpoints: () => (/* binding */ paginatingEndpoints)\n/* harmony export */ });\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/normalize-paginated-list-response.js\nfunction normalizePaginatedListResponse(response) {\n  if (!response.data) {\n    return {\n      ...response,\n      data: []\n    };\n  }\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response;\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n  response.data.total_count = totalCount;\n  return response;\n}\n\n// pkg/dist-src/iterator.js\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return { done: true };\n        try {\n          const response = await requestMethod({ method, url, headers });\n          const normalizedResponse = normalizePaginatedListResponse(response);\n          url = ((normalizedResponse.headers.link || \"\").match(\n            /<([^>]+)>;\\s*rel=\"next\"/\n          ) || [])[1];\n          return { value: normalizedResponse };\n        } catch (error) {\n          if (error.status !== 409) throw error;\n          url = \"\";\n          return {\n            value: {\n              status: 200,\n              headers: {},\n              data: []\n            }\n          };\n        }\n      }\n    })\n  };\n}\n\n// pkg/dist-src/paginate.js\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = void 0;\n  }\n  return gather(\n    octokit,\n    [],\n    iterator(octokit, route, parameters)[Symbol.asyncIterator](),\n    mapFn\n  );\n}\nfunction gather(octokit, results, iterator2, mapFn) {\n  return iterator2.next().then((result) => {\n    if (result.done) {\n      return results;\n    }\n    let earlyExit = false;\n    function done() {\n      earlyExit = true;\n    }\n    results = results.concat(\n      mapFn ? mapFn(result.value, done) : result.value.data\n    );\n    if (earlyExit) {\n      return results;\n    }\n    return gather(octokit, results, iterator2, mapFn);\n  });\n}\n\n// pkg/dist-src/compose-paginate.js\nvar composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n\n// pkg/dist-src/generated/paginating-endpoints.js\nvar paginatingEndpoints = [\n  \"GET /advisories\",\n  \"GET /app/hook/deliveries\",\n  \"GET /app/installation-requests\",\n  \"GET /app/installations\",\n  \"GET /assignments/{assignment_id}/accepted_assignments\",\n  \"GET /classrooms\",\n  \"GET /classrooms/{classroom_id}/assignments\",\n  \"GET /enterprises/{enterprise}/copilot/usage\",\n  \"GET /enterprises/{enterprise}/dependabot/alerts\",\n  \"GET /enterprises/{enterprise}/secret-scanning/alerts\",\n  \"GET /events\",\n  \"GET /gists\",\n  \"GET /gists/public\",\n  \"GET /gists/starred\",\n  \"GET /gists/{gist_id}/comments\",\n  \"GET /gists/{gist_id}/commits\",\n  \"GET /gists/{gist_id}/forks\",\n  \"GET /installation/repositories\",\n  \"GET /issues\",\n  \"GET /licenses\",\n  \"GET /marketplace_listing/plans\",\n  \"GET /marketplace_listing/plans/{plan_id}/accounts\",\n  \"GET /marketplace_listing/stubbed/plans\",\n  \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n  \"GET /networks/{owner}/{repo}/events\",\n  \"GET /notifications\",\n  \"GET /organizations\",\n  \"GET /orgs/{org}/actions/cache/usage-by-repository\",\n  \"GET /orgs/{org}/actions/permissions/repositories\",\n  \"GET /orgs/{org}/actions/runners\",\n  \"GET /orgs/{org}/actions/secrets\",\n  \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/actions/variables\",\n  \"GET /orgs/{org}/actions/variables/{name}/repositories\",\n  \"GET /orgs/{org}/blocks\",\n  \"GET /orgs/{org}/code-scanning/alerts\",\n  \"GET /orgs/{org}/codespaces\",\n  \"GET /orgs/{org}/codespaces/secrets\",\n  \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/copilot/billing/seats\",\n  \"GET /orgs/{org}/copilot/usage\",\n  \"GET /orgs/{org}/dependabot/alerts\",\n  \"GET /orgs/{org}/dependabot/secrets\",\n  \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/events\",\n  \"GET /orgs/{org}/failed_invitations\",\n  \"GET /orgs/{org}/hooks\",\n  \"GET /orgs/{org}/hooks/{hook_id}/deliveries\",\n  \"GET /orgs/{org}/installations\",\n  \"GET /orgs/{org}/invitations\",\n  \"GET /orgs/{org}/invitations/{invitation_id}/teams\",\n  \"GET /orgs/{org}/issues\",\n  \"GET /orgs/{org}/members\",\n  \"GET /orgs/{org}/members/{username}/codespaces\",\n  \"GET /orgs/{org}/migrations\",\n  \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/teams\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/users\",\n  \"GET /orgs/{org}/outside_collaborators\",\n  \"GET /orgs/{org}/packages\",\n  \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n  \"GET /orgs/{org}/personal-access-token-requests\",\n  \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\",\n  \"GET /orgs/{org}/personal-access-tokens\",\n  \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\",\n  \"GET /orgs/{org}/projects\",\n  \"GET /orgs/{org}/properties/values\",\n  \"GET /orgs/{org}/public_members\",\n  \"GET /orgs/{org}/repos\",\n  \"GET /orgs/{org}/rulesets\",\n  \"GET /orgs/{org}/rulesets/rule-suites\",\n  \"GET /orgs/{org}/secret-scanning/alerts\",\n  \"GET /orgs/{org}/security-advisories\",\n  \"GET /orgs/{org}/team/{team_slug}/copilot/usage\",\n  \"GET /orgs/{org}/teams\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n  \"GET /orgs/{org}/teams/{team_slug}/members\",\n  \"GET /orgs/{org}/teams/{team_slug}/projects\",\n  \"GET /orgs/{org}/teams/{team_slug}/repos\",\n  \"GET /orgs/{org}/teams/{team_slug}/teams\",\n  \"GET /projects/columns/{column_id}/cards\",\n  \"GET /projects/{project_id}/collaborators\",\n  \"GET /projects/{project_id}/columns\",\n  \"GET /repos/{owner}/{repo}/actions/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/caches\",\n  \"GET /repos/{owner}/{repo}/actions/organization-secrets\",\n  \"GET /repos/{owner}/{repo}/actions/organization-variables\",\n  \"GET /repos/{owner}/{repo}/actions/runners\",\n  \"GET /repos/{owner}/{repo}/actions/runs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/secrets\",\n  \"GET /repos/{owner}/{repo}/actions/variables\",\n  \"GET /repos/{owner}/{repo}/actions/workflows\",\n  \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n  \"GET /repos/{owner}/{repo}/activity\",\n  \"GET /repos/{owner}/{repo}/assignees\",\n  \"GET /repos/{owner}/{repo}/branches\",\n  \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n  \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n  \"GET /repos/{owner}/{repo}/code-scanning/analyses\",\n  \"GET /repos/{owner}/{repo}/codespaces\",\n  \"GET /repos/{owner}/{repo}/codespaces/devcontainers\",\n  \"GET /repos/{owner}/{repo}/codespaces/secrets\",\n  \"GET /repos/{owner}/{repo}/collaborators\",\n  \"GET /repos/{owner}/{repo}/comments\",\n  \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/commits\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/status\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n  \"GET /repos/{owner}/{repo}/contributors\",\n  \"GET /repos/{owner}/{repo}/dependabot/alerts\",\n  \"GET /repos/{owner}/{repo}/dependabot/secrets\",\n  \"GET /repos/{owner}/{repo}/deployments\",\n  \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n  \"GET /repos/{owner}/{repo}/environments\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables\",\n  \"GET /repos/{owner}/{repo}/events\",\n  \"GET /repos/{owner}/{repo}/forks\",\n  \"GET /repos/{owner}/{repo}/hooks\",\n  \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\",\n  \"GET /repos/{owner}/{repo}/invitations\",\n  \"GET /repos/{owner}/{repo}/issues\",\n  \"GET /repos/{owner}/{repo}/issues/comments\",\n  \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n  \"GET /repos/{owner}/{repo}/keys\",\n  \"GET /repos/{owner}/{repo}/labels\",\n  \"GET /repos/{owner}/{repo}/milestones\",\n  \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n  \"GET /repos/{owner}/{repo}/notifications\",\n  \"GET /repos/{owner}/{repo}/pages/builds\",\n  \"GET /repos/{owner}/{repo}/projects\",\n  \"GET /repos/{owner}/{repo}/pulls\",\n  \"GET /repos/{owner}/{repo}/pulls/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n  \"GET /repos/{owner}/{repo}/releases\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/rules/branches/{branch}\",\n  \"GET /repos/{owner}/{repo}/rulesets\",\n  \"GET /repos/{owner}/{repo}/rulesets/rule-suites\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\",\n  \"GET /repos/{owner}/{repo}/security-advisories\",\n  \"GET /repos/{owner}/{repo}/stargazers\",\n  \"GET /repos/{owner}/{repo}/subscribers\",\n  \"GET /repos/{owner}/{repo}/tags\",\n  \"GET /repos/{owner}/{repo}/teams\",\n  \"GET /repos/{owner}/{repo}/topics\",\n  \"GET /repositories\",\n  \"GET /search/code\",\n  \"GET /search/commits\",\n  \"GET /search/issues\",\n  \"GET /search/labels\",\n  \"GET /search/repositories\",\n  \"GET /search/topics\",\n  \"GET /search/users\",\n  \"GET /teams/{team_id}/discussions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\",\n  \"GET /teams/{team_id}/invitations\",\n  \"GET /teams/{team_id}/members\",\n  \"GET /teams/{team_id}/projects\",\n  \"GET /teams/{team_id}/repos\",\n  \"GET /teams/{team_id}/teams\",\n  \"GET /user/blocks\",\n  \"GET /user/codespaces\",\n  \"GET /user/codespaces/secrets\",\n  \"GET /user/emails\",\n  \"GET /user/followers\",\n  \"GET /user/following\",\n  \"GET /user/gpg_keys\",\n  \"GET /user/installations\",\n  \"GET /user/installations/{installation_id}/repositories\",\n  \"GET /user/issues\",\n  \"GET /user/keys\",\n  \"GET /user/marketplace_purchases\",\n  \"GET /user/marketplace_purchases/stubbed\",\n  \"GET /user/memberships/orgs\",\n  \"GET /user/migrations\",\n  \"GET /user/migrations/{migration_id}/repositories\",\n  \"GET /user/orgs\",\n  \"GET /user/packages\",\n  \"GET /user/packages/{package_type}/{package_name}/versions\",\n  \"GET /user/public_emails\",\n  \"GET /user/repos\",\n  \"GET /user/repository_invitations\",\n  \"GET /user/social_accounts\",\n  \"GET /user/ssh_signing_keys\",\n  \"GET /user/starred\",\n  \"GET /user/subscriptions\",\n  \"GET /user/teams\",\n  \"GET /users\",\n  \"GET /users/{username}/events\",\n  \"GET /users/{username}/events/orgs/{org}\",\n  \"GET /users/{username}/events/public\",\n  \"GET /users/{username}/followers\",\n  \"GET /users/{username}/following\",\n  \"GET /users/{username}/gists\",\n  \"GET /users/{username}/gpg_keys\",\n  \"GET /users/{username}/keys\",\n  \"GET /users/{username}/orgs\",\n  \"GET /users/{username}/packages\",\n  \"GET /users/{username}/projects\",\n  \"GET /users/{username}/received_events\",\n  \"GET /users/{username}/received_events/public\",\n  \"GET /users/{username}/repos\",\n  \"GET /users/{username}/social_accounts\",\n  \"GET /users/{username}/ssh_signing_keys\",\n  \"GET /users/{username}/starred\",\n  \"GET /users/{username}/subscriptions\"\n];\n\n// pkg/dist-src/paginating-endpoints.js\nfunction isPaginatingEndpoint(arg) {\n  if (typeof arg === \"string\") {\n    return paginatingEndpoints.includes(arg);\n  } else {\n    return false;\n  }\n}\n\n// pkg/dist-src/index.js\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\npaginateRest.VERSION = VERSION;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   endpointsToMethods: () => (/* binding */ endpointsToMethods)\n/* harmony export */ });\n/* harmony import */ var _generated_endpoints_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/endpoints.js */ \"(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js\");\n\nconst endpointMethodsMap = /* @__PURE__ */ new Map();\nfor (const [scope, endpoints] of Object.entries(_generated_endpoints_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n  for (const [methodName, endpoint] of Object.entries(endpoints)) {\n    const [route, defaults, decorations] = endpoint;\n    const [method, url] = route.split(/ /);\n    const endpointDefaults = Object.assign(\n      {\n        method,\n        url\n      },\n      defaults\n    );\n    if (!endpointMethodsMap.has(scope)) {\n      endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());\n    }\n    endpointMethodsMap.get(scope).set(methodName, {\n      scope,\n      methodName,\n      endpointDefaults,\n      decorations\n    });\n  }\n}\nconst handler = {\n  has({ scope }, methodName) {\n    return endpointMethodsMap.get(scope).has(methodName);\n  },\n  getOwnPropertyDescriptor(target, methodName) {\n    return {\n      value: this.get(target, methodName),\n      // ensures method is in the cache\n      configurable: true,\n      writable: true,\n      enumerable: true\n    };\n  },\n  defineProperty(target, methodName, descriptor) {\n    Object.defineProperty(target.cache, methodName, descriptor);\n    return true;\n  },\n  deleteProperty(target, methodName) {\n    delete target.cache[methodName];\n    return true;\n  },\n  ownKeys({ scope }) {\n    return [...endpointMethodsMap.get(scope).keys()];\n  },\n  set(target, methodName, value) {\n    return target.cache[methodName] = value;\n  },\n  get({ octokit, scope, cache }, methodName) {\n    if (cache[methodName]) {\n      return cache[methodName];\n    }\n    const method = endpointMethodsMap.get(scope).get(methodName);\n    if (!method) {\n      return void 0;\n    }\n    const { endpointDefaults, decorations } = method;\n    if (decorations) {\n      cache[methodName] = decorate(\n        octokit,\n        scope,\n        methodName,\n        endpointDefaults,\n        decorations\n      );\n    } else {\n      cache[methodName] = octokit.request.defaults(endpointDefaults);\n    }\n    return cache[methodName];\n  }\n};\nfunction endpointsToMethods(octokit) {\n  const newMethods = {};\n  for (const scope of endpointMethodsMap.keys()) {\n    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);\n  }\n  return newMethods;\n}\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n  const requestWithDefaults = octokit.request.defaults(defaults);\n  function withDecorations(...args) {\n    let options = requestWithDefaults.endpoint.merge(...args);\n    if (decorations.mapToData) {\n      options = Object.assign({}, options, {\n        data: options[decorations.mapToData],\n        [decorations.mapToData]: void 0\n      });\n      return requestWithDefaults(options);\n    }\n    if (decorations.renamed) {\n      const [newScope, newMethodName] = decorations.renamed;\n      octokit.log.warn(\n        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`\n      );\n    }\n    if (decorations.deprecated) {\n      octokit.log.warn(decorations.deprecated);\n    }\n    if (decorations.renamedParameters) {\n      const options2 = requestWithDefaults.endpoint.merge(...args);\n      for (const [name, alias] of Object.entries(\n        decorations.renamedParameters\n      )) {\n        if (name in options2) {\n          octokit.log.warn(\n            `\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`\n          );\n          if (!(alias in options2)) {\n            options2[alias] = options2[name];\n          }\n          delete options2[name];\n        }\n      }\n      return requestWithDefaults(options2);\n    }\n    return requestWithDefaults(...args);\n  }\n  return Object.assign(withDecorations, requestWithDefaults);\n}\n\n//# sourceMappingURL=endpoints-to-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kcy9kaXN0LXNyYy9lbmRwb2ludHMtdG8tbWV0aG9kcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNqRDtBQUNBLGdEQUFnRCwrREFBUztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMkJBQTJCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE1BQU0sR0FBRyxXQUFXLGlDQUFpQyxTQUFTLEdBQUcsY0FBYztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSyx5Q0FBeUMsTUFBTSxHQUFHLFdBQVcsWUFBWSxNQUFNO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9wbHVnaW4tcmVzdC1lbmRwb2ludC1tZXRob2RzL2Rpc3Qtc3JjL2VuZHBvaW50cy10by1tZXRob2RzLmpzP2ZkNTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVORFBPSU5UUyBmcm9tIFwiLi9nZW5lcmF0ZWQvZW5kcG9pbnRzLmpzXCI7XG5jb25zdCBlbmRwb2ludE1ldGhvZHNNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZm9yIChjb25zdCBbc2NvcGUsIGVuZHBvaW50c10gb2YgT2JqZWN0LmVudHJpZXMoRU5EUE9JTlRTKSkge1xuICBmb3IgKGNvbnN0IFttZXRob2ROYW1lLCBlbmRwb2ludF0gb2YgT2JqZWN0LmVudHJpZXMoZW5kcG9pbnRzKSkge1xuICAgIGNvbnN0IFtyb3V0ZSwgZGVmYXVsdHMsIGRlY29yYXRpb25zXSA9IGVuZHBvaW50O1xuICAgIGNvbnN0IFttZXRob2QsIHVybF0gPSByb3V0ZS5zcGxpdCgvIC8pO1xuICAgIGNvbnN0IGVuZHBvaW50RGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIHVybFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHRzXG4gICAgKTtcbiAgICBpZiAoIWVuZHBvaW50TWV0aG9kc01hcC5oYXMoc2NvcGUpKSB7XG4gICAgICBlbmRwb2ludE1ldGhvZHNNYXAuc2V0KHNjb3BlLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICB9XG4gICAgZW5kcG9pbnRNZXRob2RzTWFwLmdldChzY29wZSkuc2V0KG1ldGhvZE5hbWUsIHtcbiAgICAgIHNjb3BlLFxuICAgICAgbWV0aG9kTmFtZSxcbiAgICAgIGVuZHBvaW50RGVmYXVsdHMsXG4gICAgICBkZWNvcmF0aW9uc1xuICAgIH0pO1xuICB9XG59XG5jb25zdCBoYW5kbGVyID0ge1xuICBoYXMoeyBzY29wZSB9LCBtZXRob2ROYW1lKSB7XG4gICAgcmV0dXJuIGVuZHBvaW50TWV0aG9kc01hcC5nZXQoc2NvcGUpLmhhcyhtZXRob2ROYW1lKTtcbiAgfSxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbWV0aG9kTmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdGhpcy5nZXQodGFyZ2V0LCBtZXRob2ROYW1lKSxcbiAgICAgIC8vIGVuc3VyZXMgbWV0aG9kIGlzIGluIHRoZSBjYWNoZVxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBtZXRob2ROYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldC5jYWNoZSwgbWV0aG9kTmFtZSwgZGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgbWV0aG9kTmFtZSkge1xuICAgIGRlbGV0ZSB0YXJnZXQuY2FjaGVbbWV0aG9kTmFtZV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXMoeyBzY29wZSB9KSB7XG4gICAgcmV0dXJuIFsuLi5lbmRwb2ludE1ldGhvZHNNYXAuZ2V0KHNjb3BlKS5rZXlzKCldO1xuICB9LFxuICBzZXQodGFyZ2V0LCBtZXRob2ROYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXQuY2FjaGVbbWV0aG9kTmFtZV0gPSB2YWx1ZTtcbiAgfSxcbiAgZ2V0KHsgb2N0b2tpdCwgc2NvcGUsIGNhY2hlIH0sIG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoY2FjaGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgIHJldHVybiBjYWNoZVttZXRob2ROYW1lXTtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gZW5kcG9pbnRNZXRob2RzTWFwLmdldChzY29wZSkuZ2V0KG1ldGhvZE5hbWUpO1xuICAgIGlmICghbWV0aG9kKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBjb25zdCB7IGVuZHBvaW50RGVmYXVsdHMsIGRlY29yYXRpb25zIH0gPSBtZXRob2Q7XG4gICAgaWYgKGRlY29yYXRpb25zKSB7XG4gICAgICBjYWNoZVttZXRob2ROYW1lXSA9IGRlY29yYXRlKFxuICAgICAgICBvY3Rva2l0LFxuICAgICAgICBzY29wZSxcbiAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgZW5kcG9pbnREZWZhdWx0cyxcbiAgICAgICAgZGVjb3JhdGlvbnNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlW21ldGhvZE5hbWVdID0gb2N0b2tpdC5yZXF1ZXN0LmRlZmF1bHRzKGVuZHBvaW50RGVmYXVsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbbWV0aG9kTmFtZV07XG4gIH1cbn07XG5mdW5jdGlvbiBlbmRwb2ludHNUb01ldGhvZHMob2N0b2tpdCkge1xuICBjb25zdCBuZXdNZXRob2RzID0ge307XG4gIGZvciAoY29uc3Qgc2NvcGUgb2YgZW5kcG9pbnRNZXRob2RzTWFwLmtleXMoKSkge1xuICAgIG5ld01ldGhvZHNbc2NvcGVdID0gbmV3IFByb3h5KHsgb2N0b2tpdCwgc2NvcGUsIGNhY2hlOiB7fSB9LCBoYW5kbGVyKTtcbiAgfVxuICByZXR1cm4gbmV3TWV0aG9kcztcbn1cbmZ1bmN0aW9uIGRlY29yYXRlKG9jdG9raXQsIHNjb3BlLCBtZXRob2ROYW1lLCBkZWZhdWx0cywgZGVjb3JhdGlvbnMpIHtcbiAgY29uc3QgcmVxdWVzdFdpdGhEZWZhdWx0cyA9IG9jdG9raXQucmVxdWVzdC5kZWZhdWx0cyhkZWZhdWx0cyk7XG4gIGZ1bmN0aW9uIHdpdGhEZWNvcmF0aW9ucyguLi5hcmdzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSByZXF1ZXN0V2l0aERlZmF1bHRzLmVuZHBvaW50Lm1lcmdlKC4uLmFyZ3MpO1xuICAgIGlmIChkZWNvcmF0aW9ucy5tYXBUb0RhdGEpIHtcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIGRhdGE6IG9wdGlvbnNbZGVjb3JhdGlvbnMubWFwVG9EYXRhXSxcbiAgICAgICAgW2RlY29yYXRpb25zLm1hcFRvRGF0YV06IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWVzdFdpdGhEZWZhdWx0cyhvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKGRlY29yYXRpb25zLnJlbmFtZWQpIHtcbiAgICAgIGNvbnN0IFtuZXdTY29wZSwgbmV3TWV0aG9kTmFtZV0gPSBkZWNvcmF0aW9ucy5yZW5hbWVkO1xuICAgICAgb2N0b2tpdC5sb2cud2FybihcbiAgICAgICAgYG9jdG9raXQuJHtzY29wZX0uJHttZXRob2ROYW1lfSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gb2N0b2tpdC4ke25ld1Njb3BlfS4ke25ld01ldGhvZE5hbWV9KClgXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGVjb3JhdGlvbnMuZGVwcmVjYXRlZCkge1xuICAgICAgb2N0b2tpdC5sb2cud2FybihkZWNvcmF0aW9ucy5kZXByZWNhdGVkKTtcbiAgICB9XG4gICAgaWYgKGRlY29yYXRpb25zLnJlbmFtZWRQYXJhbWV0ZXJzKSB7XG4gICAgICBjb25zdCBvcHRpb25zMiA9IHJlcXVlc3RXaXRoRGVmYXVsdHMuZW5kcG9pbnQubWVyZ2UoLi4uYXJncyk7XG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBhbGlhc10gb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICAgIGRlY29yYXRpb25zLnJlbmFtZWRQYXJhbWV0ZXJzXG4gICAgICApKSB7XG4gICAgICAgIGlmIChuYW1lIGluIG9wdGlvbnMyKSB7XG4gICAgICAgICAgb2N0b2tpdC5sb2cud2FybihcbiAgICAgICAgICAgIGBcIiR7bmFtZX1cIiBwYXJhbWV0ZXIgaXMgZGVwcmVjYXRlZCBmb3IgXCJvY3Rva2l0LiR7c2NvcGV9LiR7bWV0aG9kTmFtZX0oKVwiLiBVc2UgXCIke2FsaWFzfVwiIGluc3RlYWRgXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIShhbGlhcyBpbiBvcHRpb25zMikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMyW2FsaWFzXSA9IG9wdGlvbnMyW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgb3B0aW9uczJbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXF1ZXN0V2l0aERlZmF1bHRzKG9wdGlvbnMyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3RXaXRoRGVmYXVsdHMoLi4uYXJncyk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24od2l0aERlY29yYXRpb25zLCByZXF1ZXN0V2l0aERlZmF1bHRzKTtcbn1cbmV4cG9ydCB7XG4gIGVuZHBvaW50c1RvTWV0aG9kc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuZHBvaW50cy10by1tZXRob2RzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ endpoints_default)\n/* harmony export */ });\nconst Endpoints = {\n  actions: {\n    addCustomLabelsToSelfHostedRunnerForOrg: [\n      \"POST /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    addCustomLabelsToSelfHostedRunnerForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    addSelectedRepoToOrgVariable: [\n      \"PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n    ],\n    approveWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve\"\n    ],\n    cancelWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"\n    ],\n    createEnvironmentVariable: [\n      \"POST /repos/{owner}/{repo}/environments/{environment_name}/variables\"\n    ],\n    createOrUpdateEnvironmentSecret: [\n      \"PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n    ],\n    createOrgVariable: [\"POST /orgs/{org}/actions/variables\"],\n    createRegistrationTokenForOrg: [\n      \"POST /orgs/{org}/actions/runners/registration-token\"\n    ],\n    createRegistrationTokenForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/registration-token\"\n    ],\n    createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n    createRemoveTokenForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/remove-token\"\n    ],\n    createRepoVariable: [\"POST /repos/{owner}/{repo}/actions/variables\"],\n    createWorkflowDispatch: [\n      \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"\n    ],\n    deleteActionsCacheById: [\n      \"DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}\"\n    ],\n    deleteActionsCacheByKey: [\n      \"DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}\"\n    ],\n    deleteArtifact: [\n      \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"\n    ],\n    deleteEnvironmentSecret: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    deleteEnvironmentVariable: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n    deleteOrgVariable: [\"DELETE /orgs/{org}/actions/variables/{name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n    ],\n    deleteRepoVariable: [\n      \"DELETE /repos/{owner}/{repo}/actions/variables/{name}\"\n    ],\n    deleteSelfHostedRunnerFromOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}\"\n    ],\n    deleteSelfHostedRunnerFromRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n    ],\n    deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    deleteWorkflowRunLogs: [\n      \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n    ],\n    disableSelectedRepositoryGithubActionsOrganization: [\n      \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n    ],\n    disableWorkflow: [\n      \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"\n    ],\n    downloadArtifact: [\n      \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"\n    ],\n    downloadJobLogsForWorkflowRun: [\n      \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"\n    ],\n    downloadWorkflowRunAttemptLogs: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs\"\n    ],\n    downloadWorkflowRunLogs: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n    ],\n    enableSelectedRepositoryGithubActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n    ],\n    enableWorkflow: [\n      \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"\n    ],\n    forceCancelWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel\"\n    ],\n    generateRunnerJitconfigForOrg: [\n      \"POST /orgs/{org}/actions/runners/generate-jitconfig\"\n    ],\n    generateRunnerJitconfigForRepo: [\n      \"POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig\"\n    ],\n    getActionsCacheList: [\"GET /repos/{owner}/{repo}/actions/caches\"],\n    getActionsCacheUsage: [\"GET /repos/{owner}/{repo}/actions/cache/usage\"],\n    getActionsCacheUsageByRepoForOrg: [\n      \"GET /orgs/{org}/actions/cache/usage-by-repository\"\n    ],\n    getActionsCacheUsageForOrg: [\"GET /orgs/{org}/actions/cache/usage\"],\n    getAllowedActionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/selected-actions\"\n    ],\n    getAllowedActionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n    ],\n    getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    getCustomOidcSubClaimForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n    ],\n    getEnvironmentPublicKey: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key\"\n    ],\n    getEnvironmentSecret: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n    ],\n    getEnvironmentVariable: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n    ],\n    getGithubActionsDefaultWorkflowPermissionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/workflow\"\n    ],\n    getGithubActionsDefaultWorkflowPermissionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/workflow\"\n    ],\n    getGithubActionsPermissionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions\"\n    ],\n    getGithubActionsPermissionsRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions\"\n    ],\n    getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n    getOrgVariable: [\"GET /orgs/{org}/actions/variables/{name}\"],\n    getPendingDeploymentsForRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n    ],\n    getRepoPermissions: [\n      \"GET /repos/{owner}/{repo}/actions/permissions\",\n      {},\n      { renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"] }\n    ],\n    getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n    getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    getRepoVariable: [\"GET /repos/{owner}/{repo}/actions/variables/{name}\"],\n    getReviewsForRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals\"\n    ],\n    getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n    getSelfHostedRunnerForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n    ],\n    getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n    getWorkflowAccessToRepository: [\n      \"GET /repos/{owner}/{repo}/actions/permissions/access\"\n    ],\n    getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    getWorkflowRunAttempt: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}\"\n    ],\n    getWorkflowRunUsage: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"\n    ],\n    getWorkflowUsage: [\n      \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"\n    ],\n    listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n    listEnvironmentSecrets: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets\"\n    ],\n    listEnvironmentVariables: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables\"\n    ],\n    listJobsForWorkflowRun: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"\n    ],\n    listJobsForWorkflowRunAttempt: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\"\n    ],\n    listLabelsForSelfHostedRunnerForOrg: [\n      \"GET /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    listLabelsForSelfHostedRunnerForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n    listOrgVariables: [\"GET /orgs/{org}/actions/variables\"],\n    listRepoOrganizationSecrets: [\n      \"GET /repos/{owner}/{repo}/actions/organization-secrets\"\n    ],\n    listRepoOrganizationVariables: [\n      \"GET /repos/{owner}/{repo}/actions/organization-variables\"\n    ],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n    listRepoVariables: [\"GET /repos/{owner}/{repo}/actions/variables\"],\n    listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n    listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n    listRunnerApplicationsForRepo: [\n      \"GET /repos/{owner}/{repo}/actions/runners/downloads\"\n    ],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n    ],\n    listSelectedReposForOrgVariable: [\n      \"GET /orgs/{org}/actions/variables/{name}/repositories\"\n    ],\n    listSelectedRepositoriesEnabledGithubActionsOrganization: [\n      \"GET /orgs/{org}/actions/permissions/repositories\"\n    ],\n    listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n    listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n    listWorkflowRunArtifacts: [\n      \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"\n    ],\n    listWorkflowRuns: [\n      \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"\n    ],\n    listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n    reRunJobForWorkflowRun: [\n      \"POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun\"\n    ],\n    reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n    reRunWorkflowFailedJobs: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs\"\n    ],\n    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    removeCustomLabelFromSelfHostedRunnerForOrg: [\n      \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}\"\n    ],\n    removeCustomLabelFromSelfHostedRunnerForRepo: [\n      \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    removeSelectedRepoFromOrgVariable: [\n      \"DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n    ],\n    reviewCustomGatesForRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule\"\n    ],\n    reviewPendingDeploymentsForRun: [\n      \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n    ],\n    setAllowedActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/selected-actions\"\n    ],\n    setAllowedActionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n    ],\n    setCustomLabelsForSelfHostedRunnerForOrg: [\n      \"PUT /orgs/{org}/actions/runners/{runner_id}/labels\"\n    ],\n    setCustomLabelsForSelfHostedRunnerForRepo: [\n      \"PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n    ],\n    setCustomOidcSubClaimForRepo: [\n      \"PUT /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n    ],\n    setGithubActionsDefaultWorkflowPermissionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/workflow\"\n    ],\n    setGithubActionsDefaultWorkflowPermissionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/workflow\"\n    ],\n    setGithubActionsPermissionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions\"\n    ],\n    setGithubActionsPermissionsRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n    ],\n    setSelectedReposForOrgVariable: [\n      \"PUT /orgs/{org}/actions/variables/{name}/repositories\"\n    ],\n    setSelectedRepositoriesEnabledGithubActionsOrganization: [\n      \"PUT /orgs/{org}/actions/permissions/repositories\"\n    ],\n    setWorkflowAccessToRepository: [\n      \"PUT /repos/{owner}/{repo}/actions/permissions/access\"\n    ],\n    updateEnvironmentVariable: [\n      \"PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n    ],\n    updateOrgVariable: [\"PATCH /orgs/{org}/actions/variables/{name}\"],\n    updateRepoVariable: [\n      \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\"\n    ]\n  },\n  activity: {\n    checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n    deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n    deleteThreadSubscription: [\n      \"DELETE /notifications/threads/{thread_id}/subscription\"\n    ],\n    getFeeds: [\"GET /feeds\"],\n    getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n    getThread: [\"GET /notifications/threads/{thread_id}\"],\n    getThreadSubscriptionForAuthenticatedUser: [\n      \"GET /notifications/threads/{thread_id}/subscription\"\n    ],\n    listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n    listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n    listOrgEventsForAuthenticatedUser: [\n      \"GET /users/{username}/events/orgs/{org}\"\n    ],\n    listPublicEvents: [\"GET /events\"],\n    listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n    listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n    listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n    listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n    listReceivedPublicEventsForUser: [\n      \"GET /users/{username}/received_events/public\"\n    ],\n    listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n    listRepoNotificationsForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/notifications\"\n    ],\n    listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n    listReposStarredByUser: [\"GET /users/{username}/starred\"],\n    listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n    listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n    listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n    listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n    markNotificationsAsRead: [\"PUT /notifications\"],\n    markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n    markThreadAsDone: [\"DELETE /notifications/threads/{thread_id}\"],\n    markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n    setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n    setThreadSubscription: [\n      \"PUT /notifications/threads/{thread_id}/subscription\"\n    ],\n    starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n    unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"]\n  },\n  apps: {\n    addRepoToInstallation: [\n      \"PUT /user/installations/{installation_id}/repositories/{repository_id}\",\n      {},\n      { renamed: [\"apps\", \"addRepoToInstallationForAuthenticatedUser\"] }\n    ],\n    addRepoToInstallationForAuthenticatedUser: [\n      \"PUT /user/installations/{installation_id}/repositories/{repository_id}\"\n    ],\n    checkToken: [\"POST /applications/{client_id}/token\"],\n    createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n    createInstallationAccessToken: [\n      \"POST /app/installations/{installation_id}/access_tokens\"\n    ],\n    deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n    deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n    deleteToken: [\"DELETE /applications/{client_id}/token\"],\n    getAuthenticated: [\"GET /app\"],\n    getBySlug: [\"GET /apps/{app_slug}\"],\n    getInstallation: [\"GET /app/installations/{installation_id}\"],\n    getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n    getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n    getSubscriptionPlanForAccount: [\n      \"GET /marketplace_listing/accounts/{account_id}\"\n    ],\n    getSubscriptionPlanForAccountStubbed: [\n      \"GET /marketplace_listing/stubbed/accounts/{account_id}\"\n    ],\n    getUserInstallation: [\"GET /users/{username}/installation\"],\n    getWebhookConfigForApp: [\"GET /app/hook/config\"],\n    getWebhookDelivery: [\"GET /app/hook/deliveries/{delivery_id}\"],\n    listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n    listAccountsForPlanStubbed: [\n      \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"\n    ],\n    listInstallationReposForAuthenticatedUser: [\n      \"GET /user/installations/{installation_id}/repositories\"\n    ],\n    listInstallationRequestsForAuthenticatedApp: [\n      \"GET /app/installation-requests\"\n    ],\n    listInstallations: [\"GET /app/installations\"],\n    listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n    listPlans: [\"GET /marketplace_listing/plans\"],\n    listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n    listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n    listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n    listSubscriptionsForAuthenticatedUserStubbed: [\n      \"GET /user/marketplace_purchases/stubbed\"\n    ],\n    listWebhookDeliveries: [\"GET /app/hook/deliveries\"],\n    redeliverWebhookDelivery: [\n      \"POST /app/hook/deliveries/{delivery_id}/attempts\"\n    ],\n    removeRepoFromInstallation: [\n      \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\",\n      {},\n      { renamed: [\"apps\", \"removeRepoFromInstallationForAuthenticatedUser\"] }\n    ],\n    removeRepoFromInstallationForAuthenticatedUser: [\n      \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"\n    ],\n    resetToken: [\"PATCH /applications/{client_id}/token\"],\n    revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n    scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n    suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n    unsuspendInstallation: [\n      \"DELETE /app/installations/{installation_id}/suspended\"\n    ],\n    updateWebhookConfigForApp: [\"PATCH /app/hook/config\"]\n  },\n  billing: {\n    getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n    getGithubActionsBillingUser: [\n      \"GET /users/{username}/settings/billing/actions\"\n    ],\n    getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n    getGithubPackagesBillingUser: [\n      \"GET /users/{username}/settings/billing/packages\"\n    ],\n    getSharedStorageBillingOrg: [\n      \"GET /orgs/{org}/settings/billing/shared-storage\"\n    ],\n    getSharedStorageBillingUser: [\n      \"GET /users/{username}/settings/billing/shared-storage\"\n    ]\n  },\n  checks: {\n    create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n    createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n    get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n    listAnnotations: [\n      \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"\n    ],\n    listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n    listForSuite: [\n      \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"\n    ],\n    listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n    rerequestRun: [\n      \"POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest\"\n    ],\n    rerequestSuite: [\n      \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"\n    ],\n    setSuitesPreferences: [\n      \"PATCH /repos/{owner}/{repo}/check-suites/preferences\"\n    ],\n    update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"]\n  },\n  codeScanning: {\n    deleteAnalysis: [\n      \"DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}\"\n    ],\n    getAlert: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n      {},\n      { renamedParameters: { alert_id: \"alert_number\" } }\n    ],\n    getAnalysis: [\n      \"GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}\"\n    ],\n    getCodeqlDatabase: [\n      \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}\"\n    ],\n    getDefaultSetup: [\"GET /repos/{owner}/{repo}/code-scanning/default-setup\"],\n    getSarif: [\"GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}\"],\n    listAlertInstances: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/code-scanning/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n    listAlertsInstances: [\n      \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n      {},\n      { renamed: [\"codeScanning\", \"listAlertInstances\"] }\n    ],\n    listCodeqlDatabases: [\n      \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases\"\n    ],\n    listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"\n    ],\n    updateDefaultSetup: [\n      \"PATCH /repos/{owner}/{repo}/code-scanning/default-setup\"\n    ],\n    uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"]\n  },\n  codesOfConduct: {\n    getAllCodesOfConduct: [\"GET /codes_of_conduct\"],\n    getConductCode: [\"GET /codes_of_conduct/{key}\"]\n  },\n  codespaces: {\n    addRepositoryForSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    checkPermissionsForDevcontainer: [\n      \"GET /repos/{owner}/{repo}/codespaces/permissions_check\"\n    ],\n    codespaceMachinesForAuthenticatedUser: [\n      \"GET /user/codespaces/{codespace_name}/machines\"\n    ],\n    createForAuthenticatedUser: [\"POST /user/codespaces\"],\n    createOrUpdateOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}\"\n    ],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    createOrUpdateSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}\"\n    ],\n    createWithPrForAuthenticatedUser: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces\"\n    ],\n    createWithRepoForAuthenticatedUser: [\n      \"POST /repos/{owner}/{repo}/codespaces\"\n    ],\n    deleteForAuthenticatedUser: [\"DELETE /user/codespaces/{codespace_name}\"],\n    deleteFromOrganization: [\n      \"DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/codespaces/secrets/{secret_name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    deleteSecretForAuthenticatedUser: [\n      \"DELETE /user/codespaces/secrets/{secret_name}\"\n    ],\n    exportForAuthenticatedUser: [\n      \"POST /user/codespaces/{codespace_name}/exports\"\n    ],\n    getCodespacesForUserInOrg: [\n      \"GET /orgs/{org}/members/{username}/codespaces\"\n    ],\n    getExportDetailsForAuthenticatedUser: [\n      \"GET /user/codespaces/{codespace_name}/exports/{export_id}\"\n    ],\n    getForAuthenticatedUser: [\"GET /user/codespaces/{codespace_name}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/codespaces/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/codespaces/secrets/{secret_name}\"],\n    getPublicKeyForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/public-key\"\n    ],\n    getRepoPublicKey: [\n      \"GET /repos/{owner}/{repo}/codespaces/secrets/public-key\"\n    ],\n    getRepoSecret: [\n      \"GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n    ],\n    getSecretForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/{secret_name}\"\n    ],\n    listDevcontainersInRepositoryForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/devcontainers\"\n    ],\n    listForAuthenticatedUser: [\"GET /user/codespaces\"],\n    listInOrganization: [\n      \"GET /orgs/{org}/codespaces\",\n      {},\n      { renamedParameters: { org_id: \"org\" } }\n    ],\n    listInRepositoryForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces\"\n    ],\n    listOrgSecrets: [\"GET /orgs/{org}/codespaces/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/codespaces/secrets\"],\n    listRepositoriesForSecretForAuthenticatedUser: [\n      \"GET /user/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    listSecretsForAuthenticatedUser: [\"GET /user/codespaces/secrets\"],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    preFlightWithRepoForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/new\"\n    ],\n    publishForAuthenticatedUser: [\n      \"POST /user/codespaces/{codespace_name}/publish\"\n    ],\n    removeRepositoryForSecretForAuthenticatedUser: [\n      \"DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    repoMachinesForAuthenticatedUser: [\n      \"GET /repos/{owner}/{repo}/codespaces/machines\"\n    ],\n    setRepositoriesForSecretForAuthenticatedUser: [\n      \"PUT /user/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n    ],\n    startForAuthenticatedUser: [\"POST /user/codespaces/{codespace_name}/start\"],\n    stopForAuthenticatedUser: [\"POST /user/codespaces/{codespace_name}/stop\"],\n    stopInOrganization: [\n      \"POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop\"\n    ],\n    updateForAuthenticatedUser: [\"PATCH /user/codespaces/{codespace_name}\"]\n  },\n  copilot: {\n    addCopilotSeatsForTeams: [\n      \"POST /orgs/{org}/copilot/billing/selected_teams\"\n    ],\n    addCopilotSeatsForUsers: [\n      \"POST /orgs/{org}/copilot/billing/selected_users\"\n    ],\n    cancelCopilotSeatAssignmentForTeams: [\n      \"DELETE /orgs/{org}/copilot/billing/selected_teams\"\n    ],\n    cancelCopilotSeatAssignmentForUsers: [\n      \"DELETE /orgs/{org}/copilot/billing/selected_users\"\n    ],\n    getCopilotOrganizationDetails: [\"GET /orgs/{org}/copilot/billing\"],\n    getCopilotSeatDetailsForUser: [\n      \"GET /orgs/{org}/members/{username}/copilot\"\n    ],\n    listCopilotSeats: [\"GET /orgs/{org}/copilot/billing/seats\"],\n    usageMetricsForEnterprise: [\"GET /enterprises/{enterprise}/copilot/usage\"],\n    usageMetricsForOrg: [\"GET /orgs/{org}/copilot/usage\"],\n    usageMetricsForTeam: [\"GET /orgs/{org}/team/{team_slug}/copilot/usage\"]\n  },\n  dependabot: {\n    addSelectedRepoToOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    createOrUpdateOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}\"\n    ],\n    createOrUpdateRepoSecret: [\n      \"PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/dependabot/secrets/{secret_name}\"],\n    deleteRepoSecret: [\n      \"DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    getAlert: [\"GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/dependabot/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/dependabot/secrets/{secret_name}\"],\n    getRepoPublicKey: [\n      \"GET /repos/{owner}/{repo}/dependabot/secrets/public-key\"\n    ],\n    getRepoSecret: [\n      \"GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n    ],\n    listAlertsForEnterprise: [\n      \"GET /enterprises/{enterprise}/dependabot/alerts\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/dependabot/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/dependabot/alerts\"],\n    listOrgSecrets: [\"GET /orgs/{org}/dependabot/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/dependabot/secrets\"],\n    listSelectedReposForOrgSecret: [\n      \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n    ],\n    removeSelectedRepoFromOrgSecret: [\n      \"DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n    ],\n    setSelectedReposForOrgSecret: [\n      \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n    ],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"\n    ]\n  },\n  dependencyGraph: {\n    createRepositorySnapshot: [\n      \"POST /repos/{owner}/{repo}/dependency-graph/snapshots\"\n    ],\n    diffRange: [\n      \"GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}\"\n    ],\n    exportSbom: [\"GET /repos/{owner}/{repo}/dependency-graph/sbom\"]\n  },\n  emojis: { get: [\"GET /emojis\"] },\n  gists: {\n    checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n    create: [\"POST /gists\"],\n    createComment: [\"POST /gists/{gist_id}/comments\"],\n    delete: [\"DELETE /gists/{gist_id}\"],\n    deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n    fork: [\"POST /gists/{gist_id}/forks\"],\n    get: [\"GET /gists/{gist_id}\"],\n    getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n    getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n    list: [\"GET /gists\"],\n    listComments: [\"GET /gists/{gist_id}/comments\"],\n    listCommits: [\"GET /gists/{gist_id}/commits\"],\n    listForUser: [\"GET /users/{username}/gists\"],\n    listForks: [\"GET /gists/{gist_id}/forks\"],\n    listPublic: [\"GET /gists/public\"],\n    listStarred: [\"GET /gists/starred\"],\n    star: [\"PUT /gists/{gist_id}/star\"],\n    unstar: [\"DELETE /gists/{gist_id}/star\"],\n    update: [\"PATCH /gists/{gist_id}\"],\n    updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"]\n  },\n  git: {\n    createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n    createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n    createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n    createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n    createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n    deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n    getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n    getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n    getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n    getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n    listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n    updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"]\n  },\n  gitignore: {\n    getAllTemplates: [\"GET /gitignore/templates\"],\n    getTemplate: [\"GET /gitignore/templates/{name}\"]\n  },\n  interactions: {\n    getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n    getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n    getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n    getRestrictionsForYourPublicRepos: [\n      \"GET /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"] }\n    ],\n    removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n    removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n    removeRestrictionsForRepo: [\n      \"DELETE /repos/{owner}/{repo}/interaction-limits\"\n    ],\n    removeRestrictionsForYourPublicRepos: [\n      \"DELETE /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"] }\n    ],\n    setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n    setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n    setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n    setRestrictionsForYourPublicRepos: [\n      \"PUT /user/interaction-limits\",\n      {},\n      { renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"] }\n    ]\n  },\n  issues: {\n    addAssignees: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n    ],\n    addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n    checkUserCanBeAssignedToIssue: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}\"\n    ],\n    create: [\"POST /repos/{owner}/{repo}/issues\"],\n    createComment: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"\n    ],\n    createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n    createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n    deleteComment: [\n      \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"\n    ],\n    deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n    deleteMilestone: [\n      \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n    getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n    getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n    getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    list: [\"GET /issues\"],\n    listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n    listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n    listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n    listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n    listEventsForTimeline: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"\n    ],\n    listForAuthenticatedUser: [\"GET /user/issues\"],\n    listForOrg: [\"GET /orgs/{org}/issues\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n    listLabelsForMilestone: [\n      \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"\n    ],\n    listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n    listLabelsOnIssue: [\n      \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n    ],\n    listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n    lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    removeAllLabels: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n    ],\n    removeAssignees: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n    ],\n    removeLabel: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"\n    ],\n    setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n    updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n    updateMilestone: [\n      \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"\n    ]\n  },\n  licenses: {\n    get: [\"GET /licenses/{license}\"],\n    getAllCommonlyUsed: [\"GET /licenses\"],\n    getForRepo: [\"GET /repos/{owner}/{repo}/license\"]\n  },\n  markdown: {\n    render: [\"POST /markdown\"],\n    renderRaw: [\n      \"POST /markdown/raw\",\n      { headers: { \"content-type\": \"text/plain; charset=utf-8\" } }\n    ]\n  },\n  meta: {\n    get: [\"GET /meta\"],\n    getAllVersions: [\"GET /versions\"],\n    getOctocat: [\"GET /octocat\"],\n    getZen: [\"GET /zen\"],\n    root: [\"GET /\"]\n  },\n  migrations: {\n    deleteArchiveForAuthenticatedUser: [\n      \"DELETE /user/migrations/{migration_id}/archive\"\n    ],\n    deleteArchiveForOrg: [\n      \"DELETE /orgs/{org}/migrations/{migration_id}/archive\"\n    ],\n    downloadArchiveForOrg: [\n      \"GET /orgs/{org}/migrations/{migration_id}/archive\"\n    ],\n    getArchiveForAuthenticatedUser: [\n      \"GET /user/migrations/{migration_id}/archive\"\n    ],\n    getStatusForAuthenticatedUser: [\"GET /user/migrations/{migration_id}\"],\n    getStatusForOrg: [\"GET /orgs/{org}/migrations/{migration_id}\"],\n    listForAuthenticatedUser: [\"GET /user/migrations\"],\n    listForOrg: [\"GET /orgs/{org}/migrations\"],\n    listReposForAuthenticatedUser: [\n      \"GET /user/migrations/{migration_id}/repositories\"\n    ],\n    listReposForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/repositories\"],\n    listReposForUser: [\n      \"GET /user/migrations/{migration_id}/repositories\",\n      {},\n      { renamed: [\"migrations\", \"listReposForAuthenticatedUser\"] }\n    ],\n    startForAuthenticatedUser: [\"POST /user/migrations\"],\n    startForOrg: [\"POST /orgs/{org}/migrations\"],\n    unlockRepoForAuthenticatedUser: [\n      \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\"\n    ],\n    unlockRepoForOrg: [\n      \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\"\n    ]\n  },\n  oidc: {\n    getOidcCustomSubTemplateForOrg: [\n      \"GET /orgs/{org}/actions/oidc/customization/sub\"\n    ],\n    updateOidcCustomSubTemplateForOrg: [\n      \"PUT /orgs/{org}/actions/oidc/customization/sub\"\n    ]\n  },\n  orgs: {\n    addSecurityManagerTeam: [\n      \"PUT /orgs/{org}/security-managers/teams/{team_slug}\"\n    ],\n    assignTeamToOrgRole: [\n      \"PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n    ],\n    assignUserToOrgRole: [\n      \"PUT /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n    ],\n    blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n    cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n    checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n    checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n    checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n    convertMemberToOutsideCollaborator: [\n      \"PUT /orgs/{org}/outside_collaborators/{username}\"\n    ],\n    createCustomOrganizationRole: [\"POST /orgs/{org}/organization-roles\"],\n    createInvitation: [\"POST /orgs/{org}/invitations\"],\n    createOrUpdateCustomProperties: [\"PATCH /orgs/{org}/properties/schema\"],\n    createOrUpdateCustomPropertiesValuesForRepos: [\n      \"PATCH /orgs/{org}/properties/values\"\n    ],\n    createOrUpdateCustomProperty: [\n      \"PUT /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    createWebhook: [\"POST /orgs/{org}/hooks\"],\n    delete: [\"DELETE /orgs/{org}\"],\n    deleteCustomOrganizationRole: [\n      \"DELETE /orgs/{org}/organization-roles/{role_id}\"\n    ],\n    deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n    enableOrDisableSecurityProductOnAllOrgRepos: [\n      \"POST /orgs/{org}/{security_product}/{enablement}\"\n    ],\n    get: [\"GET /orgs/{org}\"],\n    getAllCustomProperties: [\"GET /orgs/{org}/properties/schema\"],\n    getCustomProperty: [\n      \"GET /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n    getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n    getOrgRole: [\"GET /orgs/{org}/organization-roles/{role_id}\"],\n    getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n    getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n    getWebhookDelivery: [\n      \"GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}\"\n    ],\n    list: [\"GET /organizations\"],\n    listAppInstallations: [\"GET /orgs/{org}/installations\"],\n    listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n    listCustomPropertiesValuesForRepos: [\"GET /orgs/{org}/properties/values\"],\n    listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n    listForAuthenticatedUser: [\"GET /user/orgs\"],\n    listForUser: [\"GET /users/{username}/orgs\"],\n    listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n    listMembers: [\"GET /orgs/{org}/members\"],\n    listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n    listOrgRoleTeams: [\"GET /orgs/{org}/organization-roles/{role_id}/teams\"],\n    listOrgRoleUsers: [\"GET /orgs/{org}/organization-roles/{role_id}/users\"],\n    listOrgRoles: [\"GET /orgs/{org}/organization-roles\"],\n    listOrganizationFineGrainedPermissions: [\n      \"GET /orgs/{org}/organization-fine-grained-permissions\"\n    ],\n    listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n    listPatGrantRepositories: [\n      \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\"\n    ],\n    listPatGrantRequestRepositories: [\n      \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\"\n    ],\n    listPatGrantRequests: [\"GET /orgs/{org}/personal-access-token-requests\"],\n    listPatGrants: [\"GET /orgs/{org}/personal-access-tokens\"],\n    listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n    listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n    listSecurityManagerTeams: [\"GET /orgs/{org}/security-managers\"],\n    listWebhookDeliveries: [\"GET /orgs/{org}/hooks/{hook_id}/deliveries\"],\n    listWebhooks: [\"GET /orgs/{org}/hooks\"],\n    patchCustomOrganizationRole: [\n      \"PATCH /orgs/{org}/organization-roles/{role_id}\"\n    ],\n    pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\n      \"POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n    ],\n    removeCustomProperty: [\n      \"DELETE /orgs/{org}/properties/schema/{custom_property_name}\"\n    ],\n    removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n    removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n    removeOutsideCollaborator: [\n      \"DELETE /orgs/{org}/outside_collaborators/{username}\"\n    ],\n    removePublicMembershipForAuthenticatedUser: [\n      \"DELETE /orgs/{org}/public_members/{username}\"\n    ],\n    removeSecurityManagerTeam: [\n      \"DELETE /orgs/{org}/security-managers/teams/{team_slug}\"\n    ],\n    reviewPatGrantRequest: [\n      \"POST /orgs/{org}/personal-access-token-requests/{pat_request_id}\"\n    ],\n    reviewPatGrantRequestsInBulk: [\n      \"POST /orgs/{org}/personal-access-token-requests\"\n    ],\n    revokeAllOrgRolesTeam: [\n      \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}\"\n    ],\n    revokeAllOrgRolesUser: [\n      \"DELETE /orgs/{org}/organization-roles/users/{username}\"\n    ],\n    revokeOrgRoleTeam: [\n      \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n    ],\n    revokeOrgRoleUser: [\n      \"DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n    ],\n    setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n    setPublicMembershipForAuthenticatedUser: [\n      \"PUT /orgs/{org}/public_members/{username}\"\n    ],\n    unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n    update: [\"PATCH /orgs/{org}\"],\n    updateMembershipForAuthenticatedUser: [\n      \"PATCH /user/memberships/orgs/{org}\"\n    ],\n    updatePatAccess: [\"POST /orgs/{org}/personal-access-tokens/{pat_id}\"],\n    updatePatAccesses: [\"POST /orgs/{org}/personal-access-tokens\"],\n    updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n    updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"]\n  },\n  packages: {\n    deletePackageForAuthenticatedUser: [\n      \"DELETE /user/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageForOrg: [\n      \"DELETE /orgs/{org}/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageForUser: [\n      \"DELETE /users/{username}/packages/{package_type}/{package_name}\"\n    ],\n    deletePackageVersionForAuthenticatedUser: [\n      \"DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    deletePackageVersionForOrg: [\n      \"DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    deletePackageVersionForUser: [\n      \"DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getAllPackageVersionsForAPackageOwnedByAnOrg: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n      {},\n      { renamed: [\"packages\", \"getAllPackageVersionsForPackageOwnedByOrg\"] }\n    ],\n    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions\",\n      {},\n      {\n        renamed: [\n          \"packages\",\n          \"getAllPackageVersionsForPackageOwnedByAuthenticatedUser\"\n        ]\n      }\n    ],\n    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions\"\n    ],\n    getAllPackageVersionsForPackageOwnedByOrg: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\"\n    ],\n    getAllPackageVersionsForPackageOwnedByUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}/versions\"\n    ],\n    getPackageForAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}\"\n    ],\n    getPackageForOrganization: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}\"\n    ],\n    getPackageForUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}\"\n    ],\n    getPackageVersionForAuthenticatedUser: [\n      \"GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getPackageVersionForOrganization: [\n      \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    getPackageVersionForUser: [\n      \"GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n    ],\n    listDockerMigrationConflictingPackagesForAuthenticatedUser: [\n      \"GET /user/docker/conflicts\"\n    ],\n    listDockerMigrationConflictingPackagesForOrganization: [\n      \"GET /orgs/{org}/docker/conflicts\"\n    ],\n    listDockerMigrationConflictingPackagesForUser: [\n      \"GET /users/{username}/docker/conflicts\"\n    ],\n    listPackagesForAuthenticatedUser: [\"GET /user/packages\"],\n    listPackagesForOrganization: [\"GET /orgs/{org}/packages\"],\n    listPackagesForUser: [\"GET /users/{username}/packages\"],\n    restorePackageForAuthenticatedUser: [\n      \"POST /user/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageForOrg: [\n      \"POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageForUser: [\n      \"POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}\"\n    ],\n    restorePackageVersionForAuthenticatedUser: [\n      \"POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ],\n    restorePackageVersionForOrg: [\n      \"POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ],\n    restorePackageVersionForUser: [\n      \"POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n    ]\n  },\n  projects: {\n    addCollaborator: [\"PUT /projects/{project_id}/collaborators/{username}\"],\n    createCard: [\"POST /projects/columns/{column_id}/cards\"],\n    createColumn: [\"POST /projects/{project_id}/columns\"],\n    createForAuthenticatedUser: [\"POST /user/projects\"],\n    createForOrg: [\"POST /orgs/{org}/projects\"],\n    createForRepo: [\"POST /repos/{owner}/{repo}/projects\"],\n    delete: [\"DELETE /projects/{project_id}\"],\n    deleteCard: [\"DELETE /projects/columns/cards/{card_id}\"],\n    deleteColumn: [\"DELETE /projects/columns/{column_id}\"],\n    get: [\"GET /projects/{project_id}\"],\n    getCard: [\"GET /projects/columns/cards/{card_id}\"],\n    getColumn: [\"GET /projects/columns/{column_id}\"],\n    getPermissionForUser: [\n      \"GET /projects/{project_id}/collaborators/{username}/permission\"\n    ],\n    listCards: [\"GET /projects/columns/{column_id}/cards\"],\n    listCollaborators: [\"GET /projects/{project_id}/collaborators\"],\n    listColumns: [\"GET /projects/{project_id}/columns\"],\n    listForOrg: [\"GET /orgs/{org}/projects\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/projects\"],\n    listForUser: [\"GET /users/{username}/projects\"],\n    moveCard: [\"POST /projects/columns/cards/{card_id}/moves\"],\n    moveColumn: [\"POST /projects/columns/{column_id}/moves\"],\n    removeCollaborator: [\n      \"DELETE /projects/{project_id}/collaborators/{username}\"\n    ],\n    update: [\"PATCH /projects/{project_id}\"],\n    updateCard: [\"PATCH /projects/columns/cards/{card_id}\"],\n    updateColumn: [\"PATCH /projects/columns/{column_id}\"]\n  },\n  pulls: {\n    checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    create: [\"POST /repos/{owner}/{repo}/pulls\"],\n    createReplyForReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"\n    ],\n    createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    createReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n    ],\n    deletePendingReview: [\n      \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    deleteReviewComment: [\n      \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n    ],\n    dismissReview: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    getReview: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    list: [\"GET /repos/{owner}/{repo}/pulls\"],\n    listCommentsForReview: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"\n    ],\n    listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n    listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n    listRequestedReviewers: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    listReviewComments: [\n      \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n    ],\n    listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n    listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    removeRequestedReviewers: [\n      \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    requestReviewers: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n    ],\n    submitReview: [\n      \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"\n    ],\n    update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    updateBranch: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\"\n    ],\n    updateReview: [\n      \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n    ],\n    updateReviewComment: [\n      \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n    ]\n  },\n  rateLimit: { get: [\"GET /rate_limit\"] },\n  reactions: {\n    createForCommitComment: [\n      \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n    ],\n    createForIssue: [\n      \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\"\n    ],\n    createForIssueComment: [\n      \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n    ],\n    createForPullRequestReviewComment: [\n      \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n    ],\n    createForRelease: [\n      \"POST /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n    ],\n    createForTeamDiscussionCommentInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n    ],\n    createForTeamDiscussionInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n    ],\n    deleteForCommitComment: [\n      \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForIssue: [\n      \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\"\n    ],\n    deleteForIssueComment: [\n      \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForPullRequestComment: [\n      \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\"\n    ],\n    deleteForRelease: [\n      \"DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}\"\n    ],\n    deleteForTeamDiscussion: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\"\n    ],\n    deleteForTeamDiscussionComment: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\"\n    ],\n    listForCommitComment: [\n      \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n    ],\n    listForIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"],\n    listForIssueComment: [\n      \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n    ],\n    listForPullRequestReviewComment: [\n      \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n    ],\n    listForRelease: [\n      \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n    ],\n    listForTeamDiscussionCommentInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n    ],\n    listForTeamDiscussionInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n    ]\n  },\n  repos: {\n    acceptInvitation: [\n      \"PATCH /user/repository_invitations/{invitation_id}\",\n      {},\n      { renamed: [\"repos\", \"acceptInvitationForAuthenticatedUser\"] }\n    ],\n    acceptInvitationForAuthenticatedUser: [\n      \"PATCH /user/repository_invitations/{invitation_id}\"\n    ],\n    addAppAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n    addStatusCheckContexts: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    addTeamAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    addUserAccessRestrictions: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    cancelPagesDeployment: [\n      \"POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel\"\n    ],\n    checkAutomatedSecurityFixes: [\n      \"GET /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n    checkPrivateVulnerabilityReporting: [\n      \"GET /repos/{owner}/{repo}/private-vulnerability-reporting\"\n    ],\n    checkVulnerabilityAlerts: [\n      \"GET /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    codeownersErrors: [\"GET /repos/{owner}/{repo}/codeowners/errors\"],\n    compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n    compareCommitsWithBasehead: [\n      \"GET /repos/{owner}/{repo}/compare/{basehead}\"\n    ],\n    createAutolink: [\"POST /repos/{owner}/{repo}/autolinks\"],\n    createCommitComment: [\n      \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n    ],\n    createCommitSignatureProtection: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n    createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n    createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n    createDeploymentBranchPolicy: [\n      \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n    ],\n    createDeploymentProtectionRule: [\n      \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n    ],\n    createDeploymentStatus: [\n      \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n    ],\n    createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n    createForAuthenticatedUser: [\"POST /user/repos\"],\n    createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n    createInOrg: [\"POST /orgs/{org}/repos\"],\n    createOrUpdateCustomPropertiesValues: [\n      \"PATCH /repos/{owner}/{repo}/properties/values\"\n    ],\n    createOrUpdateEnvironment: [\n      \"PUT /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n    createOrgRuleset: [\"POST /orgs/{org}/rulesets\"],\n    createPagesDeployment: [\"POST /repos/{owner}/{repo}/pages/deployments\"],\n    createPagesSite: [\"POST /repos/{owner}/{repo}/pages\"],\n    createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n    createRepoRuleset: [\"POST /repos/{owner}/{repo}/rulesets\"],\n    createTagProtection: [\"POST /repos/{owner}/{repo}/tags/protection\"],\n    createUsingTemplate: [\n      \"POST /repos/{template_owner}/{template_repo}/generate\"\n    ],\n    createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n    declineInvitation: [\n      \"DELETE /user/repository_invitations/{invitation_id}\",\n      {},\n      { renamed: [\"repos\", \"declineInvitationForAuthenticatedUser\"] }\n    ],\n    declineInvitationForAuthenticatedUser: [\n      \"DELETE /user/repository_invitations/{invitation_id}\"\n    ],\n    delete: [\"DELETE /repos/{owner}/{repo}\"],\n    deleteAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n    ],\n    deleteAdminBranchProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    deleteAnEnvironment: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    deleteAutolink: [\"DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    deleteBranchProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n    deleteCommitSignatureProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n    deleteDeployment: [\n      \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"\n    ],\n    deleteDeploymentBranchPolicy: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n    deleteInvitation: [\n      \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"\n    ],\n    deleteOrgRuleset: [\"DELETE /orgs/{org}/rulesets/{ruleset_id}\"],\n    deletePagesSite: [\"DELETE /repos/{owner}/{repo}/pages\"],\n    deletePullRequestReviewProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n    deleteReleaseAsset: [\n      \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n    ],\n    deleteRepoRuleset: [\"DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    deleteTagProtection: [\n      \"DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}\"\n    ],\n    deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    disableAutomatedSecurityFixes: [\n      \"DELETE /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    disableDeploymentProtectionRule: [\n      \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n    ],\n    disablePrivateVulnerabilityReporting: [\n      \"DELETE /repos/{owner}/{repo}/private-vulnerability-reporting\"\n    ],\n    disableVulnerabilityAlerts: [\n      \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    downloadArchive: [\n      \"GET /repos/{owner}/{repo}/zipball/{ref}\",\n      {},\n      { renamed: [\"repos\", \"downloadZipballArchive\"] }\n    ],\n    downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n    downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n    enableAutomatedSecurityFixes: [\n      \"PUT /repos/{owner}/{repo}/automated-security-fixes\"\n    ],\n    enablePrivateVulnerabilityReporting: [\n      \"PUT /repos/{owner}/{repo}/private-vulnerability-reporting\"\n    ],\n    enableVulnerabilityAlerts: [\n      \"PUT /repos/{owner}/{repo}/vulnerability-alerts\"\n    ],\n    generateReleaseNotes: [\n      \"POST /repos/{owner}/{repo}/releases/generate-notes\"\n    ],\n    get: [\"GET /repos/{owner}/{repo}\"],\n    getAccessRestrictions: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n    ],\n    getAdminBranchProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    getAllDeploymentProtectionRules: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n    ],\n    getAllEnvironments: [\"GET /repos/{owner}/{repo}/environments\"],\n    getAllStatusCheckContexts: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"\n    ],\n    getAllTopics: [\"GET /repos/{owner}/{repo}/topics\"],\n    getAppsWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"\n    ],\n    getAutolink: [\"GET /repos/{owner}/{repo}/autolinks/{autolink_id}\"],\n    getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n    getBranchProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    getBranchRules: [\"GET /repos/{owner}/{repo}/rules/branches/{branch}\"],\n    getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n    getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n    getCollaboratorPermissionLevel: [\n      \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"\n    ],\n    getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n    getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n    getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n    getCommitSignatureProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n    ],\n    getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n    getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n    getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n    getCustomDeploymentProtectionRule: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n    ],\n    getCustomPropertiesValues: [\"GET /repos/{owner}/{repo}/properties/values\"],\n    getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n    getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    getDeploymentBranchPolicy: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    getDeploymentStatus: [\n      \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"\n    ],\n    getEnvironment: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}\"\n    ],\n    getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n    getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n    getOrgRuleSuite: [\"GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}\"],\n    getOrgRuleSuites: [\"GET /orgs/{org}/rulesets/rule-suites\"],\n    getOrgRuleset: [\"GET /orgs/{org}/rulesets/{ruleset_id}\"],\n    getOrgRulesets: [\"GET /orgs/{org}/rulesets\"],\n    getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n    getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n    getPagesDeployment: [\n      \"GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}\"\n    ],\n    getPagesHealthCheck: [\"GET /repos/{owner}/{repo}/pages/health\"],\n    getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n    getPullRequestReviewProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n    getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n    getReadmeInDirectory: [\"GET /repos/{owner}/{repo}/readme/{dir}\"],\n    getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n    getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n    getRepoRuleSuite: [\n      \"GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}\"\n    ],\n    getRepoRuleSuites: [\"GET /repos/{owner}/{repo}/rulesets/rule-suites\"],\n    getRepoRuleset: [\"GET /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    getRepoRulesets: [\"GET /repos/{owner}/{repo}/rulesets\"],\n    getStatusChecksProtection: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    getTeamsWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"\n    ],\n    getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n    getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n    getUsersWithAccessToProtectedBranch: [\n      \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"\n    ],\n    getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n    getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    getWebhookConfigForRepo: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n    ],\n    getWebhookDelivery: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}\"\n    ],\n    listActivities: [\"GET /repos/{owner}/{repo}/activity\"],\n    listAutolinks: [\"GET /repos/{owner}/{repo}/autolinks\"],\n    listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n    listBranchesForHeadCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"\n    ],\n    listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n    listCommentsForCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n    ],\n    listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n    listCommitStatusesForRef: [\n      \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"\n    ],\n    listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n    listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n    listCustomDeploymentRuleIntegrations: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\"\n    ],\n    listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n    listDeploymentBranchPolicies: [\n      \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n    ],\n    listDeploymentStatuses: [\n      \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n    ],\n    listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n    listForAuthenticatedUser: [\"GET /user/repos\"],\n    listForOrg: [\"GET /orgs/{org}/repos\"],\n    listForUser: [\"GET /users/{username}/repos\"],\n    listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n    listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n    listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n    listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n    listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n    listPublic: [\"GET /repositories\"],\n    listPullRequestsAssociatedWithCommit: [\n      \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"\n    ],\n    listReleaseAssets: [\n      \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"\n    ],\n    listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n    listTagProtection: [\"GET /repos/{owner}/{repo}/tags/protection\"],\n    listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n    listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n    listWebhookDeliveries: [\n      \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\"\n    ],\n    listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n    merge: [\"POST /repos/{owner}/{repo}/merges\"],\n    mergeUpstream: [\"POST /repos/{owner}/{repo}/merge-upstream\"],\n    pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n    redeliverWebhookDelivery: [\n      \"POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n    ],\n    removeAppAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    removeCollaborator: [\n      \"DELETE /repos/{owner}/{repo}/collaborators/{username}\"\n    ],\n    removeStatusCheckContexts: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    removeStatusCheckProtection: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    removeTeamAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    removeUserAccessRestrictions: [\n      \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n    replaceAllTopics: [\"PUT /repos/{owner}/{repo}/topics\"],\n    requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n    setAdminBranchProtection: [\n      \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n    ],\n    setAppAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n      {},\n      { mapToData: \"apps\" }\n    ],\n    setStatusCheckContexts: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n      {},\n      { mapToData: \"contexts\" }\n    ],\n    setTeamAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n      {},\n      { mapToData: \"teams\" }\n    ],\n    setUserAccessRestrictions: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n      {},\n      { mapToData: \"users\" }\n    ],\n    testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n    transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n    update: [\"PATCH /repos/{owner}/{repo}\"],\n    updateBranchProtection: [\n      \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"\n    ],\n    updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n    updateDeploymentBranchPolicy: [\n      \"PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n    ],\n    updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n    updateInvitation: [\n      \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"\n    ],\n    updateOrgRuleset: [\"PUT /orgs/{org}/rulesets/{ruleset_id}\"],\n    updatePullRequestReviewProtection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n    ],\n    updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n    updateReleaseAsset: [\n      \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n    ],\n    updateRepoRuleset: [\"PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}\"],\n    updateStatusCheckPotection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n      {},\n      { renamed: [\"repos\", \"updateStatusCheckProtection\"] }\n    ],\n    updateStatusCheckProtection: [\n      \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n    ],\n    updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    updateWebhookConfigForRepo: [\n      \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n    ],\n    uploadReleaseAsset: [\n      \"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\",\n      { baseUrl: \"https://uploads.github.com\" }\n    ]\n  },\n  search: {\n    code: [\"GET /search/code\"],\n    commits: [\"GET /search/commits\"],\n    issuesAndPullRequests: [\"GET /search/issues\"],\n    labels: [\"GET /search/labels\"],\n    repos: [\"GET /search/repositories\"],\n    topics: [\"GET /search/topics\"],\n    users: [\"GET /search/users\"]\n  },\n  secretScanning: {\n    getAlert: [\n      \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n    ],\n    listAlertsForEnterprise: [\n      \"GET /enterprises/{enterprise}/secret-scanning/alerts\"\n    ],\n    listAlertsForOrg: [\"GET /orgs/{org}/secret-scanning/alerts\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n    listLocationsForAlert: [\n      \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\"\n    ],\n    updateAlert: [\n      \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n    ]\n  },\n  securityAdvisories: {\n    createFork: [\n      \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks\"\n    ],\n    createPrivateVulnerabilityReport: [\n      \"POST /repos/{owner}/{repo}/security-advisories/reports\"\n    ],\n    createRepositoryAdvisory: [\n      \"POST /repos/{owner}/{repo}/security-advisories\"\n    ],\n    createRepositoryAdvisoryCveRequest: [\n      \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve\"\n    ],\n    getGlobalAdvisory: [\"GET /advisories/{ghsa_id}\"],\n    getRepositoryAdvisory: [\n      \"GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n    ],\n    listGlobalAdvisories: [\"GET /advisories\"],\n    listOrgRepositoryAdvisories: [\"GET /orgs/{org}/security-advisories\"],\n    listRepositoryAdvisories: [\"GET /repos/{owner}/{repo}/security-advisories\"],\n    updateRepositoryAdvisory: [\n      \"PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n    ]\n  },\n  teams: {\n    addOrUpdateMembershipForUserInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    addOrUpdateProjectPermissionsInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    addOrUpdateRepoPermissionsInOrg: [\n      \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    checkPermissionsForProjectInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    checkPermissionsForRepoInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    create: [\"POST /orgs/{org}/teams\"],\n    createDiscussionCommentInOrg: [\n      \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n    ],\n    createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n    deleteDiscussionCommentInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    deleteDiscussionInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n    getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n    getDiscussionCommentInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    getDiscussionInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    getMembershipForUserInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    list: [\"GET /orgs/{org}/teams\"],\n    listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n    listDiscussionCommentsInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n    ],\n    listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n    listForAuthenticatedUser: [\"GET /user/teams\"],\n    listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n    listPendingInvitationsInOrg: [\n      \"GET /orgs/{org}/teams/{team_slug}/invitations\"\n    ],\n    listProjectsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects\"],\n    listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n    removeMembershipForUserInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n    ],\n    removeProjectInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n    ],\n    removeRepoInOrg: [\n      \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n    ],\n    updateDiscussionCommentInOrg: [\n      \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n    ],\n    updateDiscussionInOrg: [\n      \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n    ],\n    updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"]\n  },\n  users: {\n    addEmailForAuthenticated: [\n      \"POST /user/emails\",\n      {},\n      { renamed: [\"users\", \"addEmailForAuthenticatedUser\"] }\n    ],\n    addEmailForAuthenticatedUser: [\"POST /user/emails\"],\n    addSocialAccountForAuthenticatedUser: [\"POST /user/social_accounts\"],\n    block: [\"PUT /user/blocks/{username}\"],\n    checkBlocked: [\"GET /user/blocks/{username}\"],\n    checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n    checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n    createGpgKeyForAuthenticated: [\n      \"POST /user/gpg_keys\",\n      {},\n      { renamed: [\"users\", \"createGpgKeyForAuthenticatedUser\"] }\n    ],\n    createGpgKeyForAuthenticatedUser: [\"POST /user/gpg_keys\"],\n    createPublicSshKeyForAuthenticated: [\n      \"POST /user/keys\",\n      {},\n      { renamed: [\"users\", \"createPublicSshKeyForAuthenticatedUser\"] }\n    ],\n    createPublicSshKeyForAuthenticatedUser: [\"POST /user/keys\"],\n    createSshSigningKeyForAuthenticatedUser: [\"POST /user/ssh_signing_keys\"],\n    deleteEmailForAuthenticated: [\n      \"DELETE /user/emails\",\n      {},\n      { renamed: [\"users\", \"deleteEmailForAuthenticatedUser\"] }\n    ],\n    deleteEmailForAuthenticatedUser: [\"DELETE /user/emails\"],\n    deleteGpgKeyForAuthenticated: [\n      \"DELETE /user/gpg_keys/{gpg_key_id}\",\n      {},\n      { renamed: [\"users\", \"deleteGpgKeyForAuthenticatedUser\"] }\n    ],\n    deleteGpgKeyForAuthenticatedUser: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n    deletePublicSshKeyForAuthenticated: [\n      \"DELETE /user/keys/{key_id}\",\n      {},\n      { renamed: [\"users\", \"deletePublicSshKeyForAuthenticatedUser\"] }\n    ],\n    deletePublicSshKeyForAuthenticatedUser: [\"DELETE /user/keys/{key_id}\"],\n    deleteSocialAccountForAuthenticatedUser: [\"DELETE /user/social_accounts\"],\n    deleteSshSigningKeyForAuthenticatedUser: [\n      \"DELETE /user/ssh_signing_keys/{ssh_signing_key_id}\"\n    ],\n    follow: [\"PUT /user/following/{username}\"],\n    getAuthenticated: [\"GET /user\"],\n    getByUsername: [\"GET /users/{username}\"],\n    getContextForUser: [\"GET /users/{username}/hovercard\"],\n    getGpgKeyForAuthenticated: [\n      \"GET /user/gpg_keys/{gpg_key_id}\",\n      {},\n      { renamed: [\"users\", \"getGpgKeyForAuthenticatedUser\"] }\n    ],\n    getGpgKeyForAuthenticatedUser: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n    getPublicSshKeyForAuthenticated: [\n      \"GET /user/keys/{key_id}\",\n      {},\n      { renamed: [\"users\", \"getPublicSshKeyForAuthenticatedUser\"] }\n    ],\n    getPublicSshKeyForAuthenticatedUser: [\"GET /user/keys/{key_id}\"],\n    getSshSigningKeyForAuthenticatedUser: [\n      \"GET /user/ssh_signing_keys/{ssh_signing_key_id}\"\n    ],\n    list: [\"GET /users\"],\n    listBlockedByAuthenticated: [\n      \"GET /user/blocks\",\n      {},\n      { renamed: [\"users\", \"listBlockedByAuthenticatedUser\"] }\n    ],\n    listBlockedByAuthenticatedUser: [\"GET /user/blocks\"],\n    listEmailsForAuthenticated: [\n      \"GET /user/emails\",\n      {},\n      { renamed: [\"users\", \"listEmailsForAuthenticatedUser\"] }\n    ],\n    listEmailsForAuthenticatedUser: [\"GET /user/emails\"],\n    listFollowedByAuthenticated: [\n      \"GET /user/following\",\n      {},\n      { renamed: [\"users\", \"listFollowedByAuthenticatedUser\"] }\n    ],\n    listFollowedByAuthenticatedUser: [\"GET /user/following\"],\n    listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n    listFollowersForUser: [\"GET /users/{username}/followers\"],\n    listFollowingForUser: [\"GET /users/{username}/following\"],\n    listGpgKeysForAuthenticated: [\n      \"GET /user/gpg_keys\",\n      {},\n      { renamed: [\"users\", \"listGpgKeysForAuthenticatedUser\"] }\n    ],\n    listGpgKeysForAuthenticatedUser: [\"GET /user/gpg_keys\"],\n    listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n    listPublicEmailsForAuthenticated: [\n      \"GET /user/public_emails\",\n      {},\n      { renamed: [\"users\", \"listPublicEmailsForAuthenticatedUser\"] }\n    ],\n    listPublicEmailsForAuthenticatedUser: [\"GET /user/public_emails\"],\n    listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n    listPublicSshKeysForAuthenticated: [\n      \"GET /user/keys\",\n      {},\n      { renamed: [\"users\", \"listPublicSshKeysForAuthenticatedUser\"] }\n    ],\n    listPublicSshKeysForAuthenticatedUser: [\"GET /user/keys\"],\n    listSocialAccountsForAuthenticatedUser: [\"GET /user/social_accounts\"],\n    listSocialAccountsForUser: [\"GET /users/{username}/social_accounts\"],\n    listSshSigningKeysForAuthenticatedUser: [\"GET /user/ssh_signing_keys\"],\n    listSshSigningKeysForUser: [\"GET /users/{username}/ssh_signing_keys\"],\n    setPrimaryEmailVisibilityForAuthenticated: [\n      \"PATCH /user/email/visibility\",\n      {},\n      { renamed: [\"users\", \"setPrimaryEmailVisibilityForAuthenticatedUser\"] }\n    ],\n    setPrimaryEmailVisibilityForAuthenticatedUser: [\n      \"PATCH /user/email/visibility\"\n    ],\n    unblock: [\"DELETE /user/blocks/{username}\"],\n    unfollow: [\"DELETE /user/following/{username}\"],\n    updateAuthenticated: [\"PATCH /user\"]\n  }\n};\nvar endpoints_default = Endpoints;\n\n//# sourceMappingURL=endpoints.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   legacyRestEndpointMethods: () => (/* binding */ legacyRestEndpointMethods),\n/* harmony export */   restEndpointMethods: () => (/* binding */ restEndpointMethods)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js\");\n/* harmony import */ var _endpoints_to_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpoints-to-methods.js */ \"(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js\");\n\n\nfunction restEndpointMethods(octokit) {\n  const api = (0,_endpoints_to_methods_js__WEBPACK_IMPORTED_MODULE_0__.endpointsToMethods)(octokit);\n  return {\n    rest: api\n  };\n}\nrestEndpointMethods.VERSION = _version_js__WEBPACK_IMPORTED_MODULE_1__.VERSION;\nfunction legacyRestEndpointMethods(octokit) {\n  const api = (0,_endpoints_to_methods_js__WEBPACK_IMPORTED_MODULE_0__.endpointsToMethods)(octokit);\n  return {\n    ...api,\n    rest: api\n  };\n}\nlegacyRestEndpointMethods.VERSION = _version_js__WEBPACK_IMPORTED_MODULE_1__.VERSION;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kcy9kaXN0LXNyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ3dCO0FBQy9EO0FBQ0EsY0FBYyw0RUFBa0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsZ0RBQU87QUFDckM7QUFDQSxjQUFjLDRFQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGdEQUFPO0FBSXpDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kcy9kaXN0LXNyYy9pbmRleC5qcz8wYTU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi92ZXJzaW9uLmpzXCI7XG5pbXBvcnQgeyBlbmRwb2ludHNUb01ldGhvZHMgfSBmcm9tIFwiLi9lbmRwb2ludHMtdG8tbWV0aG9kcy5qc1wiO1xuZnVuY3Rpb24gcmVzdEVuZHBvaW50TWV0aG9kcyhvY3Rva2l0KSB7XG4gIGNvbnN0IGFwaSA9IGVuZHBvaW50c1RvTWV0aG9kcyhvY3Rva2l0KTtcbiAgcmV0dXJuIHtcbiAgICByZXN0OiBhcGlcbiAgfTtcbn1cbnJlc3RFbmRwb2ludE1ldGhvZHMuVkVSU0lPTiA9IFZFUlNJT047XG5mdW5jdGlvbiBsZWdhY3lSZXN0RW5kcG9pbnRNZXRob2RzKG9jdG9raXQpIHtcbiAgY29uc3QgYXBpID0gZW5kcG9pbnRzVG9NZXRob2RzKG9jdG9raXQpO1xuICByZXR1cm4ge1xuICAgIC4uLmFwaSxcbiAgICByZXN0OiBhcGlcbiAgfTtcbn1cbmxlZ2FjeVJlc3RFbmRwb2ludE1ldGhvZHMuVkVSU0lPTiA9IFZFUlNJT047XG5leHBvcnQge1xuICBsZWdhY3lSZXN0RW5kcG9pbnRNZXRob2RzLFxuICByZXN0RW5kcG9pbnRNZXRob2RzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"13.2.4\";\n\n//# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kcy9kaXN0LXNyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kcy9kaXN0LXNyYy92ZXJzaW9uLmpzP2IyM2YiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVkVSU0lPTiA9IFwiMTMuMi40XCI7XG5leHBvcnQge1xuICBWRVJTSU9OXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-retry/dist-bundle/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@octokit/plugin-retry/dist-bundle/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   retry: () => (/* binding */ retry)\n/* harmony export */ });\n/* harmony import */ var bottleneck_light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bottleneck/light.js */ \"(ssr)/./node_modules/bottleneck/light.js\");\n/* harmony import */ var _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/request-error */ \"(ssr)/./node_modules/@octokit/request-error/dist-src/index.js\");\n// pkg/dist-src/index.js\n\n\n// pkg/dist-src/error-request.js\nasync function errorRequest(state, octokit, error, options) {\n  if (!error.request || !error.request.request) {\n    throw error;\n  }\n  if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {\n    const retries = options.request.retries != null ? options.request.retries : state.retries;\n    const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);\n    throw octokit.retry.retryRequest(error, retries, retryAfter);\n  }\n  throw error;\n}\n\n// pkg/dist-src/wrap-request.js\n\n\nasync function wrapRequest(state, octokit, request, options) {\n  const limiter = new bottleneck_light_js__WEBPACK_IMPORTED_MODULE_0__();\n  limiter.on(\"failed\", function(error, info) {\n    const maxRetries = ~~error.request.request.retries;\n    const after = ~~error.request.request.retryAfter;\n    options.request.retryCount = info.retryCount + 1;\n    if (maxRetries > info.retryCount) {\n      return after * state.retryAfterBaseValue;\n    }\n  });\n  return limiter.schedule(\n    requestWithGraphqlErrorHandling.bind(null, state, octokit, request),\n    options\n  );\n}\nasync function requestWithGraphqlErrorHandling(state, octokit, request, options) {\n  const response = await request(request, options);\n  if (response.data && response.data.errors && /Something went wrong while executing your query/.test(\n    response.data.errors[0].message\n  )) {\n    const error = new _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__.RequestError(response.data.errors[0].message, 500, {\n      request: options,\n      response\n    });\n    return errorRequest(state, octokit, error, options);\n  }\n  return response;\n}\n\n// pkg/dist-src/index.js\nvar VERSION = \"0.0.0-development\";\nfunction retry(octokit, octokitOptions) {\n  const state = Object.assign(\n    {\n      enabled: true,\n      retryAfterBaseValue: 1e3,\n      doNotRetry: [400, 401, 403, 404, 422, 451],\n      retries: 3\n    },\n    octokitOptions.retry\n  );\n  if (state.enabled) {\n    octokit.hook.error(\"request\", errorRequest.bind(null, state, octokit));\n    octokit.hook.wrap(\"request\", wrapRequest.bind(null, state, octokit));\n  }\n  return {\n    retry: {\n      retryRequest: (error, retries, retryAfter) => {\n        error.request.request = Object.assign({}, error.request.request, {\n          retries,\n          retryAfter\n        });\n        return error;\n      }\n    }\n  };\n}\nretry.VERSION = VERSION;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJldHJ5L2Rpc3QtYnVuZGxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUN3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzZDO0FBQ1M7QUFDdEQ7QUFDQSxzQkFBc0IsZ0RBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0VBQVk7QUFDbEM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJldHJ5L2Rpc3QtYnVuZGxlL2luZGV4LmpzPzQ3MjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5pbXBvcnQgeyBPY3Rva2l0IH0gZnJvbSBcIkBvY3Rva2l0L2NvcmVcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2Vycm9yLXJlcXVlc3QuanNcbmFzeW5jIGZ1bmN0aW9uIGVycm9yUmVxdWVzdChzdGF0ZSwgb2N0b2tpdCwgZXJyb3IsIG9wdGlvbnMpIHtcbiAgaWYgKCFlcnJvci5yZXF1ZXN0IHx8ICFlcnJvci5yZXF1ZXN0LnJlcXVlc3QpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBpZiAoZXJyb3Iuc3RhdHVzID49IDQwMCAmJiAhc3RhdGUuZG9Ob3RSZXRyeS5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgY29uc3QgcmV0cmllcyA9IG9wdGlvbnMucmVxdWVzdC5yZXRyaWVzICE9IG51bGwgPyBvcHRpb25zLnJlcXVlc3QucmV0cmllcyA6IHN0YXRlLnJldHJpZXM7XG4gICAgY29uc3QgcmV0cnlBZnRlciA9IE1hdGgucG93KChvcHRpb25zLnJlcXVlc3QucmV0cnlDb3VudCB8fCAwKSArIDEsIDIpO1xuICAgIHRocm93IG9jdG9raXQucmV0cnkucmV0cnlSZXF1ZXN0KGVycm9yLCByZXRyaWVzLCByZXRyeUFmdGVyKTtcbiAgfVxuICB0aHJvdyBlcnJvcjtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3dyYXAtcmVxdWVzdC5qc1xuaW1wb3J0IEJvdHRsZW5lY2sgZnJvbSBcImJvdHRsZW5lY2svbGlnaHQuanNcIjtcbmltcG9ydCB7IFJlcXVlc3RFcnJvciB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0LWVycm9yXCI7XG5hc3luYyBmdW5jdGlvbiB3cmFwUmVxdWVzdChzdGF0ZSwgb2N0b2tpdCwgcmVxdWVzdCwgb3B0aW9ucykge1xuICBjb25zdCBsaW1pdGVyID0gbmV3IEJvdHRsZW5lY2soKTtcbiAgbGltaXRlci5vbihcImZhaWxlZFwiLCBmdW5jdGlvbihlcnJvciwgaW5mbykge1xuICAgIGNvbnN0IG1heFJldHJpZXMgPSB+fmVycm9yLnJlcXVlc3QucmVxdWVzdC5yZXRyaWVzO1xuICAgIGNvbnN0IGFmdGVyID0gfn5lcnJvci5yZXF1ZXN0LnJlcXVlc3QucmV0cnlBZnRlcjtcbiAgICBvcHRpb25zLnJlcXVlc3QucmV0cnlDb3VudCA9IGluZm8ucmV0cnlDb3VudCArIDE7XG4gICAgaWYgKG1heFJldHJpZXMgPiBpbmZvLnJldHJ5Q291bnQpIHtcbiAgICAgIHJldHVybiBhZnRlciAqIHN0YXRlLnJldHJ5QWZ0ZXJCYXNlVmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbWl0ZXIuc2NoZWR1bGUoXG4gICAgcmVxdWVzdFdpdGhHcmFwaHFsRXJyb3JIYW5kbGluZy5iaW5kKG51bGwsIHN0YXRlLCBvY3Rva2l0LCByZXF1ZXN0KSxcbiAgICBvcHRpb25zXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0V2l0aEdyYXBocWxFcnJvckhhbmRsaW5nKHN0YXRlLCBvY3Rva2l0LCByZXF1ZXN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKTtcbiAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5lcnJvcnMgJiYgL1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGV4ZWN1dGluZyB5b3VyIHF1ZXJ5Ly50ZXN0KFxuICAgIHJlc3BvbnNlLmRhdGEuZXJyb3JzWzBdLm1lc3NhZ2VcbiAgKSkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcihyZXNwb25zZS5kYXRhLmVycm9yc1swXS5tZXNzYWdlLCA1MDAsIHtcbiAgICAgIHJlcXVlc3Q6IG9wdGlvbnMsXG4gICAgICByZXNwb25zZVxuICAgIH0pO1xuICAgIHJldHVybiBlcnJvclJlcXVlc3Qoc3RhdGUsIG9jdG9raXQsIGVycm9yLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xudmFyIFZFUlNJT04gPSBcIjAuMC4wLWRldmVsb3BtZW50XCI7XG5mdW5jdGlvbiByZXRyeShvY3Rva2l0LCBvY3Rva2l0T3B0aW9ucykge1xuICBjb25zdCBzdGF0ZSA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHJldHJ5QWZ0ZXJCYXNlVmFsdWU6IDFlMyxcbiAgICAgIGRvTm90UmV0cnk6IFs0MDAsIDQwMSwgNDAzLCA0MDQsIDQyMiwgNDUxXSxcbiAgICAgIHJldHJpZXM6IDNcbiAgICB9LFxuICAgIG9jdG9raXRPcHRpb25zLnJldHJ5XG4gICk7XG4gIGlmIChzdGF0ZS5lbmFibGVkKSB7XG4gICAgb2N0b2tpdC5ob29rLmVycm9yKFwicmVxdWVzdFwiLCBlcnJvclJlcXVlc3QuYmluZChudWxsLCBzdGF0ZSwgb2N0b2tpdCkpO1xuICAgIG9jdG9raXQuaG9vay53cmFwKFwicmVxdWVzdFwiLCB3cmFwUmVxdWVzdC5iaW5kKG51bGwsIHN0YXRlLCBvY3Rva2l0KSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXRyeToge1xuICAgICAgcmV0cnlSZXF1ZXN0OiAoZXJyb3IsIHJldHJpZXMsIHJldHJ5QWZ0ZXIpID0+IHtcbiAgICAgICAgZXJyb3IucmVxdWVzdC5yZXF1ZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgZXJyb3IucmVxdWVzdC5yZXF1ZXN0LCB7XG4gICAgICAgICAgcmV0cmllcyxcbiAgICAgICAgICByZXRyeUFmdGVyXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxucmV0cnkuVkVSU0lPTiA9IFZFUlNJT047XG5leHBvcnQge1xuICBWRVJTSU9OLFxuICByZXRyeVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-retry/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/plugin-throttling/dist-bundle/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@octokit/plugin-throttling/dist-bundle/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throttling: () => (/* binding */ throttling)\n/* harmony export */ });\n/* harmony import */ var bottleneck_light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bottleneck/light.js */ \"(ssr)/./node_modules/bottleneck/light.js\");\n// pkg/dist-src/index.js\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/wrap-request.js\nvar noop = () => Promise.resolve();\nfunction wrapRequest(state, request, options) {\n  return state.retryLimiter.schedule(doRequest, state, request, options);\n}\nasync function doRequest(state, request, options) {\n  const isWrite = options.method !== \"GET\" && options.method !== \"HEAD\";\n  const { pathname } = new URL(options.url, \"http://github.test\");\n  const isSearch = options.method === \"GET\" && pathname.startsWith(\"/search/\");\n  const isGraphQL = pathname.startsWith(\"/graphql\");\n  const retryCount = ~~request.retryCount;\n  const jobOptions = retryCount > 0 ? { priority: 0, weight: 0 } : {};\n  if (state.clustering) {\n    jobOptions.expiration = 1e3 * 60;\n  }\n  if (isWrite || isGraphQL) {\n    await state.write.key(state.id).schedule(jobOptions, noop);\n  }\n  if (isWrite && state.triggersNotification(pathname)) {\n    await state.notifications.key(state.id).schedule(jobOptions, noop);\n  }\n  if (isSearch) {\n    await state.search.key(state.id).schedule(jobOptions, noop);\n  }\n  const req = state.global.key(state.id).schedule(jobOptions, request, options);\n  if (isGraphQL) {\n    const res = await req;\n    if (res.data.errors != null && res.data.errors.some((error) => error.type === \"RATE_LIMITED\")) {\n      const error = Object.assign(new Error(\"GraphQL Rate Limit Exceeded\"), {\n        response: res,\n        data: res.data\n      });\n      throw error;\n    }\n  }\n  return req;\n}\n\n// pkg/dist-src/generated/triggers-notification-paths.js\nvar triggers_notification_paths_default = [\n  \"/orgs/{org}/invitations\",\n  \"/orgs/{org}/invitations/{invitation_id}\",\n  \"/orgs/{org}/teams/{team_slug}/discussions\",\n  \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n  \"/repos/{owner}/{repo}/collaborators/{username}\",\n  \"/repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n  \"/repos/{owner}/{repo}/issues\",\n  \"/repos/{owner}/{repo}/issues/{issue_number}/comments\",\n  \"/repos/{owner}/{repo}/pulls\",\n  \"/repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n  \"/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\",\n  \"/repos/{owner}/{repo}/pulls/{pull_number}/merge\",\n  \"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n  \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n  \"/repos/{owner}/{repo}/releases\",\n  \"/teams/{team_id}/discussions\",\n  \"/teams/{team_id}/discussions/{discussion_number}/comments\"\n];\n\n// pkg/dist-src/route-matcher.js\nfunction routeMatcher(paths) {\n  const regexes = paths.map(\n    (path) => path.split(\"/\").map((c) => c.startsWith(\"{\") ? \"(?:.+?)\" : c).join(\"/\")\n  );\n  const regex2 = `^(?:${regexes.map((r) => `(?:${r})`).join(\"|\")})[^/]*$`;\n  return new RegExp(regex2, \"i\");\n}\n\n// pkg/dist-src/index.js\nvar regex = routeMatcher(triggers_notification_paths_default);\nvar triggersNotification = regex.test.bind(regex);\nvar groups = {};\nvar createGroups = function(Bottleneck, common) {\n  groups.global = new Bottleneck.Group({\n    id: \"octokit-global\",\n    maxConcurrent: 10,\n    ...common\n  });\n  groups.search = new Bottleneck.Group({\n    id: \"octokit-search\",\n    maxConcurrent: 1,\n    minTime: 2e3,\n    ...common\n  });\n  groups.write = new Bottleneck.Group({\n    id: \"octokit-write\",\n    maxConcurrent: 1,\n    minTime: 1e3,\n    ...common\n  });\n  groups.notifications = new Bottleneck.Group({\n    id: \"octokit-notifications\",\n    maxConcurrent: 1,\n    minTime: 3e3,\n    ...common\n  });\n};\nfunction throttling(octokit, octokitOptions) {\n  const {\n    enabled = true,\n    Bottleneck = bottleneck_light_js__WEBPACK_IMPORTED_MODULE_0__,\n    id = \"no-id\",\n    timeout = 1e3 * 60 * 2,\n    // Redis TTL: 2 minutes\n    connection\n  } = octokitOptions.throttle || {};\n  if (!enabled) {\n    return {};\n  }\n  const common = { connection, timeout };\n  if (groups.global == null) {\n    createGroups(Bottleneck, common);\n  }\n  const state = Object.assign(\n    {\n      clustering: connection != null,\n      triggersNotification,\n      fallbackSecondaryRateRetryAfter: 60,\n      retryAfterBaseValue: 1e3,\n      retryLimiter: new Bottleneck(),\n      id,\n      ...groups\n    },\n    octokitOptions.throttle\n  );\n  if (typeof state.onSecondaryRateLimit !== \"function\" || typeof state.onRateLimit !== \"function\") {\n    throw new Error(`octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    `);\n  }\n  const events = {};\n  const emitter = new Bottleneck.Events(events);\n  events.on(\"secondary-limit\", state.onSecondaryRateLimit);\n  events.on(\"rate-limit\", state.onRateLimit);\n  events.on(\n    \"error\",\n    (e) => octokit.log.warn(\"Error in throttling-plugin limit handler\", e)\n  );\n  state.retryLimiter.on(\"failed\", async function(error, info) {\n    const [state2, request, options] = info.args;\n    const { pathname } = new URL(options.url, \"http://github.test\");\n    const shouldRetryGraphQL = pathname.startsWith(\"/graphql\") && error.status !== 401;\n    if (!(shouldRetryGraphQL || error.status === 403)) {\n      return;\n    }\n    const retryCount = ~~request.retryCount;\n    request.retryCount = retryCount;\n    options.request.retryCount = retryCount;\n    const { wantRetry, retryAfter = 0 } = await async function() {\n      if (/\\bsecondary rate\\b/i.test(error.message)) {\n        const retryAfter2 = Number(error.response.headers[\"retry-after\"]) || state2.fallbackSecondaryRateRetryAfter;\n        const wantRetry2 = await emitter.trigger(\n          \"secondary-limit\",\n          retryAfter2,\n          options,\n          octokit,\n          retryCount\n        );\n        return { wantRetry: wantRetry2, retryAfter: retryAfter2 };\n      }\n      if (error.response.headers != null && error.response.headers[\"x-ratelimit-remaining\"] === \"0\" || (error.response.data?.errors ?? []).some(\n        (error2) => error2.type === \"RATE_LIMITED\"\n      )) {\n        const rateLimitReset = new Date(\n          ~~error.response.headers[\"x-ratelimit-reset\"] * 1e3\n        ).getTime();\n        const retryAfter2 = Math.max(\n          // Add one second so we retry _after_ the reset time\n          // https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#exceeding-the-rate-limit\n          Math.ceil((rateLimitReset - Date.now()) / 1e3) + 1,\n          0\n        );\n        const wantRetry2 = await emitter.trigger(\n          \"rate-limit\",\n          retryAfter2,\n          options,\n          octokit,\n          retryCount\n        );\n        return { wantRetry: wantRetry2, retryAfter: retryAfter2 };\n      }\n      return {};\n    }();\n    if (wantRetry) {\n      request.retryCount++;\n      return retryAfter * state2.retryAfterBaseValue;\n    }\n  });\n  octokit.hook.wrap(\"request\", wrapRequest.bind(null, state));\n  return {};\n}\nthrottling.VERSION = VERSION;\nthrottling.triggersNotification = triggersNotification;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/plugin-throttling/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/request-error/dist-src/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@octokit/request-error/dist-src/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestError: () => (/* binding */ RequestError)\n/* harmony export */ });\nclass RequestError extends Error {\n  name;\n  /**\n   * http status code\n   */\n  status;\n  /**\n   * Request options that lead to the error.\n   */\n  request;\n  /**\n   * Response object if a response was received\n   */\n  response;\n  constructor(message, statusCode, options) {\n    super(message);\n    this.name = \"HttpError\";\n    this.status = Number.parseInt(statusCode);\n    if (Number.isNaN(this.status)) {\n      this.status = 0;\n    }\n    if (\"response\" in options) {\n      this.response = options.response;\n    }\n    const requestCopy = Object.assign({}, options.request);\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(\n          / .*$/,\n          \" [REDACTED]\"\n        )\n      });\n    }\n    requestCopy.url = requestCopy.url.replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\").replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcmVxdWVzdC1lcnJvci9kaXN0LXNyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9yZXF1ZXN0LWVycm9yL2Rpc3Qtc3JjL2luZGV4LmpzPzk0NmYiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUmVxdWVzdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lO1xuICAvKipcbiAgICogaHR0cCBzdGF0dXMgY29kZVxuICAgKi9cbiAgc3RhdHVzO1xuICAvKipcbiAgICogUmVxdWVzdCBvcHRpb25zIHRoYXQgbGVhZCB0byB0aGUgZXJyb3IuXG4gICAqL1xuICByZXF1ZXN0O1xuICAvKipcbiAgICogUmVzcG9uc2Ugb2JqZWN0IGlmIGEgcmVzcG9uc2Ugd2FzIHJlY2VpdmVkXG4gICAqL1xuICByZXNwb25zZTtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzQ29kZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSHR0cEVycm9yXCI7XG4gICAgdGhpcy5zdGF0dXMgPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzQ29kZSk7XG4gICAgaWYgKE51bWJlci5pc05hTih0aGlzLnN0YXR1cykpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gMDtcbiAgICB9XG4gICAgaWYgKFwicmVzcG9uc2VcIiBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLnJlc3BvbnNlID0gb3B0aW9ucy5yZXNwb25zZTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdENvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLnJlcXVlc3QpO1xuICAgIGlmIChvcHRpb25zLnJlcXVlc3QuaGVhZGVycy5hdXRob3JpemF0aW9uKSB7XG4gICAgICByZXF1ZXN0Q29weS5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5yZXF1ZXN0LmhlYWRlcnMsIHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5yZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbi5yZXBsYWNlKFxuICAgICAgICAgIC8gLiokLyxcbiAgICAgICAgICBcIiBbUkVEQUNURURdXCJcbiAgICAgICAgKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVlc3RDb3B5LnVybCA9IHJlcXVlc3RDb3B5LnVybC5yZXBsYWNlKC9cXGJjbGllbnRfc2VjcmV0PVxcdysvZywgXCJjbGllbnRfc2VjcmV0PVtSRURBQ1RFRF1cIikucmVwbGFjZSgvXFxiYWNjZXNzX3Rva2VuPVxcdysvZywgXCJhY2Nlc3NfdG9rZW49W1JFREFDVEVEXVwiKTtcbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0Q29weTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgUmVxdWVzdEVycm9yXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/request-error/dist-src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/request/dist-bundle/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@octokit/request/dist-bundle/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _octokit_endpoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @octokit/endpoint */ \"(ssr)/./node_modules/@octokit/endpoint/dist-bundle/index.js\");\n/* harmony import */ var universal_user_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! universal-user-agent */ \"(ssr)/./node_modules/universal-user-agent/index.js\");\n/* harmony import */ var _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/request-error */ \"(ssr)/./node_modules/@octokit/request-error/dist-src/index.js\");\n// pkg/dist-src/index.js\n\n\n// pkg/dist-src/defaults.js\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/defaults.js\nvar defaults_default = {\n  headers: {\n    \"user-agent\": `octokit-request.js/${VERSION} ${(0,universal_user_agent__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)()}`\n  }\n};\n\n// pkg/dist-src/is-plain-object.js\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) return false;\n  if (Object.prototype.toString.call(value) !== \"[object Object]\") return false;\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null) return true;\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n\n// pkg/dist-src/fetch-wrapper.js\n\nasync function fetchWrapper(requestOptions) {\n  const fetch = requestOptions.request?.fetch || globalThis.fetch;\n  if (!fetch) {\n    throw new Error(\n      \"fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing\"\n    );\n  }\n  const log = requestOptions.request?.log || console;\n  const parseSuccessResponseBody = requestOptions.request?.parseSuccessResponseBody !== false;\n  const body = isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body) ? JSON.stringify(requestOptions.body) : requestOptions.body;\n  const requestHeaders = Object.fromEntries(\n    Object.entries(requestOptions.headers).map(([name, value]) => [\n      name,\n      String(value)\n    ])\n  );\n  let fetchResponse;\n  try {\n    fetchResponse = await fetch(requestOptions.url, {\n      method: requestOptions.method,\n      body,\n      redirect: requestOptions.request?.redirect,\n      headers: requestHeaders,\n      signal: requestOptions.request?.signal,\n      // duplex must be set if request.body is ReadableStream or Async Iterables.\n      // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.\n      ...requestOptions.body && { duplex: \"half\" }\n    });\n  } catch (error) {\n    let message = \"Unknown Error\";\n    if (error instanceof Error) {\n      if (error.name === \"AbortError\") {\n        error.status = 500;\n        throw error;\n      }\n      message = error.message;\n      if (error.name === \"TypeError\" && \"cause\" in error) {\n        if (error.cause instanceof Error) {\n          message = error.cause.message;\n        } else if (typeof error.cause === \"string\") {\n          message = error.cause;\n        }\n      }\n    }\n    const requestError = new _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__.RequestError(message, 500, {\n      request: requestOptions\n    });\n    requestError.cause = error;\n    throw requestError;\n  }\n  const status = fetchResponse.status;\n  const url = fetchResponse.url;\n  const responseHeaders = {};\n  for (const [key, value] of fetchResponse.headers) {\n    responseHeaders[key] = value;\n  }\n  const octokitResponse = {\n    url,\n    status,\n    headers: responseHeaders,\n    data: \"\"\n  };\n  if (\"deprecation\" in responseHeaders) {\n    const matches = responseHeaders.link && responseHeaders.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n    const deprecationLink = matches && matches.pop();\n    log.warn(\n      `[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${responseHeaders.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`\n    );\n  }\n  if (status === 204 || status === 205) {\n    return octokitResponse;\n  }\n  if (requestOptions.method === \"HEAD\") {\n    if (status < 400) {\n      return octokitResponse;\n    }\n    throw new _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__.RequestError(fetchResponse.statusText, status, {\n      response: octokitResponse,\n      request: requestOptions\n    });\n  }\n  if (status === 304) {\n    octokitResponse.data = await getResponseData(fetchResponse);\n    throw new _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__.RequestError(\"Not modified\", status, {\n      response: octokitResponse,\n      request: requestOptions\n    });\n  }\n  if (status >= 400) {\n    octokitResponse.data = await getResponseData(fetchResponse);\n    throw new _octokit_request_error__WEBPACK_IMPORTED_MODULE_1__.RequestError(toErrorMessage(octokitResponse.data), status, {\n      response: octokitResponse,\n      request: requestOptions\n    });\n  }\n  octokitResponse.data = parseSuccessResponseBody ? await getResponseData(fetchResponse) : fetchResponse.body;\n  return octokitResponse;\n}\nasync function getResponseData(response) {\n  const contentType = response.headers.get(\"content-type\");\n  if (/application\\/json/.test(contentType)) {\n    return response.json().catch(() => response.text()).catch(() => \"\");\n  }\n  if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n    return response.text();\n  }\n  return response.arrayBuffer();\n}\nfunction toErrorMessage(data) {\n  if (typeof data === \"string\") {\n    return data;\n  }\n  if (data instanceof ArrayBuffer) {\n    return \"Unknown error\";\n  }\n  if (\"message\" in data) {\n    const suffix = \"documentation_url\" in data ? ` - ${data.documentation_url}` : \"\";\n    return Array.isArray(data.errors) ? `${data.message}: ${data.errors.map((v) => JSON.stringify(v)).join(\", \")}${suffix}` : `${data.message}${suffix}`;\n  }\n  return `Unknown error: ${JSON.stringify(data)}`;\n}\n\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldEndpoint, newDefaults) {\n  const endpoint2 = oldEndpoint.defaults(newDefaults);\n  const newApi = function(route, parameters) {\n    const endpointOptions = endpoint2.merge(route, parameters);\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint2.parse(endpointOptions));\n    }\n    const request2 = (route2, parameters2) => {\n      return fetchWrapper(\n        endpoint2.parse(endpoint2.merge(route2, parameters2))\n      );\n    };\n    Object.assign(request2, {\n      endpoint: endpoint2,\n      defaults: withDefaults.bind(null, endpoint2)\n    });\n    return endpointOptions.request.hook(request2, endpointOptions);\n  };\n  return Object.assign(newApi, {\n    endpoint: endpoint2,\n    defaults: withDefaults.bind(null, endpoint2)\n  });\n}\n\n// pkg/dist-src/index.js\nvar request = withDefaults(_octokit_endpoint__WEBPACK_IMPORTED_MODULE_2__.endpoint, defaults_default);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/request/dist-bundle/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/webhooks-methods/dist-node/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@octokit/webhooks-methods/dist-node/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify),\n/* harmony export */   verifyWithFallback: () => (/* binding */ verifyWithFallback)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n// pkg/dist-src/node/sign.js\n\n\n// pkg/dist-src/version.js\nvar VERSION = \"5.1.0\";\n\n// pkg/dist-src/node/sign.js\nasync function sign(secret, payload) {\n  if (!secret || !payload) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret & payload required for sign()\"\n    );\n  }\n  if (typeof payload !== \"string\") {\n    throw new TypeError(\"[@octokit/webhooks-methods] payload must be a string\");\n  }\n  const algorithm = \"sha256\";\n  return `${algorithm}=${(0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(algorithm, secret).update(payload).digest(\"hex\")}`;\n}\nsign.VERSION = VERSION;\n\n// pkg/dist-src/node/verify.js\n\n\nasync function verify(secret, eventPayload, signature) {\n  if (!secret || !eventPayload || !signature) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret, eventPayload & signature required\"\n    );\n  }\n  if (typeof eventPayload !== \"string\") {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] eventPayload must be a string\"\n    );\n  }\n  const signatureBuffer = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(signature);\n  const verificationBuffer = node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(await sign(secret, eventPayload));\n  if (signatureBuffer.length !== verificationBuffer.length) {\n    return false;\n  }\n  return (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.timingSafeEqual)(signatureBuffer, verificationBuffer);\n}\nverify.VERSION = VERSION;\n\n// pkg/dist-src/index.js\nasync function verifyWithFallback(secret, payload, signature, additionalSecrets) {\n  const firstPass = await verify(secret, payload, signature);\n  if (firstPass) {\n    return true;\n  }\n  if (additionalSecrets !== void 0) {\n    for (const s of additionalSecrets) {\n      const v = await verify(s, payload, signature);\n      if (v) {\n        return v;\n      }\n    }\n  }\n  return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvd2ViaG9va3MtbWV0aG9kcy9kaXN0LW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUN5Qzs7QUFFekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVLEdBQUcsdURBQVUsa0RBQWtEO0FBQ3JGO0FBQ0E7O0FBRUE7QUFDOEM7QUFDVDtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtDQUFNO0FBQ2hDLDZCQUE2QiwrQ0FBTTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxTQUFTLDREQUFlO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC93ZWJob29rcy1tZXRob2RzL2Rpc3Qtbm9kZS9pbmRleC5qcz85YzM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBrZy9kaXN0LXNyYy9ub2RlL3NpZ24uanNcbmltcG9ydCB7IGNyZWF0ZUhtYWMgfSBmcm9tIFwibm9kZTpjcnlwdG9cIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL3ZlcnNpb24uanNcbnZhciBWRVJTSU9OID0gXCI1LjEuMFwiO1xuXG4vLyBwa2cvZGlzdC1zcmMvbm9kZS9zaWduLmpzXG5hc3luYyBmdW5jdGlvbiBzaWduKHNlY3JldCwgcGF5bG9hZCkge1xuICBpZiAoIXNlY3JldCB8fCAhcGF5bG9hZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIltAb2N0b2tpdC93ZWJob29rcy1tZXRob2RzXSBzZWNyZXQgJiBwYXlsb2FkIHJlcXVpcmVkIGZvciBzaWduKClcIlxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwYXlsb2FkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltAb2N0b2tpdC93ZWJob29rcy1tZXRob2RzXSBwYXlsb2FkIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gIH1cbiAgY29uc3QgYWxnb3JpdGhtID0gXCJzaGEyNTZcIjtcbiAgcmV0dXJuIGAke2FsZ29yaXRobX09JHtjcmVhdGVIbWFjKGFsZ29yaXRobSwgc2VjcmV0KS51cGRhdGUocGF5bG9hZCkuZGlnZXN0KFwiaGV4XCIpfWA7XG59XG5zaWduLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4vLyBwa2cvZGlzdC1zcmMvbm9kZS92ZXJpZnkuanNcbmltcG9ydCB7IHRpbWluZ1NhZmVFcXVhbCB9IGZyb20gXCJub2RlOmNyeXB0b1wiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcIm5vZGU6YnVmZmVyXCI7XG5hc3luYyBmdW5jdGlvbiB2ZXJpZnkoc2VjcmV0LCBldmVudFBheWxvYWQsIHNpZ25hdHVyZSkge1xuICBpZiAoIXNlY3JldCB8fCAhZXZlbnRQYXlsb2FkIHx8ICFzaWduYXR1cmUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJbQG9jdG9raXQvd2ViaG9va3MtbWV0aG9kc10gc2VjcmV0LCBldmVudFBheWxvYWQgJiBzaWduYXR1cmUgcmVxdWlyZWRcIlxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBldmVudFBheWxvYWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJbQG9jdG9raXQvd2ViaG9va3MtbWV0aG9kc10gZXZlbnRQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmdcIlxuICAgICk7XG4gIH1cbiAgY29uc3Qgc2lnbmF0dXJlQnVmZmVyID0gQnVmZmVyLmZyb20oc2lnbmF0dXJlKTtcbiAgY29uc3QgdmVyaWZpY2F0aW9uQnVmZmVyID0gQnVmZmVyLmZyb20oYXdhaXQgc2lnbihzZWNyZXQsIGV2ZW50UGF5bG9hZCkpO1xuICBpZiAoc2lnbmF0dXJlQnVmZmVyLmxlbmd0aCAhPT0gdmVyaWZpY2F0aW9uQnVmZmVyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdGltaW5nU2FmZUVxdWFsKHNpZ25hdHVyZUJ1ZmZlciwgdmVyaWZpY2F0aW9uQnVmZmVyKTtcbn1cbnZlcmlmeS5WRVJTSU9OID0gVkVSU0lPTjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlXaXRoRmFsbGJhY2soc2VjcmV0LCBwYXlsb2FkLCBzaWduYXR1cmUsIGFkZGl0aW9uYWxTZWNyZXRzKSB7XG4gIGNvbnN0IGZpcnN0UGFzcyA9IGF3YWl0IHZlcmlmeShzZWNyZXQsIHBheWxvYWQsIHNpZ25hdHVyZSk7XG4gIGlmIChmaXJzdFBhc3MpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYWRkaXRpb25hbFNlY3JldHMgIT09IHZvaWQgMCkge1xuICAgIGZvciAoY29uc3QgcyBvZiBhZGRpdGlvbmFsU2VjcmV0cykge1xuICAgICAgY29uc3QgdiA9IGF3YWl0IHZlcmlmeShzLCBwYXlsb2FkLCBzaWduYXR1cmUpO1xuICAgICAgaWYgKHYpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCB7XG4gIHNpZ24sXG4gIHZlcmlmeSxcbiAgdmVyaWZ5V2l0aEZhbGxiYWNrXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/webhooks-methods/dist-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@octokit/webhooks/dist-bundle/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@octokit/webhooks/dist-bundle/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Webhooks: () => (/* binding */ Webhooks),\n/* harmony export */   createEventHandler: () => (/* binding */ createEventHandler),\n/* harmony export */   createNodeMiddleware: () => (/* binding */ createNodeMiddleware),\n/* harmony export */   emitterEventNames: () => (/* binding */ emitterEventNames)\n/* harmony export */ });\n/* harmony import */ var _octokit_webhooks_methods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @octokit/webhooks-methods */ \"(ssr)/./node_modules/@octokit/webhooks-methods/dist-node/index.js\");\n// pkg/dist-src/createLogger.js\nvar createLogger = (logger) => ({\n  debug: () => {\n  },\n  info: () => {\n  },\n  warn: console.warn.bind(console),\n  error: console.error.bind(console),\n  ...logger\n});\n\n// pkg/dist-src/generated/webhook-names.js\nvar emitterEventNames = [\n  \"branch_protection_configuration\",\n  \"branch_protection_configuration.disabled\",\n  \"branch_protection_configuration.enabled\",\n  \"branch_protection_rule\",\n  \"branch_protection_rule.created\",\n  \"branch_protection_rule.deleted\",\n  \"branch_protection_rule.edited\",\n  \"check_run\",\n  \"check_run.completed\",\n  \"check_run.created\",\n  \"check_run.requested_action\",\n  \"check_run.rerequested\",\n  \"check_suite\",\n  \"check_suite.completed\",\n  \"check_suite.requested\",\n  \"check_suite.rerequested\",\n  \"code_scanning_alert\",\n  \"code_scanning_alert.appeared_in_branch\",\n  \"code_scanning_alert.closed_by_user\",\n  \"code_scanning_alert.created\",\n  \"code_scanning_alert.fixed\",\n  \"code_scanning_alert.reopened\",\n  \"code_scanning_alert.reopened_by_user\",\n  \"commit_comment\",\n  \"commit_comment.created\",\n  \"create\",\n  \"custom_property\",\n  \"custom_property.created\",\n  \"custom_property.deleted\",\n  \"custom_property.updated\",\n  \"custom_property_values\",\n  \"custom_property_values.updated\",\n  \"delete\",\n  \"dependabot_alert\",\n  \"dependabot_alert.auto_dismissed\",\n  \"dependabot_alert.auto_reopened\",\n  \"dependabot_alert.created\",\n  \"dependabot_alert.dismissed\",\n  \"dependabot_alert.fixed\",\n  \"dependabot_alert.reintroduced\",\n  \"dependabot_alert.reopened\",\n  \"deploy_key\",\n  \"deploy_key.created\",\n  \"deploy_key.deleted\",\n  \"deployment\",\n  \"deployment.created\",\n  \"deployment_protection_rule\",\n  \"deployment_protection_rule.requested\",\n  \"deployment_review\",\n  \"deployment_review.approved\",\n  \"deployment_review.rejected\",\n  \"deployment_review.requested\",\n  \"deployment_status\",\n  \"deployment_status.created\",\n  \"discussion\",\n  \"discussion.answered\",\n  \"discussion.category_changed\",\n  \"discussion.closed\",\n  \"discussion.created\",\n  \"discussion.deleted\",\n  \"discussion.edited\",\n  \"discussion.labeled\",\n  \"discussion.locked\",\n  \"discussion.pinned\",\n  \"discussion.reopened\",\n  \"discussion.transferred\",\n  \"discussion.unanswered\",\n  \"discussion.unlabeled\",\n  \"discussion.unlocked\",\n  \"discussion.unpinned\",\n  \"discussion_comment\",\n  \"discussion_comment.created\",\n  \"discussion_comment.deleted\",\n  \"discussion_comment.edited\",\n  \"fork\",\n  \"github_app_authorization\",\n  \"github_app_authorization.revoked\",\n  \"gollum\",\n  \"installation\",\n  \"installation.created\",\n  \"installation.deleted\",\n  \"installation.new_permissions_accepted\",\n  \"installation.suspend\",\n  \"installation.unsuspend\",\n  \"installation_repositories\",\n  \"installation_repositories.added\",\n  \"installation_repositories.removed\",\n  \"installation_target\",\n  \"installation_target.renamed\",\n  \"issue_comment\",\n  \"issue_comment.created\",\n  \"issue_comment.deleted\",\n  \"issue_comment.edited\",\n  \"issues\",\n  \"issues.assigned\",\n  \"issues.closed\",\n  \"issues.deleted\",\n  \"issues.demilestoned\",\n  \"issues.edited\",\n  \"issues.labeled\",\n  \"issues.locked\",\n  \"issues.milestoned\",\n  \"issues.opened\",\n  \"issues.pinned\",\n  \"issues.reopened\",\n  \"issues.transferred\",\n  \"issues.unassigned\",\n  \"issues.unlabeled\",\n  \"issues.unlocked\",\n  \"issues.unpinned\",\n  \"label\",\n  \"label.created\",\n  \"label.deleted\",\n  \"label.edited\",\n  \"marketplace_purchase\",\n  \"marketplace_purchase.cancelled\",\n  \"marketplace_purchase.changed\",\n  \"marketplace_purchase.pending_change\",\n  \"marketplace_purchase.pending_change_cancelled\",\n  \"marketplace_purchase.purchased\",\n  \"member\",\n  \"member.added\",\n  \"member.edited\",\n  \"member.removed\",\n  \"membership\",\n  \"membership.added\",\n  \"membership.removed\",\n  \"merge_group\",\n  \"merge_group.checks_requested\",\n  \"merge_group.destroyed\",\n  \"meta\",\n  \"meta.deleted\",\n  \"milestone\",\n  \"milestone.closed\",\n  \"milestone.created\",\n  \"milestone.deleted\",\n  \"milestone.edited\",\n  \"milestone.opened\",\n  \"org_block\",\n  \"org_block.blocked\",\n  \"org_block.unblocked\",\n  \"organization\",\n  \"organization.deleted\",\n  \"organization.member_added\",\n  \"organization.member_invited\",\n  \"organization.member_removed\",\n  \"organization.renamed\",\n  \"package\",\n  \"package.published\",\n  \"package.updated\",\n  \"page_build\",\n  \"personal_access_token_request\",\n  \"personal_access_token_request.approved\",\n  \"personal_access_token_request.cancelled\",\n  \"personal_access_token_request.created\",\n  \"personal_access_token_request.denied\",\n  \"ping\",\n  \"project\",\n  \"project.closed\",\n  \"project.created\",\n  \"project.deleted\",\n  \"project.edited\",\n  \"project.reopened\",\n  \"project_card\",\n  \"project_card.converted\",\n  \"project_card.created\",\n  \"project_card.deleted\",\n  \"project_card.edited\",\n  \"project_card.moved\",\n  \"project_column\",\n  \"project_column.created\",\n  \"project_column.deleted\",\n  \"project_column.edited\",\n  \"project_column.moved\",\n  \"projects_v2\",\n  \"projects_v2.closed\",\n  \"projects_v2.created\",\n  \"projects_v2.deleted\",\n  \"projects_v2.edited\",\n  \"projects_v2.reopened\",\n  \"projects_v2_item\",\n  \"projects_v2_item.archived\",\n  \"projects_v2_item.converted\",\n  \"projects_v2_item.created\",\n  \"projects_v2_item.deleted\",\n  \"projects_v2_item.edited\",\n  \"projects_v2_item.reordered\",\n  \"projects_v2_item.restored\",\n  \"public\",\n  \"pull_request\",\n  \"pull_request.assigned\",\n  \"pull_request.auto_merge_disabled\",\n  \"pull_request.auto_merge_enabled\",\n  \"pull_request.closed\",\n  \"pull_request.converted_to_draft\",\n  \"pull_request.demilestoned\",\n  \"pull_request.dequeued\",\n  \"pull_request.edited\",\n  \"pull_request.enqueued\",\n  \"pull_request.labeled\",\n  \"pull_request.locked\",\n  \"pull_request.milestoned\",\n  \"pull_request.opened\",\n  \"pull_request.ready_for_review\",\n  \"pull_request.reopened\",\n  \"pull_request.review_request_removed\",\n  \"pull_request.review_requested\",\n  \"pull_request.synchronize\",\n  \"pull_request.unassigned\",\n  \"pull_request.unlabeled\",\n  \"pull_request.unlocked\",\n  \"pull_request_review\",\n  \"pull_request_review.dismissed\",\n  \"pull_request_review.edited\",\n  \"pull_request_review.submitted\",\n  \"pull_request_review_comment\",\n  \"pull_request_review_comment.created\",\n  \"pull_request_review_comment.deleted\",\n  \"pull_request_review_comment.edited\",\n  \"pull_request_review_thread\",\n  \"pull_request_review_thread.resolved\",\n  \"pull_request_review_thread.unresolved\",\n  \"push\",\n  \"registry_package\",\n  \"registry_package.published\",\n  \"registry_package.updated\",\n  \"release\",\n  \"release.created\",\n  \"release.deleted\",\n  \"release.edited\",\n  \"release.prereleased\",\n  \"release.published\",\n  \"release.released\",\n  \"release.unpublished\",\n  \"repository\",\n  \"repository.archived\",\n  \"repository.created\",\n  \"repository.deleted\",\n  \"repository.edited\",\n  \"repository.privatized\",\n  \"repository.publicized\",\n  \"repository.renamed\",\n  \"repository.transferred\",\n  \"repository.unarchived\",\n  \"repository_advisory\",\n  \"repository_advisory.published\",\n  \"repository_advisory.reported\",\n  \"repository_dispatch\",\n  \"repository_dispatch.sample.collected\",\n  \"repository_import\",\n  \"repository_ruleset\",\n  \"repository_ruleset.created\",\n  \"repository_ruleset.deleted\",\n  \"repository_ruleset.edited\",\n  \"repository_vulnerability_alert\",\n  \"repository_vulnerability_alert.create\",\n  \"repository_vulnerability_alert.dismiss\",\n  \"repository_vulnerability_alert.reopen\",\n  \"repository_vulnerability_alert.resolve\",\n  \"secret_scanning_alert\",\n  \"secret_scanning_alert.created\",\n  \"secret_scanning_alert.reopened\",\n  \"secret_scanning_alert.resolved\",\n  \"secret_scanning_alert.revoked\",\n  \"secret_scanning_alert.validated\",\n  \"secret_scanning_alert_location\",\n  \"secret_scanning_alert_location.created\",\n  \"security_advisory\",\n  \"security_advisory.published\",\n  \"security_advisory.updated\",\n  \"security_advisory.withdrawn\",\n  \"security_and_analysis\",\n  \"sponsorship\",\n  \"sponsorship.cancelled\",\n  \"sponsorship.created\",\n  \"sponsorship.edited\",\n  \"sponsorship.pending_cancellation\",\n  \"sponsorship.pending_tier_change\",\n  \"sponsorship.tier_changed\",\n  \"star\",\n  \"star.created\",\n  \"star.deleted\",\n  \"status\",\n  \"team\",\n  \"team.added_to_repository\",\n  \"team.created\",\n  \"team.deleted\",\n  \"team.edited\",\n  \"team.removed_from_repository\",\n  \"team_add\",\n  \"watch\",\n  \"watch.started\",\n  \"workflow_dispatch\",\n  \"workflow_job\",\n  \"workflow_job.completed\",\n  \"workflow_job.in_progress\",\n  \"workflow_job.queued\",\n  \"workflow_job.waiting\",\n  \"workflow_run\",\n  \"workflow_run.completed\",\n  \"workflow_run.in_progress\",\n  \"workflow_run.requested\"\n];\n\n// pkg/dist-src/event-handler/on.js\nfunction handleEventHandlers(state, webhookName, handler) {\n  if (!state.hooks[webhookName]) {\n    state.hooks[webhookName] = [];\n  }\n  state.hooks[webhookName].push(handler);\n}\nfunction receiverOn(state, webhookNameOrNames, handler) {\n  if (Array.isArray(webhookNameOrNames)) {\n    webhookNameOrNames.forEach(\n      (webhookName) => receiverOn(state, webhookName, handler)\n    );\n    return;\n  }\n  if ([\"*\", \"error\"].includes(webhookNameOrNames)) {\n    const webhookName = webhookNameOrNames === \"*\" ? \"any\" : webhookNameOrNames;\n    const message = `Using the \"${webhookNameOrNames}\" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${webhookName.charAt(0).toUpperCase() + webhookName.slice(1)}() method instead`;\n    throw new Error(message);\n  }\n  if (!emitterEventNames.includes(webhookNameOrNames)) {\n    state.log.warn(\n      `\"${webhookNameOrNames}\" is not a known webhook name (https://developer.github.com/v3/activity/events/types/)`\n    );\n  }\n  handleEventHandlers(state, webhookNameOrNames, handler);\n}\nfunction receiverOnAny(state, handler) {\n  handleEventHandlers(state, \"*\", handler);\n}\nfunction receiverOnError(state, handler) {\n  handleEventHandlers(state, \"error\", handler);\n}\n\n// pkg/dist-src/event-handler/wrap-error-handler.js\nfunction wrapErrorHandler(handler, error) {\n  let returnValue;\n  try {\n    returnValue = handler(error);\n  } catch (error2) {\n    console.log('FATAL: Error occurred in \"error\" event handler');\n    console.log(error2);\n  }\n  if (returnValue && returnValue.catch) {\n    returnValue.catch((error2) => {\n      console.log('FATAL: Error occurred in \"error\" event handler');\n      console.log(error2);\n    });\n  }\n}\n\n// pkg/dist-src/event-handler/receive.js\nfunction getHooks(state, eventPayloadAction, eventName) {\n  const hooks = [state.hooks[eventName], state.hooks[\"*\"]];\n  if (eventPayloadAction) {\n    hooks.unshift(state.hooks[`${eventName}.${eventPayloadAction}`]);\n  }\n  return [].concat(...hooks.filter(Boolean));\n}\nfunction receiverHandle(state, event) {\n  const errorHandlers = state.hooks.error || [];\n  if (event instanceof Error) {\n    const error = Object.assign(new AggregateError([event], event.message), {\n      event\n    });\n    errorHandlers.forEach((handler) => wrapErrorHandler(handler, error));\n    return Promise.reject(error);\n  }\n  if (!event || !event.name) {\n    const error = new Error(\"Event name not passed\");\n    throw new AggregateError([error], error.message);\n  }\n  if (!event.payload) {\n    const error = new Error(\"Event name not passed\");\n    throw new AggregateError([error], error.message);\n  }\n  const hooks = getHooks(\n    state,\n    \"action\" in event.payload ? event.payload.action : null,\n    event.name\n  );\n  if (hooks.length === 0) {\n    return Promise.resolve();\n  }\n  const errors = [];\n  const promises = hooks.map((handler) => {\n    let promise = Promise.resolve(event);\n    if (state.transform) {\n      promise = promise.then(state.transform);\n    }\n    return promise.then((event2) => {\n      return handler(event2);\n    }).catch((error) => errors.push(Object.assign(error, { event })));\n  });\n  return Promise.all(promises).then(() => {\n    if (errors.length === 0) {\n      return;\n    }\n    const error = new AggregateError(\n      errors,\n      errors.map((error2) => error2.message).join(\"\\n\")\n    );\n    Object.assign(error, {\n      event\n    });\n    errorHandlers.forEach((handler) => wrapErrorHandler(handler, error));\n    throw error;\n  });\n}\n\n// pkg/dist-src/event-handler/remove-listener.js\nfunction removeListener(state, webhookNameOrNames, handler) {\n  if (Array.isArray(webhookNameOrNames)) {\n    webhookNameOrNames.forEach(\n      (webhookName) => removeListener(state, webhookName, handler)\n    );\n    return;\n  }\n  if (!state.hooks[webhookNameOrNames]) {\n    return;\n  }\n  for (let i = state.hooks[webhookNameOrNames].length - 1; i >= 0; i--) {\n    if (state.hooks[webhookNameOrNames][i] === handler) {\n      state.hooks[webhookNameOrNames].splice(i, 1);\n      return;\n    }\n  }\n}\n\n// pkg/dist-src/event-handler/index.js\nfunction createEventHandler(options) {\n  const state = {\n    hooks: {},\n    log: createLogger(options && options.log)\n  };\n  if (options && options.transform) {\n    state.transform = options.transform;\n  }\n  return {\n    on: receiverOn.bind(null, state),\n    onAny: receiverOnAny.bind(null, state),\n    onError: receiverOnError.bind(null, state),\n    removeListener: removeListener.bind(null, state),\n    receive: receiverHandle.bind(null, state)\n  };\n}\n\n// pkg/dist-src/index.js\n\n\n// pkg/dist-src/verify-and-receive.js\n\nasync function verifyAndReceive(state, event) {\n  const matchesSignature = await (0,_octokit_webhooks_methods__WEBPACK_IMPORTED_MODULE_0__.verify)(\n    state.secret,\n    event.payload,\n    event.signature\n  ).catch(() => false);\n  if (!matchesSignature) {\n    const error = new Error(\n      \"[@octokit/webhooks] signature does not match event payload and secret\"\n    );\n    return state.eventHandler.receive(\n      Object.assign(error, { event, status: 400 })\n    );\n  }\n  let payload;\n  try {\n    payload = JSON.parse(event.payload);\n  } catch (error) {\n    error.message = \"Invalid JSON\";\n    error.status = 400;\n    throw new AggregateError([error], error.message);\n  }\n  return state.eventHandler.receive({\n    id: event.id,\n    name: event.name,\n    payload\n  });\n}\n\n// pkg/dist-src/middleware/node/get-missing-headers.js\nvar WEBHOOK_HEADERS = [\n  \"x-github-event\",\n  \"x-hub-signature-256\",\n  \"x-github-delivery\"\n];\nfunction getMissingHeaders(request) {\n  return WEBHOOK_HEADERS.filter((header) => !(header in request.headers));\n}\n\n// pkg/dist-src/middleware/node/get-payload.js\nfunction getPayload(request) {\n  if (typeof request.body === \"object\" && \"rawBody\" in request && request.rawBody instanceof Buffer) {\n    return Promise.resolve(request.rawBody.toString(\"utf8\"));\n  } else if (typeof request.body === \"string\") {\n    return Promise.resolve(request.body);\n  }\n  return new Promise((resolve, reject) => {\n    let data = [];\n    request.on(\n      \"error\",\n      (error) => reject(new AggregateError([error], error.message))\n    );\n    request.on(\"data\", (chunk) => data.push(chunk));\n    request.on(\n      \"end\",\n      () => (\n        // setImmediate improves the throughput by reducing the pressure from\n        // the event loop\n        setImmediate(\n          resolve,\n          data.length === 1 ? data[0].toString(\"utf8\") : Buffer.concat(data).toString(\"utf8\")\n        )\n      )\n    );\n  });\n}\n\n// pkg/dist-src/middleware/node/on-unhandled-request-default.js\nfunction onUnhandledRequestDefault(request, response) {\n  response.writeHead(404, {\n    \"content-type\": \"application/json\"\n  });\n  response.end(\n    JSON.stringify({\n      error: `Unknown route: ${request.method} ${request.url}`\n    })\n  );\n}\n\n// pkg/dist-src/middleware/node/middleware.js\nasync function middleware(webhooks, options, request, response, next) {\n  let pathname;\n  try {\n    pathname = new URL(request.url, \"http://localhost\").pathname;\n  } catch (error) {\n    response.writeHead(422, {\n      \"content-type\": \"application/json\"\n    });\n    response.end(\n      JSON.stringify({\n        error: `Request URL could not be parsed: ${request.url}`\n      })\n    );\n    return true;\n  }\n  if (pathname !== options.path) {\n    next?.();\n    return false;\n  } else if (request.method !== \"POST\") {\n    onUnhandledRequestDefault(request, response);\n    return true;\n  }\n  if (!request.headers[\"content-type\"] || !request.headers[\"content-type\"].startsWith(\"application/json\")) {\n    response.writeHead(415, {\n      \"content-type\": \"application/json\",\n      accept: \"application/json\"\n    });\n    response.end(\n      JSON.stringify({\n        error: `Unsupported \"Content-Type\" header value. Must be \"application/json\"`\n      })\n    );\n    return true;\n  }\n  const missingHeaders = getMissingHeaders(request).join(\", \");\n  if (missingHeaders) {\n    response.writeHead(400, {\n      \"content-type\": \"application/json\"\n    });\n    response.end(\n      JSON.stringify({\n        error: `Required headers missing: ${missingHeaders}`\n      })\n    );\n    return true;\n  }\n  const eventName = request.headers[\"x-github-event\"];\n  const signatureSHA256 = request.headers[\"x-hub-signature-256\"];\n  const id = request.headers[\"x-github-delivery\"];\n  options.log.debug(`${eventName} event received (id: ${id})`);\n  let didTimeout = false;\n  const timeout = setTimeout(() => {\n    didTimeout = true;\n    response.statusCode = 202;\n    response.end(\"still processing\\n\");\n  }, 9e3).unref();\n  try {\n    const payload = await getPayload(request);\n    await webhooks.verifyAndReceive({\n      id,\n      name: eventName,\n      payload,\n      signature: signatureSHA256\n    });\n    clearTimeout(timeout);\n    if (didTimeout) return true;\n    response.end(\"ok\\n\");\n    return true;\n  } catch (error) {\n    clearTimeout(timeout);\n    if (didTimeout) return true;\n    const err = Array.from(error.errors)[0];\n    const errorMessage = err.message ? `${err.name}: ${err.message}` : \"Error: An Unspecified error occurred\";\n    response.statusCode = typeof err.status !== \"undefined\" ? err.status : 500;\n    options.log.error(error);\n    response.end(\n      JSON.stringify({\n        error: errorMessage\n      })\n    );\n    return true;\n  }\n}\n\n// pkg/dist-src/middleware/node/index.js\nfunction createNodeMiddleware(webhooks, {\n  path = \"/api/github/webhooks\",\n  log = createLogger()\n} = {}) {\n  return middleware.bind(null, webhooks, {\n    path,\n    log\n  });\n}\n\n// pkg/dist-src/index.js\nvar Webhooks = class {\n  sign;\n  verify;\n  on;\n  onAny;\n  onError;\n  removeListener;\n  receive;\n  verifyAndReceive;\n  constructor(options) {\n    if (!options || !options.secret) {\n      throw new Error(\"[@octokit/webhooks] options.secret required\");\n    }\n    const state = {\n      eventHandler: createEventHandler(options),\n      secret: options.secret,\n      hooks: {},\n      log: createLogger(options.log)\n    };\n    this.sign = _octokit_webhooks_methods__WEBPACK_IMPORTED_MODULE_0__.sign.bind(null, options.secret);\n    this.verify = _octokit_webhooks_methods__WEBPACK_IMPORTED_MODULE_0__.verify.bind(null, options.secret);\n    this.on = state.eventHandler.on;\n    this.onAny = state.eventHandler.onAny;\n    this.onError = state.eventHandler.onError;\n    this.removeListener = state.eventHandler.removeListener;\n    this.receive = state.eventHandler.receive;\n    this.verifyAndReceive = verifyAndReceive.bind(null, state);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@octokit/webhooks/dist-bundle/index.js\n");

/***/ })

};
;